<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Snap</name>
  </assembly>
  <members>
    <member name="T:Snap.Color">
      <summary>Provides functions to relate NX and Windows colors</summary>
    </member>
    <member name="M:Snap.Color.ColorIndex(System.Drawing.Color)">
      <summary>Returns the index of the NX color most closely matching a given System.Drawing.Color</summary>
      <param name="windowsColor">A System.Drawing.Color</param>
      <returns>The index of the closest color in the work part</returns>
    </member>
    <member name="M:Snap.Color.NXColor(System.Drawing.Color)">
      <summary>Returns the NX color most closely matching a given System.Drawing.Color</summary>
      <param name="windowsColor">A System.Drawing.Color</param>
      <returns>The closest NXOpen.NXColor in the work part</returns>
    </member>
    <member name="M:Snap.Color.WindowsColor(System.Int32)">
      <summary>Returns the System.Drawing.Color corresponding to a given NX color index</summary>
      <param name="colorIndex">An index into the color table of the work part</param>
      <returns>The corresponding System.Drawing.Color color</returns>
    </member>
    <member name="T:Snap.Compute">
      <summary>Computes arclengths, mass properties, intersections, and distances between objects</summary>
    </member>
    <member name="M:Snap.Compute.ArcLength(Snap.NX.ICurve[])">
      <summary>Computes the total arclength of a collection of curves or edges</summary>
      <param name="icurves">ICurve array (curves or edges)</param>
      <returns>The total arclength of the curves</returns>
    </member>
    <member name="M:Snap.Compute.Area(Snap.NX.Face[])">
      <summary>Computes the total area of a collection of faces</summary>
      <param name="faces">Array of faces</param>
      <returns>The total area of the given face array</returns>
    </member>
    <member name="M:Snap.Compute.ClosestPoints(Snap.Geom.Curve.Ray,Snap.Geom.Curve.Ray)">
      <summary>Computes the closest points on two rays</summary>
      <param name="ray1">The first ray</param>
      <param name="ray2">The second ray</param>
      <returns>A Compute.DistanceResult object that contains the distance and the closest points</returns>
    </member>
    <member name="M:Snap.Compute.ClosestPoints(Snap.Geom.Curve.Ray,Snap.NX.NXObject)">
      <summary>Computes the closest points on an object (curve, edge, face, or body) and a ray</summary>
      <param name="ray">The ray</param>
      <param name="nxObject">The object (curve, edge, face, or body)</param>
      <returns>A Compute.DistanceResult object that contains the distance and the closest points</returns>
      <exception cref="T:System.ArgumentException">The input object is not a curve, edge, face, or body</exception>
    </member>
    <member name="M:Snap.Compute.ClosestPoints(Snap.Geom.Surface.Plane,Snap.NX.NXObject)">
      <summary>Computes the closest points on an object (curve, edge, face, or body) and a plane</summary>
      <param name="plane">The plane</param>
      <param name="nxObject">The object (curve, edge, face, or body)</param>
      <returns>A Compute.DistanceResult object that contains the distance and the closest points</returns>
      <exception cref="T:System.ArgumentException">The input object is not a curve, edge, face, or body</exception>
    </member>
    <member name="M:Snap.Compute.ClosestPoints(Snap.NX.NXObject,Snap.NX.NXObject)">
      <summary>Computes the closest points on two given objects (curves, edges, faces, or bodies)</summary>
      <param name="nxObject1">The first object (curve, edge, face, or body)</param>
      <param name="nxObject2">The second object (curve, edge, face, or body)</param>
      <returns>A Compute.DistanceResult object that contains the distance and the closest points</returns>
      <exception cref="T:System.ArgumentException">One of the input objects is not a curve, edge, face, or body</exception>
    </member>
    <member name="M:Snap.Compute.ClosestPoints(Snap.Position,Snap.Geom.Curve.Ray)">
      <summary>Computes the point on a ray closest to a given point</summary>
      <param name="point">Reference point</param>
      <param name="ray">Ray</param>
      <returns>A Compute.DistanceResult object that contains the distance and the closest points</returns>
    </member>
    <member name="M:Snap.Compute.ClosestPoints(Snap.Position,Snap.Geom.Surface.Plane)">
      <summary>Computes the point on a plane closest to a given point</summary>
      <param name="point">Reference point</param>
      <param name="plane">Plane</param>
      <returns>A Compute.DistanceResult object that contains the distance and the closest points</returns>
    </member>
    <member name="M:Snap.Compute.ClosestPoints(Snap.Position,Snap.NX.NXObject)">
      <summary>Computes the point of an object (curve, edge, face, or body) closest to a given position</summary>
      <param name="point">Reference point</param>
      <param name="nxObject">The object (curve, edge, face, or body)</param>
      <returns>A Compute.DistanceResult object which contains the distance and the closest points</returns>
      <exception cref="T:System.ArgumentException">The input object is not a curve, edge, face, or body</exception>
    </member>
    <member name="M:Snap.Compute.Combine(Snap.Compute.MassPropertiesResult[])">
      <summary>Combine several mass properties results to get an overall total result</summary>
      <param name="inputResults">Results for individual bodies</param>
      <returns>Combined result</returns>
    </member>
    <member name="M:Snap.Compute.Deviation(Snap.NX.Curve,Snap.NX.Face,System.Int32)">
      <summary>Computes the maximum distance deviation between a curve and a face</summary>
      <param name="curve">A curve object</param>
      <param name="face">A face object</param>
      <param name="numCheckPoints">The number of check points to be used in the deviation checking.</param>
      <returns>The maximum distance error between curve and face</returns>
    </member>
    <member name="M:Snap.Compute.Deviation(Snap.NX.Edge,Snap.NX.Face,Snap.NX.Face,System.Int32)">
      <summary>Computes the deviation between an edge and a face</summary>
      <param name="edge">The edge to be used in the computation</param>
      <param name="faceNearEdge">A face to which the edge belongs</param>
      <param name="face">The face to be used in the computation</param>
      <param name="numCheckPoints">The number of check points to be used in the deviation checking.</param>
      <returns>The maximum distance error between the edge and the face</returns>
    </member>
    <member name="M:Snap.Compute.Deviation(Snap.NX.Face,Snap.NX.Face,System.Int32,System.Int32)">
      <summary>Computes the maximum distance deviation between two faces</summary>
      <param name="face1">First face to be used in the computation</param>
      <param name="face2">Second face</param>
      <param name="numCheckPointsU">The number of check points in the u-direction (of the first face)</param>
      <param name="numCheckPointsV">The number of check points in the v-direction (of the first face)</param>
      <returns>The maximum distance error between two faces</returns>
    </member>
    <member name="M:Snap.Compute.Deviation(Snap.NX.ICurve,Snap.NX.ICurve,System.Int32)">
      <summary>Computes the maximum distance deviation between two curves or edges</summary>
      <param name="icurve1">ICurve one</param>
      <param name="icurve2">ICurve two</param>
      <param name="numCheckPoints">The number of check points to be used in the deviation checking</param>
      <returns>The maximum distance error between two curves</returns>
    </member>
    <member name="M:Snap.Compute.DeviationInfo(Snap.NX.Curve,Snap.NX.Face,System.Int32)">
      <summary>Computes the deviation between a curve and a face</summary>
      <param name="curve">The curve to be used in the computation</param>
      <param name="face">The face to be used in the computation</param>
      <param name="numCheckPoints">The number of check points to be used in the deviation checking.</param>
      <returns>The deviation information</returns>
    </member>
    <member name="M:Snap.Compute.DeviationInfo(Snap.NX.Edge,Snap.NX.Face,Snap.NX.Edge,Snap.NX.Face,System.Int32)">
      <summary>Computes the deviation between two edges (and their owning faces)</summary>
      <param name="edge1">First edge to be used in the computation</param>
      <param name="face1">A face to which the first edge belongs</param>
      <param name="edge2">Second edge to be used in the computation</param>
      <param name="face2">A face to which the second edge belongs</param>
      <param name="numCheckPoints">The number of check points to be used in the deviation checking.</param>
      <returns>The deviation information</returns>
    </member>
    <member name="M:Snap.Compute.DeviationInfo(Snap.NX.Edge,Snap.NX.Face,Snap.NX.Face,System.Int32)">
      <summary>Computes the deviation between an edge and a face</summary>
      <param name="edge">The edge to be used in the computation</param>
      <param name="faceNearEdge">A face to which the edge belongs</param>
      <param name="face">The face to be used in the computation</param>
      <param name="numCheckPoints">The number of check points to be used in the deviation checking.</param>
      <returns>The deviation information</returns>
    </member>
    <member name="M:Snap.Compute.DeviationInfo(Snap.NX.Face,Snap.NX.Face,System.Int32,System.Int32)">
      <summary>Computes the deviation between two faces</summary>
      <param name="face1">First face to be used in the computation</param>
      <param name="face2">Second face</param>
      <param name="numCheckPointsU">The number of check points in the u-direction (of the first face)</param>
      <param name="numCheckPointsV">The number of check points in the v-direction (of the first face)</param>
      <returns>The deviation information</returns>
    </member>
    <member name="M:Snap.Compute.DeviationInfo(Snap.NX.ICurve,Snap.NX.ICurve,System.Int32)">
      <summary>Computes the deviation between two curves</summary>
      <param name="icurve1">First curve to be used in the computation</param>
      <param name="icurve2">Second curve</param>
      <param name="numCheckPoints">The number of check points to be used in the deviation checking.</param>
      <returns>The deviation information</returns>
    </member>
    <member name="M:Snap.Compute.Distance(Snap.Geom.Curve.Ray,Snap.Geom.Curve.Ray)">
      <summary>Computes the distance between two rays</summary>
      <param name="ray1">The first ray</param>
      <param name="ray2">The second ray</param>
      <returns>The distance between the two rays</returns>
    </member>
    <member name="M:Snap.Compute.Distance(Snap.Geom.Curve.Ray,Snap.NX.NXObject)">
      <summary>Computes the distance between an object (curve, edge, face, or body) and a ray</summary>
      <param name="ray">The ray</param>
      <param name="nxObject">The object (curve, edge, face, or body)</param>
      <returns>The distance between the ray and the object</returns>
      <exception cref="T:System.ArgumentException">The input object is not a curve, edge, face, or body</exception>
    </member>
    <member name="M:Snap.Compute.Distance(Snap.Geom.Surface.Plane,Snap.NX.NXObject)">
      <summary>Computes the distance between an object (curve, edge, face, or body) and a plane</summary>
      <param name="plane">The plane</param>
      <param name="nxObject">The object (curve, edge, face, or body)</param>
      <returns>The distance between the plane and the object</returns>
      <exception cref="T:System.ArgumentException">The input object is not a curve, edge, face, or body</exception>
    </member>
    <member name="M:Snap.Compute.Distance(Snap.NX.NXObject,Snap.NX.NXObject)">
      <summary>Computes the distance between two given objects (curves, edges, faces, or bodies)</summary>
      <param name="nxObject1">The first object (curve, edge, face, or body)</param>
      <param name="nxObject2">The second object (curve, edge, face, or body)</param>
      <returns>The distance between two objects</returns>
      <exception cref="T:System.ArgumentException">One of the input objects is not a curve, edge, face, or body</exception>
    </member>
    <member name="M:Snap.Compute.Distance(Snap.Position,Snap.Geom.Curve.Ray)">
      <summary>Computes the distance between a point (position) and a ray</summary>
      <param name="point">Reference point (position)</param>
      <param name="ray">Ray</param>
      <returns>The distance between the point and the ray</returns>
    </member>
    <member name="M:Snap.Compute.Distance(Snap.Position,Snap.Geom.Surface.Plane)">
      <summary>Computes the distance between a point (position) and a plane</summary>
      <param name="point">Reference point (position)</param>
      <param name="plane">Plane</param>
      <returns>The distance between the point and the plane</returns>
    </member>
    <member name="M:Snap.Compute.Distance(Snap.Position,Snap.NX.NXObject)">
      <summary>Computes the distance between an object (curve, edge, face, or body) and a position</summary>
      <param name="point">Reference point</param>
      <param name="nxObject">The object (curve, edge, face, or body)</param>
      <returns>The distance between the position and the object</returns>
      <exception cref="T:System.ArgumentException">The input object is not a curve, edge, face, or body</exception>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.Geom.Curve.Ray,Snap.Geom.Surface.Plane)">
      <summary>Computes a single point of intersection of a ray and a plane</summary>
      <param name="ray">The ray</param>
      <param name="plane">The plane</param>
      <returns>Location of the intersection point, or <c>Nothing</c> if no intersection exists</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.Geom.Curve.Ray,Snap.NX.Body,Snap.Position)">
      <summary>Computes a single point of intersection of a ray and a body</summary>
      <param name="ray">The ray</param>
      <param name="body">The body</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>Location of intersection point, or <c>Nothing</c> if no intersection was found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.Geom.Curve.Ray,Snap.NX.Face)">
      <summary>Computes all points of intersection of a ray and a face</summary>
      <param name="ray">The ray</param>
      <param name="face">The face</param>
      <returns>Locations of intersection points, or <c>Nothing</c> if no intersection was found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.Geom.Curve.Ray,Snap.NX.Face,Snap.Position)">
      <summary>Computes a single point of intersection of a ray and a face</summary>
      <param name="ray">The ray</param>
      <param name="face">The face</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>Location of intersection point, or <c>Nothing</c> if no intersection is found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.Geom.Surface.Plane,Snap.Geom.Surface.Plane)">
      <summary>Computes the intersection of two planes (a ray)</summary>
      <param name="p1">First plane</param>
      <param name="p2">Second plane</param>
      <returns>The line of intersection, represented as a ray, or <c>Nothing</c> if not found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.Geom.Surface.Plane,Snap.Geom.Surface.Plane,Snap.Geom.Surface.Plane)">
      <summary>Computes the point of intersection of three planes</summary>
      <param name="p1">First plane</param>
      <param name="p2">Second plane</param>
      <param name="p3">Third plane</param>
      <returns>Location of the intersection point, or <c>Nothing</c> if not found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.NX.ICurve,Snap.Geom.Surface.Plane)">
      <summary>Computes all points of intersection of a curve (or edge) and a plane</summary>
      <param name="icurve">The curve or edge</param>
      <param name="plane">The plane</param>
      <returns>Locations of intersection points, or <c>Nothing</c> if no intersection was found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.NX.ICurve,Snap.Geom.Surface.Plane,Snap.Position)">
      <summary>Computes a single point of intersection of a curve (or edge) and a plane</summary>
      <param name="icurve">The curve or edge</param>
      <param name="plane">The plane</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>Location of intersection point, or <c>Nothing</c> if no intersection is found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.NX.ICurve,Snap.NX.Face)">
      <summary>Computes all points of intersection of a curve (or edge) and a face</summary>
      <param name="icurve">The curve or edge</param>
      <param name="face">The face</param>
      <returns>Locations of intersection points, or <c>Nothing</c> if no intersection was found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.NX.ICurve,Snap.NX.Face,Snap.Position)">
      <summary>Computes a single point of intersection of a curve (or edge) and a face</summary>
      <param name="icurve">The curve or edge</param>
      <param name="face">The face</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>Location of intersection point, or <c>Nothing</c> if no intersection is found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.NX.ICurve,Snap.NX.ICurve)">
      <summary>Computes all points of intersection of two curves or edges</summary>
      <param name="curve1">The first curve or edge</param>
      <param name="curve2">The second curve or edge</param>
      <returns>Locations of intersection points, or <c>Nothing</c> if no intersection was found</returns>
    </member>
    <member name="M:Snap.Compute.Intersect(Snap.NX.ICurve,Snap.NX.ICurve,Snap.Position)">
      <summary>Computes a single point of intersection of two curves or edges</summary>
      <param name="curve1">The first curve or edge</param>
      <param name="curve2">The second curve or edge</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>Location of intersection point, or <c>Nothing</c> if no intersection is found</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.Geom.Curve.Ray,Snap.Geom.Surface.Plane)">
      <summary>Computes a single point of intersection of a ray and a plane</summary>
      <param name="ray">The ray</param>
      <param name="plane">The plane</param>
      <returns>Location of the intersection point, or <c>Nothing</c> if no intersection exists</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.Geom.Curve.Ray,Snap.NX.Body,Snap.Position)">
      <summary>Computes a single point of intersection of a ray and a body</summary>
      <param name="ray">The ray</param>
      <param name="body">The body</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>The result of the intersection calculation</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.Geom.Curve.Ray,Snap.NX.Face)">
      <summary>Computes all points of intersection of a ray and a face</summary>
      <param name="ray">The ray</param>
      <param name="face">The face</param>
      <returns>The result of the intersection calculation (or <c>Nothing</c> if no intersections are found)</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.Geom.Curve.Ray,Snap.NX.Face,Snap.Position)">
      <summary>Computes a single point of intersection of a ray and a face</summary>
      <param name="ray">The ray</param>
      <param name="face">The face</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>The result of the intersection calculation (or <c>Nothing</c> if no intersection is found)</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.NX.ICurve,Snap.Geom.Surface.Plane)">
      <summary>Computes all points of intersection of a curve (or edge) and a plane</summary>
      <param name="icurve">The curve or edge</param>
      <param name="plane">The plane</param>
      <returns>The result of the intersection calculation (or <c>Nothing</c> if no intersections are found)</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.NX.ICurve,Snap.Geom.Surface.Plane,Snap.Position)">
      <summary>Computes a single point of intersection of a curve (or edge) and a plane</summary>
      <param name="icurve">The curve or edge</param>
      <param name="plane">The plane</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>The result of the intersection calculation (or <c>Nothing</c> if no intersection is found)</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.NX.ICurve,Snap.NX.Face)">
      <summary>Computes all points of intersection of a curve (or edge) and a face</summary>
      <param name="icurve">The curve or edge</param>
      <param name="face">The face</param>
      <returns>The result of the intersection calculation (or <c>Nothing</c> if no intersections are found)</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.NX.ICurve,Snap.NX.Face,Snap.Position)">
      <summary>Computes a single point of intersection of a curve (or edge) and a face</summary>
      <param name="icurve">The curve or edge</param>
      <param name="face">The face</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>The result of the intersection calculation (or <c>Nothing</c> if no intersection is found)</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.NX.ICurve,Snap.NX.ICurve)">
      <summary>Computes all points of intersection of two curves or edges</summary>
      <param name="icurve1">The first curve or edge</param>
      <param name="icurve2">The second curve or edge</param>
      <returns>The result of the intersection calculation (or <c>Nothing</c> if no intersections are found)</returns>
    </member>
    <member name="M:Snap.Compute.IntersectInfo(Snap.NX.ICurve,Snap.NX.ICurve,Snap.Position)">
      <summary>Computes a single point of intersection of two curves or edges</summary>
      <param name="icurve1">The first curve or edge</param>
      <param name="icurve2">The second curve or edge</param>
      <param name="nearPoint">A "help" point near the desired intersection</param>
      <returns>The result of the intersection calculation (or <c>Nothing</c> if no intersection is found)</returns>
    </member>
    <member name="M:Snap.Compute.Mass(Snap.NX.Body[])">
      <summary>Computes the total mass of a collection of bodies</summary>
      <param name="bodies">Array of bodies</param>
      <returns>The total mass of the given array of bodies</returns>
    </member>
    <member name="M:Snap.Compute.MassProperties(Snap.NX.Body[])">
      <summary>Calculates the mass properties of a given list of bodies</summary>
      <param name="bodies">Array of NX bodies</param>
      <returns>Mass property results</returns>
    </member>
    <member name="M:Snap.Compute.MinimumRadius(Snap.NX.Face)">
      <summary>Computes the minimum radius of curvature of a face</summary>
      <param name="face">An NX.Face object</param>
      <returns>An array of MinimumRadiusResult objects</returns>
    </member>
    <member name="M:Snap.Compute.MomentOfInertia(Snap.Position,Snap.Vector,Snap.NX.Body[])">
      <summary>Calculates the moment of inertia of a collection of bodies around a given axis</summary>
      <param name="axisPoint">A point on the axis line</param>
      <param name="axisVector">A vector along the axis line (length doesn't matter)</param>
      <param name="bodies">The collection of bodies</param>
      <returns>The moment of inertia around the given axis</returns>
    </member>
    <member name="M:Snap.Compute.Perimeter(Snap.NX.Face[])">
      <summary>Computes the total perimeter of a collection of faces</summary>
      <param name="faces">Array of faces</param>
      <returns>The total perimeter of the given faces</returns>
    </member>
    <member name="M:Snap.Compute.Volume(Snap.NX.Body[])">
      <summary>Computes the total volume of a collection of bodies</summary>
      <param name="bodies">Array of bodies</param>
      <returns>The total volume of the given array of bodies</returns>
    </member>
    <member name="T:Snap.Compute.DeviationResult">
      <summary>The result of computing the deviation between two objects</summary>
    </member>
    <member name="P:Snap.Compute.DeviationResult.AngleErrors">
      <summary>The angle errors at checking points</summary>
    </member>
    <member name="P:Snap.Compute.DeviationResult.AverageAngleError">
      <summary>The average angle error between the two objects</summary>
    </member>
    <member name="P:Snap.Compute.DeviationResult.AverageDistanceError">
      <summary>The average distance error between the two objects</summary>
    </member>
    <member name="P:Snap.Compute.DeviationResult.DistanceErrors">
      <summary>The distance errors at checking points</summary>
    </member>
    <member name="P:Snap.Compute.DeviationResult.MaximumAngleError">
      <summary>The maximum angle error between the two objects</summary>
    </member>
    <member name="P:Snap.Compute.DeviationResult.MaximumDistanceError">
      <summary>The maximum distance error between the two objects</summary>
    </member>
    <member name="T:Snap.Compute.DistanceResult">
      <summary>The result of computing the distance between two objects</summary>
    </member>
    <member name="P:Snap.Compute.DistanceResult.Distance">
      <summary>The minimum distance between the two objects</summary>
    </member>
    <member name="P:Snap.Compute.DistanceResult.Point1">
      <summary>The point on the first object at which the minimum distance is attained</summary>
    </member>
    <member name="P:Snap.Compute.DistanceResult.Point2">
      <summary>The point on the second object at which the minimum distance is attained</summary>
    </member>
    <member name="T:Snap.Compute.IntersectionResult">
      <summary>Represents the result of an intersection calculation</summary>
    </member>
    <member name="P:Snap.Compute.IntersectionResult.CurveParameter">
      <summary>
            The parameter value of the intersection point on the first object (which is either a curve or a ray)
            </summary>
    </member>
    <member name="P:Snap.Compute.IntersectionResult.ObjectParameters">
      <summary>
            The parameter value(s) of the intersection point on the second object 
            </summary>
    </member>
    <member name="P:Snap.Compute.IntersectionResult.Position">
      <summary>Location of the intersection point (or <c>Nothing</c> if no intersection was found)</summary>
    </member>
    <member name="T:Snap.Compute.MassPropertiesResult">
      <summary>Holds the results of a mass properties calculation for a collection of bodies</summary>
    </member>
    <member name="P:Snap.Compute.MassPropertiesResult.Area">
      <summary>The total surface area of the collection of bodies</summary>
    </member>
    <member name="P:Snap.Compute.MassPropertiesResult.Centroid">
      <summary>The centroid of the collection of bodies</summary>
    </member>
    <member name="P:Snap.Compute.MassPropertiesResult.Density">
      <summary>The density of the overall collection of bodies (total mass divided by total volume or area)</summary>
    </member>
    <member name="P:Snap.Compute.MassPropertiesResult.InertiaTensor">
      <summary>The inertia tensor at the centroid</summary>
    </member>
    <member name="P:Snap.Compute.MassPropertiesResult.Mass">
      <summary>The total mass of the collection of bodies</summary>
    </member>
    <member name="P:Snap.Compute.MassPropertiesResult.PrincipalAxes">
      <summary>The principal axes of the collection of bodies at the centroid, in same order as principal moments</summary>
    </member>
    <member name="P:Snap.Compute.MassPropertiesResult.PrincipalMoments">
      <summary>The principal moments of the collection of bodies at the centroid, in order, largest first</summary>
    </member>
    <member name="P:Snap.Compute.MassPropertiesResult.RadiusOfGyration">
      <summary>The radius of gyration of the collection of bodies</summary>
    </member>
    <member name="P:Snap.Compute.MassPropertiesResult.Volume">
      <summary>The total volume of the collection of bodies</summary>
    </member>
    <member name="T:Snap.Compute.MinimumRadiusResult">
      <summary>An object that contains the results of a minimum radius calculation</summary>
    </member>
    <member name="P:Snap.Compute.MinimumRadiusResult.Length">
      <summary>The value of the minimum radius of curvature</summary>
    </member>
    <member name="P:Snap.Compute.MinimumRadiusResult.Position">
      <summary>The location of the minimum radius</summary>
    </member>
    <member name="P:Snap.Compute.MinimumRadiusResult.U">
      <summary>The U parameter at the location of the minimum radius</summary>
    </member>
    <member name="P:Snap.Compute.MinimumRadiusResult.V">
      <summary>The V parameter at the location of the minimum radius</summary>
    </member>
    <member name="T:Snap.Create">
      <summary>Provides functions for creating NX objects in the Work Part</summary>
    </member>
    <member name="M:Snap.Create.Arc(Snap.Position,Snap.Orientation,System.Double,System.Double,System.Double)">
      <summary>Constructs a Snap.NX.Arc from center, rotation matrix, radius, angles</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="matrix">Orientation</param>
      <param name="radius">Radius</param>
      <param name="angle1">Start angle (in degrees)</param>
      <param name="angle2">End angle (in degrees)</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Arc(Snap.Position,Snap.Position,Snap.Position)">
      <summary>Creates an NX.Arc from three points</summary>
      <param name="startPoint">Start point</param>
      <param name="throughPoint">Point that the arc passes through</param>
      <param name="endPoint">End point</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Arc(Snap.Position,Snap.Vector,Snap.Vector,System.Double,System.Double,System.Double)">
      <summary>Constructs a Snap.NX.Arc from center, axes, radius, angles</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="axisX">Unit vector along X-axis (where angle = 0)</param>
      <param name="axisY">Unit vector along Y-axis (where angle = 90)</param>
      <param name="radius">Radius</param>
      <param name="angle1">Start angle (in degrees)</param>
      <param name="angle2">End angle (in degrees)</param>
      <returns> A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Arc(Snap.Position,System.Double,System.Double,System.Double)">
      <summary>Constructs a Snap.NX.Arc parallel to the XY-plane</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="radius">Radius</param>
      <param name="angle1">Start angle (in degrees)</param>
      <param name="angle2">End angle (in degrees)</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Arc(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Constructs a Snap.NX.Arc lying in the XY-plane</summary>
      <param name="cx">X-coordinate of center point (in absolute coordinates)</param>
      <param name="cy">Y-coordinate of center point (in absolute coordinates)</param>
      <param name="radius">Radius</param>
      <param name="angle1">Start angle (in degrees)</param>
      <param name="angle2">End angle (in degrees)</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.BezierCurve(Snap.NX.Point[])">
      <summary>Creates a Bezier curve using given points as poles</summary>
      <param name="poles">Array of m+1 poles (3D)</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object of degree m (order m+1)</returns>
    </member>
    <member name="M:Snap.Create.BezierCurve(Snap.Position,Snap.Vector,Snap.Position,Snap.Vector)">
      <summary>Creates a cubic Bezier curve from two points and two directions</summary>
      <param name="p0">Start point of curve</param>
      <param name="u0">Tangent direction at start point (unit vector)</param>
      <param name="p1">End point of curve</param>
      <param name="u1">Tangent direction at end point (unit vector)</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="M:Snap.Create.BezierCurve(Snap.Position[])">
      <summary>Creates a Bezier curve from given poles</summary>
      <param name="poles">Array of m+1 poles (3D)</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object of degree m (order m+1)</returns>
    </member>
    <member name="M:Snap.Create.BezierCurve(Snap.Position[],System.Double[])">
      <summary>Creates a rational Bezier curve from given poles and weights</summary>
      <param name="poles">Array of m+1 poles (3D)</param>
      <param name="weights">Array of m+1 weights</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object of degree m (order m+1)</returns>
    </member>
    <member name="M:Snap.Create.BezierCurveFit(Snap.Create.CurvePositionFunction,System.Object,System.Int32)">
      <summary>Bezier approximation of a curve given by a function</summary>
      <param name="f">Evaluator function that returns positions on curve</param>
      <param name="data">Data to be passed when calling evaluator function</param>
      <param name="m">Degree of desired curve</param>
      <returns>Degree m Bezier curve approximating the given function</returns>
    </member>
    <member name="M:Snap.Create.BezierCurveThroughPoints(Snap.Position[])">
      <summary>Creates a Bezier curve interpolating (passing through) a given sequence of points</summary>
      <param name="intPoints">The n points to be interpolated</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> of degree n - 1 object</returns>
    </member>
    <member name="M:Snap.Create.BezierCurveThroughPoints(Snap.Position[],System.Double[])">
      <summary>Creates a Bezier curve interpolating (passing through) a given sequence of points</summary>
      <param name="intPoints">The n points to be interpolated</param>
      <param name="nodes">The n parameter values (nodes) at which to interpolate</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="M:Snap.Create.BezierPatch(Snap.Position[0:,0:])">
      <summary>Creates a polynomial Bezier patch</summary>
      <param name="poles">A 2D array of (mu+1) x (mv+1) 3D positions representing poles</param>
      <returns>A polynomial Bezier patch of degree mu x mv</returns>
    </member>
    <member name="M:Snap.Create.BezierPatch(Snap.Position[0:,0:],System.Double[0:,0:])">
      <summary>Creates a rational Bezier patch</summary>
      <param name="poles">A 2D array of (mu+1) x (mv+1) 3D positions representing poles</param>
      <param name="weights">A 2D array of (mu+1) x (mv+1) values representing weights</param>
      <returns>A rational Bezier patch of degree mu x mv</returns>
    </member>
    <member name="M:Snap.Create.BezierPatchFit(Snap.Create.SurfacePositionFunction,System.Object,System.Int32,System.Int32)">
      <summary>Bezier patch approximation of a surface given by a function</summary>
      <param name="f">Evaluator function that returns positions on surface</param>
      <param name="data">Data to be passed when calling evaluator function</param>
      <param name="mu">Degree of desired surface in u-direction</param>
      <param name="mv">Degree of desired surface in v-direction</param>
      <returns>Bezier patch of degree mu x mv approximating the given function</returns>
    </member>
    <member name="M:Snap.Create.BezierPatchThroughPoints(Snap.Position[0:,0:])">
      <summary>Creates a Bezier patch interpolating (passing through) a given array of points</summary>
      <param name="intPoints">A 2D array of (mu+1) x (mv+1) 3D points to be interpolated</param>
      <returns>A Bezier patch interpolating the given points</returns>
    </member>
    <member name="M:Snap.Create.BezierPatchThroughPoints(Snap.Position[0:,0:],System.Double[],System.Double[])">
      <summary>Creates a Bezier patch interpolating (passing through) a given array of points</summary>
      <param name="intPoints">A 2D array of (mu+1) x (mv+1) 3D points to be interpolated</param>
      <param name="nodesU">The mu+1 u-values (nodes) at which to interpolate</param>
      <param name="nodesV">The mv+1 v-values (nodes) at which to interpolate</param>
      <returns>A Bezier patch interpolating the given points at the given (u,v) values</returns>
    </member>
    <member name="M:Snap.Create.BezierSpherePatch(Snap.Position,Snap.Orientation,System.Double)">
      <summary>
            Create a Bezier patch representing one sixth of a sphere
            </summary>
      <param name="center">The center of the sphere</param>
      <param name="matrix">An orientation matrix, explained below</param>
      <param name="radius">The radius of the spherical patch</param>
      <returns>A Bezier patch of degrees 4x4 representing one sixth of a sphere</returns>
    </member>
    <member name="M:Snap.Create.Block(Snap.Orientation,Snap.Position,Snap.Position)">
      <summary>Creates a Snap.NX.Block feature from two diagonal points</summary>
      <param name="matrix">Orientation (see remarks)</param>
      <param name="originPoint">The origin-point of the block (in absolute coordinates</param>
      <param name="cornerPoint">Corner point, diagonally opposite the origin point</param>
      <returns>A <see cref="T:Snap.NX.Block">Snap.NX.Block</see> object</returns>
    </member>
    <member name="M:Snap.Create.Block(Snap.Orientation,Snap.Position,Snap.Position,Snap.Number)">
      <summary>Creates a Snap.NX.Block feature from two points and height</summary>
      <param name="matrix">Orientation (see remarks)</param>
      <param name="originPoint">The origin-point of the block (in absolute coordinates</param>
      <param name="cornerPoint">The corner-point of the block (on the base of the block, opposite the origin point)</param>
      <param name="height">Length in z-direction</param>
      <returns>A <see cref="T:Snap.NX.Block">Snap.NX.Block</see> object</returns>
    </member>
    <member name="M:Snap.Create.Block(Snap.Position,Snap.Number,Snap.Number,Snap.Number)">
      <summary>Creates a Snap.NX.Block feature from origin, xLength, yLength, zLength</summary>
      <param name="origin">The corner-point of the block (in absolute coordinates</param>
      <param name="xLength">Length in x-direction</param>
      <param name="yLength">Length in y-direction</param>
      <param name="zLength">Length in z-direction</param>
      <returns>A <see cref="T:Snap.NX.Block">Snap.NX.Block</see> object</returns>
    </member>
    <member name="M:Snap.Create.Block(Snap.Position,Snap.Orientation,Snap.Number,Snap.Number,Snap.Number)">
      <summary>Creates a Snap.NX.Block feature from origin, orientation, xLength, yLength, zLength</summary>
      <param name="origin">The corner-point of the block (in absolute coordinates)</param>
      <param name="matrix">Orientation (see remarks)</param>
      <param name="xLength">Length in x-direction</param>
      <param name="yLength">Length in y-direction</param>
      <param name="zLength">Length in z-direction</param>
      <returns>A <see cref="T:Snap.NX.Block">Snap.NX.Block</see> object</returns>
    </member>
    <member name="M:Snap.Create.BoundedPlane(Snap.NX.Curve[])">
      <summary>Creates a BoundedPlane object</summary>
      <param name="boundingCurves">Array of curves forming the boundary</param>
      <returns> A <see cref="T:Snap.NX.BoundedPlane">Snap.NX.BoundedPlane</see> object</returns>
    </member>
    <member name="M:Snap.Create.Bsurface(Snap.Geom.Surface.Bsurface)">
      <summary>Constructs a Snap.NX.Bsurface from a Snap.Geom.Surface.Bsurface</summary>
      <param name="geom">A Snap.Geom.Surface.Bsurface</param>
      <returns>A <see cref="T:Snap.NX.Bsurface">NX.Bsurface</see> object, which is a body having a single face.</returns>
    </member>
    <member name="M:Snap.Create.Bsurface(Snap.Position[0:,0:],System.Double[0:,0:],System.Double[],System.Double[])">
      <summary>Constructs a rational b-surface from poles, weights, and knot sequences</summary>
      <param name="poles">A 2D array of nu x nv 3D poles</param>
      <param name="weights">A 2D array of nu x nv weights</param>
      <param name="knotsU">Knots for u-direction -- an array of nu+ku knot values : u[0], ... , u[nu+ku-1]</param>
      <param name="knotsV">Knots for v-direction -- an array of nv+kv knot values : v[0], ... , v[nv+kv-1]</param>
      <returns>A <see cref="T:Snap.NX.Bsurface">NX.Bsurface</see> object, which is a body having a single face.</returns>
    </member>
    <member name="M:Snap.Create.Bsurface(Snap.Position[0:,0:],System.Double[],System.Double[])">
      <summary>Constructs a polynomial b-surface from poles and knot sequences</summary>
      <param name="poles">A 2D array of nu x nv 3D poles</param>
      <param name="knotsU">Knots for u-direction -- an array of nu+ku knot values : u[0], ... , u[nu+ku-1]</param>
      <param name="knotsV">Knots for v-direction -- an array of nv+kv knot values : v[0], ... , v[nv+kv-1]</param>
      <returns>A <see cref="T:Snap.NX.Bsurface">NX.Bsurface</see> object, which is a body having a single face.</returns>
    </member>
    <member name="M:Snap.Create.BsurfaceThroughPoints(Snap.Position[0:,0:],System.Double[],System.Double[],System.Double[],System.Double[])">
      <summary>Creates a Bsurface interpolating (passing through) a given array of points</summary>
      <param name="intPoints">An nu x nv array of points to be interpolated</param>
      <param name="nodesU">The nu parameter u-values (nodes) at which to interpolate</param>
      <param name="nodesV">The nv parameter v-values (nodes) at which to interpolate</param>
      <param name="knotsU">Knots for u-direction -- an array of nu+ku knot values : u[0], ... , u[nu+ku-1]</param>
      <param name="knotsV">Knots for v-direction -- an array of nv+kv knot values : v[0], ... , v[nv+kv-1]</param>
      <returns>A Bsurface interpolating the given points at the given (u,v) values</returns>
    </member>
    <member name="M:Snap.Create.BsurfaceThroughPoints(Snap.Position[0:,0:],System.Int32,System.Int32)">
      <summary>Creates a Bsurface interpolating (passing through) a given array of points</summary>
      <param name="intPoints">An nu x nv array of points to be interpolated</param>
      <param name="degreeU">The degree of the desired surface in the u-direction</param>
      <param name="degreeV">The degree of the desired surface in the v-direction</param>
      <returns>A <see cref="T:Snap.NX.Bsurface">Snap.NX.Bsurface</see> object passing through the given points</returns>
    </member>
    <member name="M:Snap.Create.Category(System.String,System.String,System.Int32[])">
      <summary>Creates a layer category</summary>
      <param name="name">Name to be assigned to the new category</param>
      <param name="description">Description of layer category</param>
      <param name="layers">Layers to be placed into the category</param>
      <returns>An NX.Category object </returns>
      <exception cref="T:System.ArgumentException">A category with the given name already exists.</exception>
    </member>
    <member name="M:Snap.Create.Chamfer(Snap.NX.Edge,Snap.Number,Snap.Number)">
      <summary>Creates a Snap.NX.Chamfer feature with a given offset distance and angle</summary>
      <param name="edge">The edge to be chamfered</param>
      <param name="distance">Offset distance</param>
      <param name="angle">Offset angle</param>
      <returns> A <see cref="T:Snap.NX.Chamfer">Snap.NX.Chamfer</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Chamfer(Snap.NX.Edge,Snap.Number,Snap.Number,System.Boolean)">
      <summary>Creates an asymmetric Snap.NX.Chamfer feature using two given offset distances</summary>
      <param name="edge">The edge to be chamfered</param>
      <param name="distance1">Offset distance1</param>
      <param name="distance2">Offset distance2</param>
      <param name="offsetFaces">The offsetting method used (see remarks below)</param>
      <returns> A <see cref="T:Snap.NX.Chamfer">Snap.NX.Chamfer</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Chamfer(Snap.NX.Edge,Snap.Number,System.Boolean)">
      <summary>Creates a symmetric Snap.NX.Chamfer feature with a given offset distance</summary>
      <param name="edge">The edge to be chamfered</param>
      <param name="distance">Offset distance</param>
      <param name="offsetFaces">The offsetting method used (see remarks below)</param>
      <returns> A <see cref="T:Snap.NX.Chamfer">Snap.NX.Chamfer</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Circle(Snap.Position,Snap.Orientation,System.Double)">
      <summary>Constructs a circle from center, rotation matrix, radius</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="matrix">Orientation matrix</param>
      <param name="radius">Radius</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Circle(Snap.Position,Snap.Position,Snap.Position)">
      <summary>Creates a circle through three points</summary>
      <param name="p1">First point</param>
      <param name="p2">Second point</param>
      <param name="p3">Third point</param>
      <returns>Circle (360 degrees) passing through the 3 points</returns>
    </member>
    <member name="M:Snap.Create.Circle(Snap.Position,Snap.Vector,Snap.Vector,System.Double)">
      <summary>Constructs circle from center, axes, radius</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="axisX">Unit vector along X-axis (where angle = 0)</param>
      <param name="axisY">Unit vector along Y-axis (where angle = 90)</param>
      <param name="radius">Radius</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Circle(Snap.Position,Snap.Vector,System.Double)">
      <summary>Constructs a circle from center, normal, radius</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="axisZ">Unit vector normal to plane of circle</param>
      <param name="radius">Radius</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Circle(Snap.Position,System.Double)">
      <summary>Constructs a circle parallel to the XY-plane</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="radius">Radius</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Circle(System.Double,System.Double,System.Double)">
      <summary>Constructs a circle lying in the XY-plane</summary>
      <param name="cx">X-coordinate of center point (in absolute coordinates)</param>
      <param name="cy">Y-coordinate of center point (in absolute coordinates)</param>
      <param name="radius">Radius</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Cone(Snap.NX.ICurve,Snap.NX.ICurve)">
      <summary>Creates a cone feature, given base arc and top arc</summary>
      <param name="baseArc">The base arc of the cone</param>
      <param name="topArc">The top arc of the cone</param>
      <returns>A <see cref="T:Snap.NX.Cone">Snap.NX.Cone</see> object</returns>
    </member>
    <member name="M:Snap.Create.Cone(Snap.Position,Snap.Vector,Snap.Number,Snap.Number,Snap.Number)">
      <summary>Creates a cone feature, given cone base position, axis vector, base diameter, height and half-angle</summary>
      <param name="axisPoint">The cone axis position (center of base arc)</param>
      <param name="axisVector">The cone axis vector</param>
      <param name="baseDiameter">The cone base diameter</param>
      <param name="height">The cone height</param>
      <param name="halfAngle">The cone half-angle, in degrees</param>
      <returns>A <see cref="T:Snap.NX.Cone">Snap.NX.Cone</see> object</returns>
    </member>
    <member name="M:Snap.Create.Cone(Snap.Position,Snap.Vector,Snap.Number,Snap.Number[])">
      <summary>Creates a cone feature, given cone base position, axis vector, base diameter, top diameter and half-angle</summary>
      <param name="axisPoint">The cone axis position (center of base arc)</param>
      <param name="axisVector">The cone axis vector</param>
      <param name="halfAngle">The cone half-angle, in degrees</param>
      <param name="diameters">A two dimension array. The first dimension is base diameter, and the second dimension is top diameter. </param>
      <returns>A <see cref="T:Snap.NX.Cone">Snap.NX.Cone</see> object</returns>
    </member>
    <member name="M:Snap.Create.Cone(Snap.Position,Snap.Vector,Snap.Number[],Snap.Number)">
      <summary>Creates a cone feature, given cone base position, axis vector, base diameter, top diameter and height</summary>
      <param name="axisPoint">The cone axis position (center of base arc)</param>
      <param name="axisVector">The cone axis vector</param>
      <param name="diameters">A two dimension array. The first dimension is base diameter, and the second dimension is top diameter. </param>
      <param name="height">The cone height</param>
      <returns>A <see cref="T:Snap.NX.Cone">Snap.NX.Cone</see> object</returns>
    </member>
    <member name="M:Snap.Create.ConeFromArcs(Snap.NX.ICurve,Snap.NX.ICurve)">
      <summary>Creates a cone feature, given base arc and top arc</summary>
      <param name="baseArc">The base arc of the cone</param>
      <param name="topArc">The top arc of the cone</param>
      <returns>A <see cref="T:Snap.NX.Cone">Snap.NX.Cone</see> object</returns>
    </member>
    <member name="M:Snap.Create.ConeFromDiameterHeightAngle(Snap.Position,Snap.Vector,Snap.Number,Snap.Number,Snap.Number)">
      <summary>Creates a cone feature, given cone base position, axis vector, base diameter, height and half-angle</summary>
      <param name="axisPoint">The cone axis position (center of base arc)</param>
      <param name="axisVector">The cone axis vector</param>
      <param name="baseDiameter">The cone base diameter</param>
      <param name="height">The cone height</param>
      <param name="halfAngle">The cone half-angle, in degrees</param>
      <returns>A <see cref="T:Snap.NX.Cone">Snap.NX.Cone</see> object</returns>
    </member>
    <member name="M:Snap.Create.ConeFromDiametersAngle(Snap.Position,Snap.Vector,Snap.Number,Snap.Number,Snap.Number)">
      <summary>Creates a cone feature, given cone base position, axis vector, base diameter, top diameter and half-angle</summary>
      <param name="axisPoint">The cone axis position (center of base arc)</param>
      <param name="axisVector">The cone axis vector</param>
      <param name="baseDiameter">The cone base diameter</param>
      <param name="topDiameter">The cone top diameter</param>
      <param name="halfAngle">The cone half-angle, in degrees</param>
      <returns>A <see cref="T:Snap.NX.Cone">Snap.NX.Cone</see> object</returns>
    </member>
    <member name="M:Snap.Create.ConeFromDiametersHeight(Snap.Position,Snap.Vector,Snap.Number,Snap.Number,Snap.Number)">
      <summary>Creates a cone feature, given cone base position, axis vector, base diameter, top diameter and height</summary>
      <param name="axisPoint">The cone axis position (center of base arc)</param>
      <param name="axisVector">The cone axis vector</param>
      <param name="baseDiameter">The cone base diameter</param>
      <param name="topDiameter">The cone top diameter</param>
      <param name="height">The cone height</param>
      <returns>A <see cref="T:Snap.NX.Cone">Snap.NX.Cone</see> object</returns>
    </member>
    <member name="M:Snap.Create.CoordinateSystem(Snap.Position,Snap.NX.Matrix)">
      <summary>Constructs a coordinate system from an origin and an NX.Matrix</summary>
      <param name="origin">Origin point</param>
      <param name="matrix">An NX.Matrix object</param>
      <returns>A <see cref="T:Snap.NX.CoordinateSystem">Snap.NX.CoordinateSystem</see> object</returns>
    </member>
    <member name="M:Snap.Create.CoordinateSystem(Snap.Position,Snap.Orientation)">
      <summary>Constructs a coordinate system from an origin and an orientation</summary>
      <param name="origin">Origin position</param>
      <param name="matrix">Orientation</param>
      <returns>A <see cref="T:Snap.NX.CoordinateSystem">Snap.NX.CoordinateSystem</see> object</returns>
    </member>
    <member name="M:Snap.Create.CoordinateSystem(Snap.Position,Snap.Vector,Snap.Vector,Snap.Vector)">
      <summary>Constructs a coordinate system from an origin and three axis vectors</summary>
      <param name="origin">Origin position</param>
      <param name="axisX">X axis</param>
      <param name="axisY">Y axis</param>
      <param name="axisZ">Z axis</param>
      <returns>A <see cref="T:Snap.NX.CoordinateSystem">Snap.NX.CoordinateSystem</see> object</returns>
    </member>
    <member name="M:Snap.Create.Cylinder(Snap.NX.ICurve,Snap.Number)">
      <summary>Creates a cylinder from base arc and height</summary>
      <param name="arc">Arc to be used as the base circle of cylinder</param>
      <param name="height">Height of cylinder</param>
      <returns>A <see cref="T:Snap.NX.Cylinder">Snap.NX.Cylinder</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Cylinder(Snap.Position,Snap.Position,Snap.Number)">
      <summary>Creates a cylinder from two points and a diameter</summary>
      <param name="basePoint">Position at center of base of cylinder</param>
      <param name="topPoint">Position at center of other end of cylinder</param>
      <param name="diameter">Diameter of cylinder</param>
      <returns>A <see cref="T:Snap.NX.Cylinder">Snap.NX.Cylinder</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Cylinder(Snap.Position,Snap.Vector,Snap.Number,Snap.Number)">
      <summary>Creates a cylinder feature, given base point, axis vector, height, and diameter</summary>
      <param name="axisPoint">The cylinder axis position (center of base arc)</param>
      <param name="axisVector">The cylinder axis vector (length doesn't matter)</param>
      <param name="height">Number object representing height of cylinder (must be positive)</param>
      <param name="diameter">Number object representing diameter of cylinder</param>
      <returns>A <see cref="T:Snap.NX.Cylinder">Snap.NX.Cylinder</see> feature</returns>
    </member>
    <member name="M:Snap.Create.DatumAxis(Snap.NX.ICurve,Snap.Number,Snap.NX.DatumAxis.CurveOrientations)">
      <summary>Creates a datum axis at a given arclength along a curve or an edge</summary>
      <param name="icurve">The curve or edge on which the datum axis will be created</param>
      <param name="arcLength">Percent arclength along the curve, in range 0 to 100</param>
      <param name="curveOrientation">The orientation option</param>
      <returns> A <see cref="T:Snap.NX.DatumAxis">Snap.NX.DatumAxis</see> object</returns>
    </member>
    <member name="M:Snap.Create.DatumAxis(Snap.Position,Snap.Position)">
      <summary>Creates a datum axis from two points</summary>
      <param name="startPoint">The start point of the datum axis</param>
      <param name="endPoint">The end point of the datum axis</param>
      <returns> A <see cref="T:Snap.NX.DatumAxis">Snap.NX.DatumAxis</see> object</returns>
    </member>
    <member name="M:Snap.Create.DatumAxis(Snap.Position,Snap.Vector)">
      <summary>Creates a datum axis with a given origin and direction</summary>
      <param name="origin">The origin of the datum axis</param>
      <param name="direction">The direction of the datum axis</param>
      <returns> A <see cref="T:Snap.NX.DatumAxis">Snap.NX.DatumAxis</see> object</returns>
    </member>
    <member name="M:Snap.Create.DatumCsys(Snap.Position,Snap.NX.Matrix)">
      <summary>Creates a Snap.NX.DatumCsys object from an NX.Matrix</summary>
      <param name="origin">The origin of the csys</param>
      <param name="matrix">The orientation of the csys</param>
      <returns>A <see cref="T:Snap.NX.DatumCsys">Snap.NX.DatumCsys</see> object</returns>
    </member>
    <member name="M:Snap.Create.DatumCsys(Snap.Position,Snap.Vector,Snap.Vector)">
      <summary>Creates a Snap.NX.DatumCsys object from three axis vectors</summary>
      <param name="origin">The origin of the csys</param>
      <param name="axisX">The axis in x direction</param>
      <param name="axisY">The axis in y direction</param>
      <returns>A <see cref="T:Snap.NX.DatumCsys">Snap.NX.DatumCsys</see> object</returns>
    </member>
    <member name="M:Snap.Create.DatumPlane(Snap.NX.ICurve,Snap.Number)">
      <summary>Creates a Snap.NX.DatumPlane feature normal to a curve or an edge at a given arclength</summary>
      <param name="curve">The curve or edge on which the datum plane will be created</param>
      <param name="arcLength">Percent arclength along the curve, in range 0 to 100</param>
      <returns> A <see cref="T:Snap.NX.DatumPlane">Snap.NX.DatumPlane</see> object</returns>
    </member>
    <member name="M:Snap.Create.DatumPlane(Snap.Position,Snap.Orientation)">
      <summary>Creates a Snap.NX.DatumPlane feature from a given position and orientation</summary>
      <param name="origin">Origin of the datum plane</param>
      <param name="orientation">Orientation of the datum plane</param>
      <returns> A <see cref="T:Snap.NX.DatumPlane">Snap.NX.DatumPlane</see> object</returns>
    </member>
    <member name="M:Snap.Create.DatumPlane(Snap.Position,Snap.Vector)">
      <summary>Creates a Snap.NX.DatumPlane feature from a given position and normal vector</summary>
      <param name="origin">Position of the datum plane origin</param>
      <param name="normal">Normal direction of the datum plane</param>
      <returns> A <see cref="T:Snap.NX.DatumPlane">Snap.NX.DatumPlane</see> object</returns>
    </member>
    <member name="M:Snap.Create.EdgeBlend(Snap.Number,Snap.NX.Edge[])">
      <summary>Creates an edge blend</summary>
      <param name="radius">Radius of the blend</param>
      <param name="edges">Array of edges to be blended</param>
      <returns> A <see cref="T:Snap.NX.EdgeBlend">Snap.NX.EdgeBlend</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Ellipse(Snap.Position,Snap.Orientation,System.Double,System.Double,System.Double,System.Double)">
      <summary>Constructs an ellipse from center, rotation matrix, radius, angles</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="matrix">Orientation</param>
      <param name="majorRadius">Major radius</param>
      <param name="minorRadius">Minor radius</param>
      <param name="startAngle">Start angle (in degrees)</param>
      <param name="endAngle">End angle (in degrees)</param>
      <returns>A <see cref="T:Snap.NX.Ellipse">Snap.NX.Ellipse</see> object</returns>
    </member>
    <member name="M:Snap.Create.Ellipse(Snap.Position,Snap.Vector,Snap.Vector,System.Double,System.Double,System.Double,System.Double)">
      <summary>Constructs an ellipse from center, axes, radius, angles</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="axisX">Unit vector along X-axis (where angle = 0)</param>
      <param name="axisY">Unit vector along Y-axis (where angle = 90)</param>
      <param name="majorRadius">Major radius</param>
      <param name="minorRadius">Minor radius</param>
      <param name="startAngle">Start angle (in degrees)</param>
      <param name="endAngle">End angle (in degrees)</param>
      <returns>A <see cref="T:Snap.NX.Ellipse">NX.Ellipse</see> object</returns>
    </member>
    <member name="M:Snap.Create.Ellipse(Snap.Position,System.Double,System.Double,System.Double)">
      <summary>Constructs a complete (360 degrees) NX.Ellipse parallel to the XY-plane</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="majorRadius">Major radius</param>
      <param name="minorRadius">Minor radius</param>
      <param name="rotation">Rotation angle in the XY-plane (in degrees)</param>
      <returns>A <see cref="T:Snap.NX.Ellipse">Snap.NX.Ellipse</see> object</returns>
    </member>
    <member name="M:Snap.Create.Ellipse(Snap.Position,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Constructs an NX.Ellipse parallel to the XY-plane</summary>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="rotation">Rotation angle in the XY-plane (in degrees)</param>
      <param name="majorRadius">Major radius</param>
      <param name="minorRadius">Minor radius</param>
      <param name="startAngle">Start angle (in degrees)</param>
      <param name="endAngle">End angle (in degrees)</param>
      <returns>A <see cref="T:Snap.NX.Ellipse">Snap.NX.Ellipse</see> object</returns>
    </member>
    <member name="M:Snap.Create.Expression(System.String,Snap.NX.Point)">
      <summary>Creates a point expression object</summary>
      <param name="name">The name of the expression</param>
      <param name="value">The point value of the expression</param>
      <returns>A <see cref="T:Snap.NX.ExpressionPoint">Snap.NX.ExpressionPoint</see> object</returns>
    </member>
    <member name="M:Snap.Create.Expression(System.String,Snap.Position)">
      <summary>Creates a point expression object</summary>
      <param name="name">The name of the expression</param>
      <param name="value">The point value of the expression</param>
      <returns>A <see cref="T:Snap.NX.ExpressionPoint">Snap.NX.ExpressionPoint</see> object</returns>
    </member>
    <member name="M:Snap.Create.Expression(System.String,Snap.Vector)">
      <summary>Creates a vector expression object</summary>
      <param name="name">The name of the expression</param>
      <param name="value">The vector value of the expression</param>
      <returns>A <see cref="T:Snap.NX.ExpressionVector">Snap.NX.ExpressionVector</see> object</returns>
    </member>
    <member name="M:Snap.Create.Expression(System.String,System.Boolean)">
      <summary>Creates a boolean expression object</summary>
      <param name="name">The name of the expression</param>
      <param name="value">The boolean value of the expression</param>
      <returns>A <see cref="T:Snap.NX.ExpressionBoolean">Snap.NX.ExpressionBoolean</see> object</returns>
    </member>
    <member name="M:Snap.Create.Expression(System.String,System.Double)">
      <summary>Creates a constant number expression object</summary>
      <param name="name">The name of the expression</param>
      <param name="value">The number value of the expression</param>
      <returns>A <see cref="T:Snap.NX.ExpressionNumber">Snap.NX.ExpressionNumber</see> object</returns>
    </member>
    <member name="M:Snap.Create.Expression(System.String,System.Int32)">
      <summary>Creates an integer expression object</summary>
      <param name="name">The name of the expression</param>
      <param name="value">The integer value of the expression</param>
      <returns>A <see cref="T:Snap.NX.ExpressionInteger">Snap.NX.ExpressionInteger</see> object</returns>
    </member>
    <member name="M:Snap.Create.Expression(System.String,System.String)">
      <summary>Creates a string expression object</summary>
      <param name="name">The name of the expression</param>
      <param name="value">The string value of the expression</param>
      <returns>A <see cref="T:Snap.NX.ExpressionString">Snap.NX.ExpressionString</see> object</returns>
    </member>
    <member name="M:Snap.Create.ExpressionNumber(System.String,Snap.Number,Snap.NX.Unit)">
      <summary>Creates a number expression object</summary>
      <param name="name">The name of the expression</param>
      <param name="rightHandSide">The right-hand side of the expression</param>
      <param name="unit">The units of the expression</param>
      <returns>A <see cref="T:Snap.NX.ExpressionNumber">Snap.NX.ExpressionNumber</see> object</returns>
    </member>
    <member name="M:Snap.Create.ExpressionNumber(System.String,System.String)">
      <summary>Creates a number expression object</summary>
      <param name="name">The name of the expression</param>
      <param name="rightHandSide">The right-hand side of the expression</param>
      <returns>A <see cref="T:Snap.NX.ExpressionNumber">Snap.NX.ExpressionNumber</see> object</returns>
    </member>
    <member name="M:Snap.Create.ExtractCurve(Snap.NX.Edge[])">
      <summary>Creates curves that replicate given edges</summary>
      <param name="edges">Edge array</param>
      <returns> An array of <see cref="T:Snap.NX.Curve">Snap.NX.Curve</see> objects</returns>
    </member>
    <member name="M:Snap.Create.ExtractFace(Snap.NX.Face[])">
      <summary>Creates a Snap.NX.ExtractFace feature</summary>
      <param name="faces">The array of faces that will be extracted</param>
      <returns> A <see cref="T:Snap.NX.ExtractFace">Snap.NX.ExtractFace</see> object</returns>
    </member>
    <member name="M:Snap.Create.Extrude(Snap.NX.ICurve[],Snap.Vector,Snap.Number,Snap.Number)">
      <summary>Creates a Snap.NX.Extrude feature using an extrusion length</summary>
      <param name="curves">The curves (or edges) to be extruded</param>
      <param name="axis">Extrusion direction (vector magnitude not significant)</param>
      <param name="length">Length of the extrusion (measured from input curves)</param>
      <param name="draftAngle">Draft angle, in degrees. Optional. Default = <c>Nothing</c>, which gives a value of zero. </param>
      <returns> A <see cref="T:Snap.NX.Extrude">Snap.NX.Extrude</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Extrude(Snap.NX.ICurve[],Snap.Vector,Snap.Number[],Snap.Number)">
      <summary>Creates a Snap.NX.Extrude feature using extrusion extents</summary>
      <param name="curves">The curves (or edges) to be extruded</param>
      <param name="axis">Extrusion direction (vector magnitude not significant)</param>
      <param name="distances">Extents of the extrusion (measured from input curves)</param>
      <param name="draftAngle">Draft angle, in degrees. Optional. Default = <c>Nothing</c>, which gives a value of zero. </param>
      <returns> A <see cref="T:Snap.NX.Extrude">Snap.NX.Extrude</see> feature</returns>
    </member>
    <member name="M:Snap.Create.ExtrudeSheet(Snap.NX.ICurve[],Snap.Vector,Snap.Number,Snap.Number)">
      <summary>Creates a sheet body type of Snap.NX.Extrude feature using an extrusion length</summary>
      <param name="curves">The curves (or edges) to be extruded</param>
      <param name="axis">Extrusion direction (vector magnitude not significant)</param>
      <param name="length">Length of the extrusion (measured from input curves)</param>
      <param name="draftAngle">Draft angle, in degrees. Optional. Default = <c>Nothing</c>, which gives a value of zero. </param>
      <returns> A <see cref="T:Snap.NX.Extrude">Snap.NX.Extrude</see> feature</returns>
    </member>
    <member name="M:Snap.Create.ExtrudeSheet(Snap.NX.ICurve[],Snap.Vector,Snap.Number[],Snap.Number)">
      <summary>Creates a sheet body type of Snap.NX.Extrude feature using extrusion extents</summary>
      <param name="curves">The curves (or edges) to be extruded</param>
      <param name="axis">Extrusion direction (vector magnitude not significant)</param>
      <param name="distances">Extents of the extrusion (measured from input curves)</param>
      <param name="draftAngle">Draft angle, in degrees. Optional. Default = <c>Nothing</c>, which gives a value of zero. </param>
      <returns> A <see cref="T:Snap.NX.Extrude">Snap.NX.Extrude</see> feature</returns>
    </member>
    <member name="M:Snap.Create.ExtrudeShell(Snap.NX.ICurve[],Snap.Vector,Snap.Number[],Snap.Number[],Snap.Number)">
      <summary>Creates a thin-walled shell type of Snap.NX.Extrude feature</summary>
      <param name="curves">The curves (or edges) to be extruded</param>
      <param name="axis">Extrusion direction (vector magnitude not significant)</param>
      <param name="distances">Extents of the extrusion (measured from input curves)</param>
      <param name="offsets">Offset distances controlling the wall thickness of the shell</param>
      <param name="draftAngle">Draft angle, in degrees. Optional. Default = <c>Nothing</c>, which gives a value of zero. </param>
      <returns> A <see cref="T:Snap.NX.Extrude">Snap.NX.Extrude</see> feature</returns>
    </member>
    <member name="M:Snap.Create.FaceBlend(Snap.NX.Face,Snap.NX.Face,Snap.Number)">
      <summary>Creates a Snap.NX.FaceBlend feature</summary>
      <param name="face1">Face one</param>
      <param name="face2">Face two</param>
      <param name="radius">Radius of the blend</param>
      <returns> A <see cref="T:Snap.NX.FaceBlend">Snap.NX.FaceBlend</see> object</returns>
    </member>
    <member name="M:Snap.Create.Fillet(Snap.NX.Curve,Snap.NX.Curve,System.Double,Snap.Position,System.Boolean)">
      <summary>Creates a fillets between two given curves</summary>
      <param name="curve1">First curve for the fillet</param>
      <param name="curve2">Second curve for the fillet</param>
      <param name="radius">Radius of the fillet</param>
      <param name="center">Approximate fillet center</param>
      <param name="doTrim">Indicates whether the input curves should get trimmed by the fillet. Optional. Default = True</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Fillet(Snap.Position,Snap.Position,Snap.Position,System.Double)">
      <summary>Constructs a fillet arc from three points</summary>
      <param name="p0">First point</param>
      <param name="pa">Apex point</param>
      <param name="p1">Last point</param>
      <param name="radius">Radius</param>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="M:Snap.Create.Intersect(Snap.NX.Body,Snap.NX.Body[])">
      <summary>Intersects an array of tool bodies with a target body</summary>
      <param name="targetBody">Target body</param>
      <param name="toolBodies">Array of tool bodies</param>
      <returns>
        <see cref="T:Snap.NX.Boolean">Snap.NX.Boolean</see> feature formed by intersecting tools with target</returns>
    </member>
    <member name="M:Snap.Create.Isocline(Snap.NX.Face,Snap.Vector,System.Double)">
      <summary>Creates isocline curves on a given face</summary>
      <param name="face">Face used to get isocline curves</param>
      <param name="direction">Reference direction</param>
      <param name="draftAngle">The draft angle defining the isocline curves (in degrees)</param>
      <returns>An array of <see cref="T:Snap.NX.Curve">Snap.NX.Curve</see> objects</returns>
    </member>
    <member name="M:Snap.Create.IsoparametricCurve(Snap.NX.Face,Snap.Create.DirectionUV,System.Double,System.Double)">
      <summary>Creates isoparametric curves in U or V direction on a given face</summary>
      <param name="face">The face used to create isoparametric curves</param>
      <param name="UV">The direction of the curves, u = constant or v = constant</param>
      <param name="value">The constant parameter value at which to create the iso-curves</param>
      <param name="tolerance">Tolerance value, explained below. Optional. Default = 0.0254</param>
      <returns> An array of <see cref="T:Snap.NX.Curve">Snap.NX.Curve</see> objects</returns>
      <exception cref="T:System.InvalidOperationException">Iso-curve of form v=constant requested on a blend face, which is not supported.</exception>
    </member>
    <member name="M:Snap.Create.JoinCurves(Snap.NX.ICurve[])">
      <summary>Creates a spline curve by joining together a string of given curves</summary>
      <param name="icurves">The curves to be joined (NX.Curve or NX.Edge objects)</param>
      <returns>An <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="M:Snap.Create.Line(Snap.NX.Point,Snap.NX.Point)">
      <summary>Creates a line between two points (NX.Point objects)</summary>
      <param name="pt0">Point at start of line</param>
      <param name="pt1">Point at end of line</param>
      <returns>A <see cref="T:Snap.NX.Line">Snap.NX.Line</see> object</returns>
    </member>
    <member name="M:Snap.Create.Line(Snap.Position,Snap.Position)">
      <summary>Creates a line between two positions</summary>
      <param name="p0">Position for start of line</param>
      <param name="p1">Position for end of line</param>
      <returns>A <see cref="T:Snap.NX.Line">Snap.NX.Line</see> object</returns>
    </member>
    <member name="M:Snap.Create.Line(System.Double,System.Double,System.Double,System.Double)">
      <summary>Construct a line, given x,y coordinates of its end-points (z assumed zero)</summary>
      <param name="x0">X-coordinate of start point</param>
      <param name="y0">Y-coordinate of start point</param>
      <param name="x1">X-coordinate of end   point</param>
      <param name="y1">Y-coordinate of end   point</param>
      <returns>A <see cref="T:Snap.NX.Line">Snap.NX.Line</see> object</returns>
    </member>
    <member name="M:Snap.Create.Line(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Construct a line, given x,y,z coordinates of its end-points</summary>
      <param name="x0">X-coordinate of start point</param>
      <param name="y0">Y-coordinate of start point</param>
      <param name="z0">Z-coordinate of start point</param>
      <param name="x1">X-coordinate of end   point</param>
      <param name="y1">Y-coordinate of end   point</param>
      <param name="z1">Z-coordinate of end   point</param>
      <returns>A <see cref="T:Snap.NX.Line">Snap.NX.Line</see> object</returns>
    </member>
    <member name="M:Snap.Create.LineTangent(Snap.NX.ICurve,Snap.Position,Snap.NX.ICurve,Snap.Position)">
      <summary>Creates a line tangent to two curves</summary>
      <param name="icurve1">The first curve or edge</param>
      <param name="helpPoint1">A point near the desired tangency point on the first curve</param>
      <param name="icurve2">The second curve or edge</param>
      <param name="helpPoint2">A point near the desired tangency point on the second curve</param>
      <returns>A <see cref="T:Snap.NX.Line">Snap.NX.Line</see> object</returns>
    </member>
    <member name="M:Snap.Create.LineTangent(Snap.NX.ICurve,System.Double,Snap.Position)">
      <summary>Creates a line at a given angle, tangent to a given curve</summary>
      <param name="icurve">A curve or edge lying in a plane parallel to the XY-plane</param>
      <param name="angle">An angle measured relative to the X-axis</param>
      <param name="helpPoint">A point near the desired tangency point</param>
      <returns>A <see cref="T:Snap.NX.Line">Snap.NX.Line</see> object</returns>
      <exception cref="T:System.ArgumentException">The input curve is a line, is non-planar, or does not lie in a plane parallel to the XY-plane</exception>
    </member>
    <member name="M:Snap.Create.LineTangent(Snap.Position,Snap.NX.ICurve,Snap.Position)">
      <summary>Creates a line through a given point, tangent to a curve</summary>
      <param name="basePoint">Point through which the line passes</param>
      <param name="icurve">A curve or edge</param>
      <param name="helpPoint">A point near the desired tangency point</param>
      <returns>A <see cref="T:Snap.NX.Line">Snap.NX.Line</see> object</returns>
    </member>
    <member name="M:Snap.Create.Matrix(Snap.Orientation)">
      <summary>Creates a matrix from an orientation</summary>
      <param name="rotation">The orientation (rotation)</param>
      <returns>A <see cref="T:Snap.NX.Matrix">Snap.NX.Matrix</see> object</returns>
    </member>
    <member name="M:Snap.Create.Matrix(Snap.Vector,Snap.Vector,Snap.Vector)">
      <summary>Creates a matrix using three vectors</summary>
      <param name="axisX">X-axis vector</param>
      <param name="axisY">Y-axis vector</param>
      <param name="axisZ">Z-axis vector</param>
      <returns>A <see cref="T:Snap.NX.Matrix">Snap.NX.Matrix</see> object</returns>
    </member>
    <member name="M:Snap.Create.Note(Snap.Position,Snap.NX.TextStyle,System.String[])">
      <summary>Creates a note, given text, origin, and style</summary>
      <param name="text">The lines of text (one line per array element)</param>
      <param name="origin">Origin (in absolute coordinates)</param>
      <param name="textStyle">A <see cref="T:Snap.NX.TextStyle">Snap.NX.Note.TextStyle</see> object describing formatting, or <c>Nothing</c></param>
      <returns>A <see cref="T:Snap.NX.Note">Snap.NX.Note</see> object</returns>
    </member>
    <member name="M:Snap.Create.Note(Snap.Position,Snap.Orientation,Snap.NX.TextStyle,System.String[])">
      <summary>Creates a note, given text, origin, orientation, and style</summary>
      <param name="text">The lines of text (one line per array element)</param>
      <param name="origin">Origin (in absolute coordinates)</param>
      <param name="matrix">The orientation of the note</param>
      <param name="textStyle">A <see cref="T:Snap.NX.TextStyle">Snap.NX.Note.TextStyle</see> object describing formatting, or <c>Nothing</c></param>
      <returns>A <see cref="T:Snap.NX.Note">Snap.NX.Note</see> object</returns>
    </member>
    <member name="M:Snap.Create.OffsetCurve(Snap.Number,Snap.Number,Snap.Position,Snap.Vector,Snap.NX.ICurve[])">
      <summary>Creates an offset curve feature from given curves, direction, distance</summary>
      <param name="curves">Array of curves to be offset</param>
      <param name="height">Draft height</param>
      <param name="angle">Draft angle</param>
      <param name="helpPoint">A help point on the first curve</param>
      <param name="helpVector">The offset direction (roughly) at the help point</param>
      <returns>A <see cref="T:Snap.NX.OffsetCurve">Snap.NX.OffsetCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.OffsetCurve(Snap.Number,Snap.Number,System.Boolean,Snap.NX.ICurve[])">
      <summary>Creates a Snap.NX.OffsetCurve feature with a given draft height and angle</summary>
      <param name="height">Draft height</param>
      <param name="angle">Draft angle</param>
      <param name="reverse">If true, reverse direction of offset. The default direction is close to the normal of the array of curves.</param>
      <param name="curves">Array of curves to be offset</param>
      <returns>A <see cref="T:Snap.NX.OffsetCurve">Snap.NX.OffsetCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.OffsetCurve(Snap.Number,Snap.Position,Snap.Vector,Snap.NX.ICurve[])">
      <summary>Creates an offset curve feature from given curves, direction, distance</summary>
      <param name="curves">Array of base curves to be offset</param>
      <param name="distance">Offset distance</param>
      <param name="helpPoint">A help point on the first curve</param>
      <param name="helpVector">The offset direction (roughly) at the help point</param>
      <returns>A <see cref="T:Snap.NX.OffsetCurve">Snap.NX.OffsetCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.OffsetCurve(Snap.Number,System.Boolean,Snap.NX.ICurve[])">
      <summary>Creates a Snap.NX.OffsetCurve feature with a given offset distance</summary>
      <param name="distance">Offset distance</param>
      <param name="reverse">If true, reverse the direction of offset. The default direction is the normal of the array of curves.</param>
      <param name="curves">Array of curves or edges to be offset</param>
      <returns>A <see cref="T:Snap.NX.OffsetCurve">Snap.NX.OffsetCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.OffsetFace(Snap.Number,System.Boolean,Snap.NX.Face[])">
      <summary>Creates a Snap.NX.OffsetFace feature</summary>
      <param name="faces">Offset faces</param>
      <param name="distance">Offset distance</param>
      <param name="reverse">If true, reverses the direction of offsetting</param>
      <returns> A <see cref="T:Snap.NX.OffsetFace">Snap.NX.OffsetFace</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Part(System.String,Snap.NX.Part.Templates,Snap.NX.Part.Units)">
      <summary>Creates a new part</summary>
      <param name="pathName">The full path of the new part</param>
      <param name="templateType">The type of template to be used</param>
      <param name="unitType">The type of the unit</param>
      <returns>A <see cref="T:Snap.NX.Part">Snap.NX.Part</see> object</returns>
    </member>
    <member name="M:Snap.Create.Point(Snap.Position)">
      <summary>Creates a point from a position</summary>
      <param name="p">Position</param>
      <returns>A <see cref="T:Snap.NX.Point">Snap.NX.Point</see> object</returns>
    </member>
    <member name="M:Snap.Create.Point(System.Double,System.Double)">
      <summary>Creates a point from xy-coordinates (assumes z=0)</summary>
      <param name="x">x-coordinate</param>
      <param name="y">y-coordinate</param>
      <returns>A <see cref="T:Snap.NX.Point">Snap.NX.Point</see> object</returns>
    </member>
    <member name="M:Snap.Create.Point(System.Double,System.Double,System.Double)">
      <summary>Creates a point from x, y, z coordinates</summary>
      <param name="x">x-coordinate</param>
      <param name="y">y-coordinate</param>
      <param name="z">z-coordinate</param>
      <returns>A <see cref="T:Snap.NX.Point">Snap.NX.Point</see> object</returns>
    </member>
    <member name="M:Snap.Create.Point(System.Double[])">
      <summary>Creates a point from an array of 3 coordinates</summary>
      <param name="coords">Array of doubles</param>
      <returns>A <see cref="T:Snap.NX.Point">Snap.NX.Point</see> object</returns>
    </member>
    <member name="M:Snap.Create.Polygon(Snap.Position[])">
      <summary>Creates a polygon (an array of lines forming a closed figure)</summary>
      <param name="points">Array of positions forming the vertices of the polygon</param>
      <returns>Array of lines forming the sides of the polygon</returns>
    </member>
    <member name="M:Snap.Create.PolyLine(Snap.Position[])">
      <summary>Creates a polyline (an array of lines connecting given positions)</summary>
      <param name="points">Array of positions forming the vertices of the polyline</param>
      <returns>Array of lines forming the segments of the polyline</returns>
    </member>
    <member name="M:Snap.Create.ProjectCurve(Snap.Geom.Surface.Plane,Snap.NX.Curve[])">
      <summary>Creates a Snap.NX.ProjectCurve feature by projecting curves onto a plane</summary>
      <param name="curves">Array of curves to be projected</param>
      <param name="geomPlane">The Geom.Plane to project onto</param>
      <returns>A <see cref="T:Snap.NX.ProjectCurve">Snap.NX.ProjectCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.ProjectCurve(Snap.Geom.Surface.Plane,Snap.NX.Curve[],Snap.NX.Point[])">
      <summary>Creates a Snap.NX.ProjectCurve feature by projecting onto a plane</summary>
      <param name="curves">Array of curves to be projected</param>
      <param name="points">Array of points to be projected</param>
      <param name="geomPlane">The Geom.Plane to project onto</param>
      <returns>A <see cref="T:Snap.NX.ProjectCurve">Snap.NX.ProjectCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.ProjectCurve(Snap.Geom.Surface.Plane,Snap.NX.Point[])">
      <summary>Creates a Snap.NX.ProjectCurve feature by projecting points onto a plane</summary>
      <param name="points">Array of points to be projected</param>
      <param name="geomPlane">The Geom.Plane to project onto</param>
      <returns>A <see cref="T:Snap.NX.ProjectCurve">Snap.NX.ProjectCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.ProjectCurve(Snap.NX.Curve[],Snap.NX.Point[],Snap.NX.Face)">
      <summary>Creates a Snap.NX.ProjectCurve feature by projecting onto a face</summary>
      <param name="curves">Array of curves to be projected</param>
      <param name="points">Array of points to be projected</param>
      <param name="face">The face to project onto</param>
      <returns>A <see cref="T:Snap.NX.ProjectCurve">Snap.NX.ProjectCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.ProjectCurve(Snap.NX.DatumPlane,Snap.NX.Curve[])">
      <summary>Creates a Snap.NX.ProjectCurve feature by projecting curves onto a datum plane</summary>
      <param name="curves">Array of curves to be projected</param>
      <param name="datumPlane">The datum plane to project onto</param>
      <returns>A <see cref="T:Snap.NX.ProjectCurve">Snap.NX.ProjectCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.ProjectCurve(Snap.NX.DatumPlane,Snap.NX.Curve[],Snap.NX.Point[])">
      <summary>Creates a Snap.NX.ProjectCurve feature by projecting onto a datum plane</summary>
      <param name="curves">Array of curves to be projected</param>
      <param name="points">Array of points to be projected</param>
      <param name="datumPlane">The datum plane to project onto</param>
      <returns>A <see cref="T:Snap.NX.ProjectCurve">Snap.NX.ProjectCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.ProjectCurve(Snap.NX.DatumPlane,Snap.NX.Point[])">
      <summary>Creates a Snap.NX.ProjectCurve feature by projecting points onto a datum plane</summary>
      <param name="points">Array of points to be projected</param>
      <param name="datumPlane">The datum plane to project onto</param>
      <returns>A <see cref="T:Snap.NX.ProjectCurve">Snap.NX.ProjectCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.ProjectCurve(Snap.NX.Face,Snap.NX.Curve[])">
      <summary>Creates a Snap.NX.ProjectCurve feature by projecting curves onto a face</summary>
      <param name="curves">Array of curves to be projected</param>
      <param name="face">The face to project onto</param>
      <returns>A <see cref="T:Snap.NX.ProjectCurve">Snap.NX.ProjectCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.ProjectCurve(Snap.NX.Face,Snap.NX.Point[])">
      <summary>Creates a Snap.NX.ProjectCurve feature by projecting onto a face</summary>
      <param name="points">Array of points to be projected</param>
      <param name="face">The face to project onto</param>
      <returns>A <see cref="T:Snap.NX.ProjectCurve">Snap.NX.ProjectCurve</see> object</returns>
    </member>
    <member name="M:Snap.Create.Rectangle(Snap.Position,Snap.Position)">
      <summary>Creates a rectangle from two diagonal points</summary>
      <param name="bottomLeft">The point at the (xmin, ymin) corner</param>
      <param name="topRight">The point at the (xmax, ymax) corner</param>
      <returns>Array of four lines</returns>
    </member>
    <member name="M:Snap.Create.Rectangle(Snap.Position,System.Double,System.Double)">
      <summary>Creates a rectangle (an array of four lines) from given center and side lengths</summary>
      <param name="center">Center location</param>
      <param name="width">Width in the x-direction</param>
      <param name="height">Height in the y-direction</param>
      <returns>Array of four lines</returns>
    </member>
    <member name="M:Snap.Create.Revolve(Snap.NX.ICurve[],Snap.Position,Snap.Vector)">
      <summary>Creates a complete (360 degrees) Snap.NX.Revolve feature</summary>
      <param name="curves">The curves (or edges) to be revolved</param>
      <param name="axisPoint">Point on the axis of revolution</param>
      <param name="axisVector">Vector along the axis of revolution (magnitude doesn't matter)</param>
      <returns> A <see cref="T:Snap.NX.Revolve">Snap.NX.Revolve</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Revolve(Snap.NX.ICurve[],Snap.Position,Snap.Vector,Snap.Number[])">
      <summary>Creates a Snap.NX.Revolve feature using angular extents</summary>
      <param name="curves">The curves (or edges) to be revolved</param>
      <param name="axisPoint">Point on the axis of revolution</param>
      <param name="axisVector">Vector along the axis of revolution (magnitude doesn't matter)</param>
      <param name="angles">Angular extents of the revolved shape, in degrees, measured from the input curves</param>
      <returns> A <see cref="T:Snap.NX.Revolve">Snap.NX.Revolve</see> feature</returns>
    </member>
    <member name="M:Snap.Create.RevolveSheet(Snap.NX.ICurve[],Snap.Position,Snap.Vector)">
      <summary>Creates a complete (360 degrees) sheet body type of Snap.NX.Revolve feature</summary>
      <param name="curves">The curves (or edges) to be revolved</param>
      <param name="axisPoint">Point on the axis of revolution</param>
      <param name="axisVector">Vector along the axis of revolution (magnitude doesn't matter)</param>
      <returns> A <see cref="T:Snap.NX.Revolve">Snap.NX.Revolve</see> feature</returns>
    </member>
    <member name="M:Snap.Create.RevolveSheet(Snap.NX.ICurve[],Snap.Position,Snap.Vector,Snap.Number[])">
      <summary>Creates a sheet body type of Snap.NX.Revolve feature using angular extents</summary>
      <param name="curves">The curves (or edges) to be revolved</param>
      <param name="axisPoint">Point on the axis of revolution</param>
      <param name="axisVector">Vector along the axis of revolution (magnitude doesn't matter)</param>
      <param name="angles">Angular extents of the revolved shape, in degrees, measured from the input curves</param>
      <returns> A <see cref="T:Snap.NX.Revolve">Snap.NX.Revolve</see> feature</returns>
    </member>
    <member name="M:Snap.Create.RevolveShell(Snap.NX.ICurve[],Snap.Position,Snap.Vector,Snap.Number[],Snap.Number[])">
      <summary>Creates a thin-walled shell type of Snap.NX.Revolve feature</summary>
      <param name="curves">The curves (or edges) to be revolved</param>
      <param name="axisPoint">Point on the axis of revolution</param>
      <param name="axisVector">Vector along the axis of revolution (magnitude doesn't matter)</param>
      <param name="angles">Angular extents of the revolved shape, in degrees, measured from the input curves</param>
      <param name="offsets">Offset distances controlling the wall thickness of the shell</param>
      <returns> A <see cref="T:Snap.NX.Revolve">Snap.NX.Revolve</see> feature</returns>
    </member>
    <member name="M:Snap.Create.Ruled(Snap.NX.Curve,Snap.NX.Curve)">
      <summary>Creates a ruled feature</summary>
      <param name="curve0">First curve (along u=0)</param>
      <param name="curve1">Second curve (along u=1)</param>
      <returns>The ruled feature (an NXOpen.Features.Ruled object)</returns>
    </member>
    <member name="M:Snap.Create.Sew(Snap.NX.Body,Snap.NX.Body[])">
      <summary>Creates a sew object</summary>
      <param name="targetBody">The target sheet body</param>
      <param name="toolBodies">The array of tool sheet bodies</param>
      <returns> A <see cref="T:Snap.NX.Sew">Snap.NX.Sew</see> object</returns>
    </member>
    <member name="M:Snap.Create.Silhouette(Snap.NX.Face,Snap.Vector)">
      <summary>Creates the silhouette curves of a given face</summary>
      <param name="face">Face used to get silhouette curves</param>
      <param name="direction">Viewing direction</param>
      <returns>An array of <see cref="T:Snap.NX.Curve">Snap.NX.Curve</see> objects</returns>
    </member>
    <member name="M:Snap.Create.Sphere(Snap.NX.Point,Snap.Number)">
      <summary>Creates a sphere feature, given center point and diameter</summary>
      <param name="center">Point at center</param>
      <param name="diameter">Diameter</param>
      <returns>A <see cref="T:Snap.NX.Sphere">Snap.NX.Sphere</see> object</returns>
    </member>
    <member name="M:Snap.Create.Sphere(Snap.Position,Snap.Number)">
      <summary>Creates a sphere feature, given center position and diameter</summary>
      <param name="center">Position of center</param>
      <param name="diameter">Diameter</param>
      <returns>A <see cref="T:Snap.NX.Sphere">Snap.NX.Sphere</see> object</returns>
    </member>
    <member name="M:Snap.Create.Sphere(System.Double,System.Double,System.Double,Snap.Number)">
      <summary>Creates a sphere feature, given center coordinates and diameter</summary>
      <param name="x">x-coordinate of center</param>
      <param name="y">y-coordinate of center</param>
      <param name="z">z-coordinate of center</param>
      <param name="diameter">Diameter</param>
      <returns>A <see cref="T:Snap.NX.Sphere">Snap.NX.Sphere</see> object</returns>
    </member>
    <member name="M:Snap.Create.Spline(System.Double[],Snap.Position[])">
      <summary>Creates a polynomial spline curve from knots and poles</summary>
      <param name="knots">Knots -- an array of n+k knot values : t[0], ... , t[n+k-1]</param>
      <param name="poles">An array of n 3D positions representing poles</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="M:Snap.Create.Spline(System.Double[],Snap.Position[],System.Double[])">
      <summary>Creates a rational spline curve from knots, poles, and weights</summary>
      <param name="knots">Knots -- an array of n+k knot values : t[0], ... , t[n+k-1]</param>
      <param name="poles">An array of n 3D positions representing poles</param>
      <param name="weights">An array of n weight values</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="M:Snap.Create.SplineThroughPoints(Snap.Position[],Snap.Vector,Snap.Vector)">
      <summary>Creates a cubic (degree = 3) spline curve interpolating given points and end tangents</summary>
      <param name="points">The n points to be interpolated</param>
      <param name="startTangent">The desired tangent vector at the start of the curve (magnitude doesn't matter)</param>
      <param name="endTangent">The desired tangent vector at the end of the curve (magnitude doesn't matter)</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="M:Snap.Create.SplineThroughPoints(Snap.Position[],System.Double[],System.Double[])">
      <summary>Creates a spline curve interpolating (passing through) a given sequence of points</summary>
      <param name="points">The n points to be interpolated</param>
      <param name="nodes">The n parameter values at which to interpolate</param>
      <param name="knots">Knot sequence : n+k values t[0], ... , t[n+k-1]</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="M:Snap.Create.SplineThroughPoints(Snap.Position[],System.Int32)">
      <summary>Creates a spline curve interpolating (passing through) a given sequence of points</summary>
      <param name="points">The n points to be interpolated</param>
      <param name="degree">The degree of the desired spline</param>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="M:Snap.Create.SplitBody(Snap.NX.Body,Snap.NX.Body[])">
      <summary>Creates a SplitBody feature by splitting with sheet bodies</summary>
      <param name="targetBody">The target body to be split</param>
      <param name="toolBodies">The array of sheet bodies used to split the target body</param>
      <returns> A <see cref="T:Snap.NX.SplitBody">Snap.NX.SplitBody</see> object</returns>
    </member>
    <member name="M:Snap.Create.SplitBody(Snap.NX.Body,Snap.NX.DatumPlane[])">
      <summary>Creates a SplitBody feature by splitting with datum planes</summary>
      <param name="targetBody">The target body to be split</param>
      <param name="toolDatumPlanes">The array of datum planes used to split the target body</param>
      <returns> A <see cref="T:Snap.NX.SplitBody">Snap.NX.SplitBody</see> object</returns>
    </member>
    <member name="M:Snap.Create.SplitBody(Snap.NX.Body,Snap.NX.Face[])">
      <summary>Creates a SplitBody feature by splitting with faces</summary>
      <param name="targetBody">The target body to be split</param>
      <param name="toolFaces">The array of faces used to split the target body</param>
      <returns> A <see cref="T:Snap.NX.SplitBody">Snap.NX.SplitBody</see> object</returns>
    </member>
    <member name="M:Snap.Create.Subtract(Snap.NX.Body,Snap.NX.Body[])">
      <summary>Subtracts an array of tool bodies from a target body</summary>
      <param name="targetBody">Target body</param>
      <param name="toolBodies">Array of tool bodies</param>
      <returns>
        <see cref="T:Snap.NX.Boolean">Snap.NX.Boolean</see> feature formed by subtracting tools from target</returns>
    </member>
    <member name="M:Snap.Create.Thicken(Snap.Number,Snap.Number,Snap.NX.Body[])">
      <summary>Creates a thicken object</summary>
      <param name="targetBodies">The sheet bodies to be thickened</param>
      <param name="offset1">The first offset distance</param>
      <param name="offset2">The second offset distance</param>
      <returns> A <see cref="T:Snap.NX.Thicken">Snap.NX.Thicken</see> feature</returns>
    </member>
    <member name="M:Snap.Create.ThroughCurveMesh(Snap.NX.ICurve[],Snap.NX.ICurve[])">
      <summary>Creates a Snap.NX.ThroughCurveMesh feature</summary>
      <param name="primaryCurves">Array of primary curves (curves or edges)</param>
      <param name="crossCurves">Array of cross curves (curves or edges)</param>
      <returns> A <see cref="T:Snap.NX.ThroughCurveMesh">Snap.NX.ThroughCurveMesh</see> object</returns>
    </member>
    <member name="M:Snap.Create.ThroughCurves(Snap.NX.ICurve[])">
      <summary>Creates a Snap.NX.ThroughCurves feature</summary>
      <param name="curves">The curves through which the feature should pass (curves or edges)</param>
      <returns> A <see cref="T:Snap.NX.ThroughCurves">Snap.NX.ThroughCurves</see> object</returns>
    </member>
    <member name="M:Snap.Create.Torus(Snap.Position,Snap.Orientation,System.Double,System.Double,Snap.Geom.Box2d)">
      <summary>Creates a toroidal surface, given center, matrix, major radius, minor radius, uv box</summary>
      <param name="center">Center point</param>
      <param name="matrix">Orientation of the torus. AxisZ is the axis of revolution</param>
      <param name="majorRadius">Major radius (radius of "spine" circle)</param>
      <param name="minorRadius">Minor radius (radius of "section" circle)</param>
      <param name="boxUV">The UV parameter box of the surface (MinU, MinV, MaxU, MaxV)</param>
      <returns>A <see cref="T:Snap.NX.Torus">Snap.NX.Torus</see> NX.Torus object</returns>
    </member>
    <member name="M:Snap.Create.Torus(Snap.Position,Snap.Vector,System.Double,System.Double)">
      <summary>Creates an NX.Torus solid body (complete 360 degrees), given center, major radius and minor radius</summary>
      <param name="axisPoint">Axis point</param>
      <param name="axisVector">Vector along axis of revolution (length doesn't matter)</param>
      <param name="majorRadius">Major radius (radius of "spine" circle)</param>
      <param name="minorRadius">Minor radius (radius of "section" circle)</param>
      <returns>A <see cref="T:Snap.NX.Torus">Snap.NX.Torus</see> NX.Torus object</returns>
    </member>
    <member name="M:Snap.Create.TrimBody(Snap.NX.Body,Snap.NX.Body,System.Boolean)">
      <summary>Creates a TrimBody feature by trimming with a sheet body</summary>
      <param name="targetBody">The target body to be trimmed</param>
      <param name="toolBody">The sheet body used to trim the target body</param>
      <param name="direction">Trim direction. The default direction is the normal of the sheet body.</param>
      <returns> A <see cref="T:Snap.NX.TrimBody">Snap.NX.TrimBody</see> feature</returns>
    </member>
    <member name="M:Snap.Create.TrimBody(Snap.NX.Body,Snap.NX.DatumPlane,System.Boolean)">
      <summary>Creates a TrimBody feature by trimming with a datum plane</summary>
      <param name="targetBody">The target body to be trimmed</param>
      <param name="toolDatumPlane">The datum plane used to trim the target body</param>
      <param name="direction">Trim direction. The default direction is the normal of the datum plane.</param>
      <returns> A <see cref="T:Snap.NX.TrimBody">Snap.NX.TrimBody</see> object</returns>
    </member>
    <member name="M:Snap.Create.TrimBody(Snap.NX.Body,Snap.NX.Face,System.Boolean)">
      <summary>Creates a TrimBody feature by trimming with a face</summary>
      <param name="targetBody">The target body to be trimmed</param>
      <param name="toolFace">The face used to trim the target body</param>
      <param name="direction">Trim direction. The default direction is the normal of the face.</param>
      <returns> A <see cref="T:Snap.NX.TrimBody">Snap.NX.TrimBody</see> object</returns>
    </member>
    <member name="M:Snap.Create.Tube(Snap.NX.Curve,System.Boolean,Snap.Number,Snap.Number)">
      <summary>Creates a Snap.NX.Tube feature, given spine and inner/outer diameters</summary>
      <param name="spine">The centerline (spine) of the tube</param>
      <param name="createBsurface">Controls the type of geometry created (see remarks below)</param>
      <param name="outerDiameter">Outer diameter</param>
      <param name="innerDiameter">Inner diameter. Optional. Default = <c>Nothing</c>, which gives a value of zero</param>
      <returns>A <see cref="T:Snap.NX.Tube">Snap.NX.Tube</see> object</returns>
    </member>
    <member name="M:Snap.Create.Unite(Snap.NX.Body,Snap.NX.Body[])">
      <summary>Unites an array of tool bodies with a target body</summary>
      <param name="targetBody">Target body</param>
      <param name="toolBodies">Array of tool bodies</param>
      <returns>
        <see cref="T:Snap.NX.Boolean">Snap.NX.Boolean</see> feature formed by uniting tools with target</returns>
    </member>
    <member name="M:Snap.Create.Widget">
      <summary>Creates a "widget" body for examples and testing</summary>
      <returns>An NX.Body</returns>
    </member>
    <member name="T:Snap.Create.CurvePositionFunction">
      <summary>A function that evaluates a position at a point on a curve</summary>
      <param name="data">Data item to be used in evaluation</param>
      <param name="t">Parameter value at which to evaluate (in range 0 to 1)</param>
      <returns>Position on curve at given parameter value</returns>
    </member>
    <member name="T:Snap.Create.DirectionUV">
      <summary>Direction used to create isoparametric curve</summary>
    </member>
    <member name="F:Snap.Create.DirectionUV.U">
      <summary>Direction U</summary>
    </member>
    <member name="F:Snap.Create.DirectionUV.V">
      <summary>Direction V</summary>
    </member>
    <member name="T:Snap.Create.SurfacePositionFunction">
      <summary>A function that evaluates a position at a location on a surface</summary>
      <param name="data">Data item to be used in evaluation</param>
      <param name="uv">Parameter values at which to evaluate (in range [0,1] x [0,1])</param>
      <returns>Position on surface at given parameter value</returns>
    </member>
    <member name="T:Snap.Draw">
      <summary>
            Provides functions for drawing temporary graphics in the NX window. 
            </summary>
    </member>
    <member name="M:Snap.Draw.DrawArc(Snap.NX.View,Snap.LineStyle,Snap.Geom.Curve.Arc)">
      <summary>Draws a temporary circular arc in the specified view</summary>
      <param name="view">The view in which the arc should be drawn</param>
      <param name="style">The LineStyle (color, width, font) to be used</param>
      <param name="arc">Geom.Curve.Arc object representing the arc</param>
    </member>
    <member name="M:Snap.Draw.DrawCircle(Snap.NX.View,Snap.LineStyle,Snap.Position,Snap.Vector,System.Double)">
      <summary>Draws a temporary circle in the specified view</summary>
      <param name="view">The view in which the circle should be drawn</param>
      <param name="style">The LineStyle (color, width, font) to be used</param>
      <param name="center">Center point (in absolute coordinates)</param>
      <param name="axisZ">Unit vector normal to plane of circle</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:Snap.Draw.DrawLine(Snap.NX.View,Snap.LineStyle,Snap.Position,Snap.Position)">
      <summary>Draws a temporary line in the specified view</summary>
      <param name="view">The view in which the line should be drawn</param>
      <param name="style">The LineStyle (color, width, font) to be used</param>
      <param name="p0">The start point of the line</param>
      <param name="p1">The end point of the line</param>
    </member>
    <member name="M:Snap.Draw.DrawMarker(Snap.NX.View,Snap.Position,System.Drawing.Color,NXOpen.UF.UFDisp.PolyMarker)">
      <summary>Draws a temporary marker (an NX Open PolyMarker) in the specified view</summary>
      <param name="view">The view in which the marker should be displayed</param>
      <param name="pt">The position where the marker should be displayed</param>
      <param name="color">The desired color of the marker</param>
      <param name="type">The type of marker to display (NX Open marker)</param>
    </member>
    <member name="M:Snap.Draw.DrawMarker(Snap.NX.View,Snap.Position,System.Drawing.Color,Snap.Draw.Marker)">
      <summary>Draws a temporary marker (a SNAP Marker) in the specified view</summary>
      <param name="view">The view in which the marker should be displayed</param>
      <param name="pt">The position where the marker should be displayed</param>
      <param name="color">The desired color of the marker</param>
      <param name="type">The type of marker to display (SNAP marker)</param>
    </member>
    <member name="M:Snap.Draw.DrawPolyLine(Snap.NX.View,Snap.LineStyle,Snap.Position[])">
      <summary>Draws a temporary polyline (a string of connected lines) in the specified view</summary>
      <param name="view">The view in which the line should be drawn</param>
      <param name="style">The LineStyle (color, width, font) to be used</param>
      <param name="points">The points defining the polyline</param>
    </member>
    <member name="M:Snap.Draw.DrawText(Snap.NX.View,System.Drawing.Color,Snap.Position,System.String[])">
      <summary>Draws temporary text in the specified view</summary>
      <param name="view">The view in which the text should be drawn</param>
      <param name="color">The color of the text</param>
      <param name="pt">The location of the text</param>
      <param name="text">An array of lines of text</param>
    </member>
    <member name="T:Snap.Draw.Marker">
      <summary>A collection of common marker symbols</summary>
    </member>
    <member name="F:Snap.Draw.Marker.Dot">
      <summary> Dot </summary>
    </member>
    <member name="F:Snap.Draw.Marker.Asterisk">
      <summary> Asterisk </summary>
    </member>
    <member name="F:Snap.Draw.Marker.Circle">
      <summary> Circle </summary>
    </member>
    <member name="F:Snap.Draw.Marker.Poundsign">
      <summary> Pound sign </summary>
    </member>
    <member name="F:Snap.Draw.Marker.Cross">
      <summary> Cross </summary>
    </member>
    <member name="F:Snap.Draw.Marker.Square">
      <summary> Square </summary>
    </member>
    <member name="F:Snap.Draw.Marker.Triangle">
      <summary> Triangle </summary>
    </member>
    <member name="F:Snap.Draw.Marker.Diamond">
      <summary> Diamond </summary>
    </member>
    <member name="F:Snap.Draw.Marker.Centerline">
      <summary> Centerline </summary>
    </member>
    <member name="F:Snap.Draw.Marker.BigPlus">
      <summary> Big plus </summary>
    </member>
    <member name="F:Snap.Draw.Marker.BigCircle">
      <summary> Big circle </summary>
    </member>
    <member name="F:Snap.Draw.Marker.BigCross">
      <summary> Big Cross </summary>
    </member>
    <member name="F:Snap.Draw.Marker.BigCrossInCircle">
      <summary> Big Cross In Circle </summary>
    </member>
    <member name="F:Snap.Draw.Marker.BigAsterisk">
      <summary> Big Asterisk </summary>
    </member>
    <member name="F:Snap.Draw.Marker.BigFilledSquare">
      <summary> Big Filled Square </summary>
    </member>
    <member name="F:Snap.Draw.Marker.FilledCircle">
      <summary> Filled Circle </summary>
    </member>
    <member name="F:Snap.Draw.Marker.FilledSquare">
      <summary> Filled Square </summary>
    </member>
    <member name="F:Snap.Draw.Marker.FilledDiamond">
      <summary> Filled Diamond </summary>
    </member>
    <member name="F:Snap.Draw.Marker.FilledTriangle">
      <summary> Filled Triangle </summary>
    </member>
    <member name="F:Snap.Draw.Marker.CircleInCircle">
      <summary> Circle Inside Circle </summary>
    </member>
    <member name="F:Snap.Draw.Marker.CircleInSquare">
      <summary> Circle In Square </summary>
    </member>
    <member name="F:Snap.Draw.Marker.SquareInSquare">
      <summary> Square In Square </summary>
    </member>
    <member name="F:Snap.Draw.Marker.LineInCircle">
      <summary> Line In Circle </summary>
    </member>
    <member name="F:Snap.Draw.Marker.PlusInCircle">
      <summary> Plus In Circle </summary>
    </member>
    <member name="T:Snap.Globals">
      <summary>Provides access to various global settings that affect the user's working environment.</summary>
    </member>
    <member name="P:Snap.Globals.AngleTolerance">
      <summary>Angle tolerance, in degrees</summary>
    </member>
    <member name="P:Snap.Globals.BackGroundColor">
      <summary>The background color (as a System.Drawing.Color)</summary>
    </member>
    <member name="P:Snap.Globals.Color">
      <summary>The general default color to be assigned to newly-created objects (as a System.Drawing.Color)</summary>
    </member>
    <member name="M:Snap.Globals.DeleteUndoMark(Snap.Globals.UndoMarkId,System.String)">
      <summary>Deletes an Undo mark</summary>
      <param name="markId">The ID of the Undo mark</param>
      <param name="markName">The name of the Undo mark.</param>
    </member>
    <member name="P:Snap.Globals.DisplayPart">
      <summary>Gets and sets the display part</summary>
    </member>
    <member name="P:Snap.Globals.DistanceTolerance">
      <summary>Distance tolerance</summary>
    </member>
    <member name="M:Snap.Globals.GetColor(Snap.Globals.DisplayType)">
      <summary>Gets the default color that will be assigned to newly-created objects of the specified type</summary>
      <param name="type">Object type</param>
      <returns>The default color that will be assigned</returns>
    </member>
    <member name="M:Snap.Globals.GetLineFont(Snap.Globals.DisplayType)">
      <summary>Gets the default line font that will be assigned to newly-created objects of the specified type</summary>
      <param name="type">Object type</param>
      <returns>The default line font that will be assigned</returns>
    </member>
    <member name="M:Snap.Globals.GetLineWidth(Snap.Globals.DisplayType)">
      <summary>Gets the line width that will be assigned to newly-created objects of the specified type</summary>
      <param name="type">Object type</param>
      <returns>The default line width that will be assigned</returns>
    </member>
    <member name="P:Snap.Globals.HistoryMode">
      <summary>If true, indicates that the modeling mode is set to History mode
            (as opposed to History-free mode).</summary>
    </member>
    <member name="P:Snap.Globals.InchesPerUnit">
      <summary>Inches per part unit (either 1 or roughly 0.04)</summary>
    </member>
    <member name="M:Snap.Globals.LayerObjectCount(System.Int32)">
      <summary>Get the number of objects on a specified layer</summary>
      <param name="layer">The layer number</param>
      <returns>The number of objects on the specified layer</returns>
    </member>
    <member name="P:Snap.Globals.LayerStates">
      <summary>The "array" of layer states. LayerStates[n] gives the state of layer n.</summary>
    </member>
    <member name="P:Snap.Globals.LineFont">
      <summary>The line font (solid, dashed, etc.) to be assigned to newly-created objects</summary>
    </member>
    <member name="P:Snap.Globals.LineWidth">
      <summary>The line width (thin, medium, or thick) to be assigned to newly-created objects</summary>
    </member>
    <member name="P:Snap.Globals.ManagedMode">
      <summary>
            If true, indicates that NX is running in managed mode,
            with Teamcenter (as opposed to native mode).
            </summary>
    </member>
    <member name="P:Snap.Globals.MillimetersPerUnit">
      <summary>Millimeters Per Unit (either 1 or 25.4)</summary>
    </member>
    <member name="P:Snap.Globals.NXOpenWorkPart">
      <summary>Gets the NXOpen.Parts.Work object of the session</summary>
    </member>
    <member name="P:Snap.Globals.PartUnit">
      <summary>The length unit of the work part</summary>
    </member>
    <member name="M:Snap.Globals.SetColor(Snap.Globals.DisplayType,System.Drawing.Color)">
      <summary>Sets the default color that will be assigned to newly-created objects of the specified type</summary>
      <param name="type">Object type</param>
      <param name="color">The default color that will be assigned</param>
    </member>
    <member name="M:Snap.Globals.SetLineFont(Snap.Globals.DisplayType,Snap.Globals.Font)">
      <summary>Gets the default line font that will be assigned to newly-created objects of the specified type</summary>
      <param name="type">Object type</param>
      <param name="lineFontType">The default line font that will be assigned</param>
    </member>
    <member name="M:Snap.Globals.SetLineWidth(Snap.Globals.DisplayType,Snap.Globals.Width)">
      <summary>Sets the line width that will be assigned to newly-created objects of the specified type</summary>
      <param name="type">Object type</param>
      <param name="widthType">The default line width that will be assigned</param>
    </member>
    <member name="M:Snap.Globals.SetUndoMark(Snap.Globals.MarkVisibility,System.String)">
      <summary>Creates an Undo mark</summary>
      <param name="markVisibility">Indicates the visibility of the undo mark</param>
      <param name="name">The name to be assigned to the Undo mark</param>
      <returns>The ID of the newly created Undo mark</returns>
    </member>
    <member name="P:Snap.Globals.Translucency">
      <summary>
            The translucency value to be assigned to newly-created objects
            </summary>
    </member>
    <member name="M:Snap.Globals.UndoToMark(Snap.Globals.UndoMarkId,System.String)">
      <summary>Roll back to an existing Undo mark</summary>
      <param name="markId">The ID of the Undo mark to roll back to</param>
      <param name="markName">The name of the Undo mark.</param>
    </member>
    <member name="P:Snap.Globals.UnitType">
      <summary>The unit type of the work part</summary>
    </member>
    <member name="P:Snap.Globals.Wcs">
      <summary>The work coordinate system (Wcs) of the work part</summary>
    </member>
    <member name="P:Snap.Globals.WcsOrientation">
      <summary>The orientation of the Wcs of the work part</summary>
    </member>
    <member name="P:Snap.Globals.WorkLayer">
      <summary>The work layer (the layer on which newly-created objects should be placed)</summary>
    </member>
    <member name="P:Snap.Globals.WorkPart">
      <summary>Gets and sets the work part of the session</summary>
    </member>
    <member name="P:Snap.Globals.WorkView">
      <summary>The work view of the work part</summary>
    </member>
    <member name="T:Snap.Globals.DisplayType">
      <summary>Enumeration of the object types whose default display properties can be set</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.General">
      <summary>Default Type Value</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.Line">
      <summary>Line</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.Arc">
      <summary>Arc</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.Conic">
      <summary>Conic</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.Spline">
      <summary>Spline</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.Solidbody">
      <summary>Solid Body</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.Sheetbody">
      <summary>Sheet Body</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.Datum">
      <summary>Datum</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.Point">
      <summary>Point</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.CoordinateSystem">
      <summary>Coordinate System</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.AllButDefault">
      <summary>All But Default</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.DatumCsys">
      <summary>Datum CSYS Feature</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.Traceline">
      <summary>Traceline</summary>
    </member>
    <member name="F:Snap.Globals.DisplayType.InfiniteLine">
      <summary>Infinite Line</summary>
    </member>
    <member name="T:Snap.Globals.Font">
      <summary>Enumeration of line fonts to be used when drawing objects such as curves</summary>
    </member>
    <member name="F:Snap.Globals.Font.Centerline">
      <summary>Centerline</summary>
    </member>
    <member name="F:Snap.Globals.Font.Dashed">
      <summary>Dashed</summary>
    </member>
    <member name="F:Snap.Globals.Font.Dotted">
      <summary>Dotted</summary>
    </member>
    <member name="F:Snap.Globals.Font.DottedDashed">
      <summary>DottedDashed</summary>
    </member>
    <member name="F:Snap.Globals.Font.LongDashed">
      <summary>LongDashed</summary>
    </member>
    <member name="F:Snap.Globals.Font.Phantom">
      <summary>Phantom</summary>
    </member>
    <member name="F:Snap.Globals.Font.Solid">
      <summary>Solid</summary>
    </member>
    <member name="T:Snap.Globals.LayerState">
      <summary>The possible states of a layer</summary>
    </member>
    <member name="F:Snap.Globals.LayerState.WorkLayer">
      <summary>Work layer. The layer on which all newly created objects are placed.</summary>
    </member>
    <member name="F:Snap.Globals.LayerState.Selectable">
      <summary>Objects on the layer are selectable</summary>
    </member>
    <member name="F:Snap.Globals.LayerState.Visible">
      <summary>Objects on the layer are visible, but not selectable</summary>
    </member>
    <member name="F:Snap.Globals.LayerState.Hidden">
      <summary>Objects on the layer are not visible and not selectable</summary>
    </member>
    <member name="T:Snap.Globals.LayerStatesArray">
      <summary>A class to support indexed access to layer states.</summary>
    </member>
    <member name="P:Snap.Globals.LayerStatesArray.Item(System.Int32)">
      <summary>The indexer for the LayerStatesArray class</summary>
      <param name="n">The index</param>
      <returns>The n-th element of the "array"</returns>
    </member>
    <member name="T:Snap.Globals.MarkVisibility">
      <summary>Indicates the visibility of an Undo mark</summary>
    </member>
    <member name="F:Snap.Globals.MarkVisibility.AnyVisibility">
      <summary>Use only in query methods</summary>
    </member>
    <member name="F:Snap.Globals.MarkVisibility.Invisible">
      <summary>Invisible</summary>
    </member>
    <member name="F:Snap.Globals.MarkVisibility.Visible">
      <summary>Visible</summary>
    </member>
    <member name="T:Snap.Globals.UndoMarkId">
      <summary>An identifier used to refer to an Undo mark</summary>
    </member>
    <member name="T:Snap.Globals.Unit">
      <summary>Enumeration of length unit types that can be used</summary>
    </member>
    <member name="F:Snap.Globals.Unit.Millimeter">
      <summary>Millimeter</summary>
    </member>
    <member name="F:Snap.Globals.Unit.Inch">
      <summary>Inch</summary>
    </member>
    <member name="T:Snap.Globals.Width">
      <summary>Enumeration of display widths for use when drawing objects such as curves</summary>
    </member>
    <member name="F:Snap.Globals.Width.Normal">
      <summary>Normal width -- the same as Width018 (0.18 mm)</summary>
    </member>
    <member name="F:Snap.Globals.Width.Thick">
      <summary>Thick width -- the same as Width025 (0.25 mm)</summary>
    </member>
    <member name="F:Snap.Globals.Width.Thin">
      <summary>Thin width -- the same as Width013 (0.13 mm)</summary>
    </member>
    <member name="F:Snap.Globals.Width.Width013">
      <summary>Width is 0.13 mm</summary>
    </member>
    <member name="F:Snap.Globals.Width.Width018">
      <summary>Width is 0.18 mm</summary>
    </member>
    <member name="F:Snap.Globals.Width.Width025">
      <summary>Width is 0.25 mm</summary>
    </member>
    <member name="F:Snap.Globals.Width.Width035">
      <summary>Width is 0.35 mm</summary>
    </member>
    <member name="F:Snap.Globals.Width.Width050">
      <summary>Width is 0.50 mm</summary>
    </member>
    <member name="F:Snap.Globals.Width.Width070">
      <summary>Width is 0.70 mm</summary>
    </member>
    <member name="F:Snap.Globals.Width.Width100">
      <summary>Width is 1.00 mm</summary>
    </member>
    <member name="F:Snap.Globals.Width.Width140">
      <summary>Width is 1.40 mm</summary>
    </member>
    <member name="F:Snap.Globals.Width.Width200">
      <summary>Width is 2.00 mm</summary>
    </member>
    <member name="T:Snap.InfoWindow">
      <summary>
            Provides functions to write output to the NX Information window 
            (sometimes known as the "Listing" window).
            </summary>
    </member>
    <member name="M:Snap.InfoWindow.Clear">
      <summary>Clears the Info Window</summary>
    </member>
    <member name="M:Snap.InfoWindow.Close">
      <summary>Closes the Information window</summary>
    </member>
    <member name="M:Snap.InfoWindow.Write(Snap.Position)">
      <summary>
            Writes a position to the Info window (with no newline added)
            </summary>
      <param name="myPosition">The position to write</param>
    </member>
    <member name="M:Snap.InfoWindow.Write(Snap.Vector)">
      <summary>
            Writes a 3D vector to the Info window (with no newline added)
            </summary>
      <param name="myVector">The vector to write</param>
    </member>
    <member name="M:Snap.InfoWindow.Write(System.Double)">
      <summary>
            Writes a double to the Info window (with no newline added)
            </summary>
      <param name="mydouble">The double to write</param>
    </member>
    <member name="M:Snap.InfoWindow.Write(System.Int32)">
      <summary>
            Write an integer to the Info window (with no newline added)
            </summary>
      <param name="myInteger">The integer to write</param>
    </member>
    <member name="M:Snap.InfoWindow.Write(System.String)">
      <summary>
            Writes a string to the Info window (with no newline added)
            </summary>
      <param name="mystring">The string to write</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(Snap.Orientation)">
      <summary>
            Write an orientation to the Info window (with a newline added)
            </summary>
      <param name="myOrientation">The orientation to write</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(Snap.Position)">
      <summary>
            Writes a position to the Info window (with a newline added)
            </summary>
      <param name="myPosition">The position to write</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(Snap.Position[0:,0:],System.Int32)">
      <summary>
            Writes a two-dimensional array of positions to the Info window (with a newline added)
            </summary>
      <param name="myPositionArray">The two-dimensional array of positions to write</param>
      <param name="paddedWidth">The total width of each number field (padding added on the right). Optional. Default = 20</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(Snap.Position[],System.Int32)">
      <summary>
            Writes a position array to the Info window (with a newline added)
            </summary>
      <param name="myPositionArray">The position array to write</param>
      <param name="paddedWidth">The total width of each number field (padding added on the right). Optional. Default = 20</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(Snap.Vector)">
      <summary>
            Writes a 3D vector to the Info window (with a newline added)
            </summary>
      <param name="myVector">The vector to write</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(Snap.Vector[0:,0:],System.Int32)">
      <summary>
            Writes a two-dimensional array of 3D vectors to the Info window (with a newline added)
            </summary>
      <param name="myVectorArray">The two-dimensional array of 3D vectors to write</param>
      <param name="paddedWidth">The total width of each number field (padding added on the right). Optional. Default = 20</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(Snap.Vector[],System.Int32)">
      <summary>
            Write an array of 3D vectors to the Info window (with a newline added)
            </summary>
      <param name="myVectorArray">The vector array to write</param>
      <param name="paddedWidth">The total width of each number field (padding added on the right). Optional. Default = 20</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.Double)">
      <summary>
            Writes a double to the Info window (with a newline added)
            </summary>
      <param name="mydouble">The double to write</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.Double[0:,0:],System.Int32)">
      <summary>
            Writes a two-dimensional array of doubles to the Info window (with a newline added)
            </summary>
      <param name="myDoubleArray">The two-dimensional array of doubles to write</param>
      <param name="paddedWidth">The total width of each number field (padding added on the right). Optional. Default = 10</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.Double[],System.Int32)">
      <summary>
            Write an array of doubles to the Info window (with a newline added)
            </summary>
      <param name="myDoubleArray">The array of doubles to write</param>
      <param name="paddedWidth">The total width of each number field (padding added on the right). Optional. Default = 10</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.Double[],System.String)">
      <summary>
            Write an array of doubles to the Info window (with a newline added)
            </summary>
      <param name="myDoubleArray">The array of doubles to be written</param>
      <param name="format">The format specifier to be used when writing each double</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.Int32)">
      <summary>
            Write an integer to the Info window (with a newline added)
            </summary>
      <param name="myInteger">The integer to write</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.Int32[0:,0:],System.Int32)">
      <summary>
            Writes a two-dimensional array of integers to the Info window (with a newline added)
            </summary>
      <param name="myIntArray">The two-dimensional array of integers to write</param>
      <param name="paddedWidth">The total width of each number field (padding added on the right). Optional. Default = 7</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.Int32[],System.Int32)">
      <summary>
            Write an array of integers to the Info window (with a newline added)
            </summary>
      <param name="myIntArray">The array of integers to write</param>
      <param name="paddedWidth">The total width of each number field (padding added on the right). Optional. Default = 7</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.Object)">
      <summary>
            Writes a string representation of an object to the Info window (with a newline added)
            </summary>
      <param name="myobject">The object to write</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.String)">
      <summary>
            Writes a string to the Info window (with a newline added)
            </summary>
      <param name="mystring">The string to write</param>
    </member>
    <member name="M:Snap.InfoWindow.WriteLine(System.String[],System.Int32)">
      <summary>
            Write an array of strings to the Info window (with a newline added)
            </summary>
      <param name="myStringArray">The array of strings to write</param>
      <param name="paddedWidth">The total width of each number field (padding added on the right). Optional. Default = 20</param>
    </member>
    <member name="T:Snap.LineStyle">
      <summary> A collection of settings to control the display style of curves (color, width, font) </summary>
    </member>
    <member name="M:Snap.LineStyle.#ctor(System.Drawing.Color,Snap.Globals.Width,Snap.Globals.Font)">
      <summary>Constructs a new LineStyle object</summary>
      <param name="color">The value for the Color field</param>
      <param name="width">The value for the Width field</param>
      <param name="font">The value for the Font field&gt;</param>
    </member>
    <member name="P:Snap.LineStyle.Color">
      <summary> The desired display color</summary>
    </member>
    <member name="P:Snap.LineStyle.Font">
      <summary>The desired line font (solid, dashed, etc.)</summary>
    </member>
    <member name="P:Snap.LineStyle.Width">
      <summary> The desired line width (thin, thick, etc.)</summary>
    </member>
    <member name="T:Snap.Math">
      <summary>Mostly trigonometric functions that handle angles in degrees, rather than radians</summary>
    </member>
    <member name="M:Snap.Math.AcosD(System.Double)">
      <summary>
            Calculates the arccosine (in degrees) of a given number
            </summary>
      <param name="x">The given number, which must be in the range -1 ≤ x ≤ 1</param>
      <returns>An angle, theta, such that cos(theta) = x, and 0 ≤ theta ≤ 180</returns>
    </member>
    <member name="M:Snap.Math.AsinD(System.Double)">
      <summary>
            Calculates the arcsine (in degrees) of a given number
            </summary>
      <param name="x">The given number, which must be in the range -1 ≤ x ≤ 1</param>
      <returns>An angle, theta, such that sin(theta) = x, and 0 ≤ theta ≤ 180</returns>
    </member>
    <member name="M:Snap.Math.Atan2D(System.Double,System.Double)">
      <summary>
            Calculates the arctangent (in degrees) of a ratio of two given numbers
            </summary>
      <param name="y">The first given number (which can be regarded as a y-coordinate in the plane)</param>
      <param name="x">The second given number (which can be regarded as an x-coordinate in the plane)</param>
      <returns>An angle, theta, such that tan(theta) = y/x, sign(theta) = sign(y), and -180 ≤ theta ≤ 180</returns>
    </member>
    <member name="M:Snap.Math.AtanD(System.Double)">
      <summary>
            Calculates the arctangent (in degrees) of a given number
            </summary>
      <param name="x">The given number, which must be in the range -1 ≤ x ≤ 1</param>
      <returns>An angle, theta, such that tan(theta) = x, and 0 ≤ theta ≤ 180</returns>
    </member>
    <member name="M:Snap.Math.CosD(System.Double)">
      <summary>
            Calculates the cosine of an angle given in degrees
            </summary>
      <param name="angle">The angle, in degrees</param>
      <returns>The cosine of the given angle</returns>
    </member>
    <member name="M:Snap.Math.DegreesToRadians(System.Double)">
      <summary>Converts degrees to radians</summary>
      <param name="angle">An angle measured in degrees</param>
      <returns>The same angle measured in radians</returns>
    </member>
    <member name="M:Snap.Math.Max(System.Double[])">
      <summary>Find the maximum element in an array</summary>
      <param name="values">The array of values</param>
      <returns>The largest value in the array</returns>
    </member>
    <member name="M:Snap.Math.MaxIndex(System.Double[])">
      <summary>Find the index of the maximum element in an array</summary>
      <param name="values">The array of values</param>
      <returns>The index of the largest value in the array</returns>
    </member>
    <member name="M:Snap.Math.Mean(System.Double[])">
      <summary>Find the mean (average) of an array of values</summary>
      <param name="values">The array of values</param>
      <returns>The mean of the values in the array</returns>
    </member>
    <member name="M:Snap.Math.Min(System.Double[])">
      <summary>Find the minimum element in an array</summary>
      <param name="values">The array of values</param>
      <returns>The smallest value in the array</returns>
    </member>
    <member name="M:Snap.Math.MinIndex(System.Double[])">
      <summary>Find the index of the minimum element in an array</summary>
      <param name="values">The array of values</param>
      <returns>The index of the smallest value in the array</returns>
    </member>
    <member name="M:Snap.Math.RadiansToDegrees(System.Double)">
      <summary>Converts radians to degrees</summary>
      <param name="angle">An angle measured in radians</param>
      <returns>The same angle measured in degrees</returns>
    </member>
    <member name="M:Snap.Math.SinD(System.Double)">
      <summary>
            Calculates the sine of an angle given in degrees
            </summary>
      <param name="angle">The angle, in degrees</param>
      <returns>The sine of the given angle</returns>
    </member>
    <member name="M:Snap.Math.Sum(System.Double[])">
      <summary>Find the sum of an array of values</summary>
      <param name="values">The array of values</param>
      <returns>The sum of the values in the array</returns>
    </member>
    <member name="M:Snap.Math.TanD(System.Double)">
      <summary>
            Calculates the tangent of an angle given in degrees
            </summary>
      <param name="angle">The angle, in degrees</param>
      <returns>The tangent of the given angle</returns>
    </member>
    <member name="T:Snap.Math.LinearAlgebra">
      <summary>Performs simple linear algebra computations</summary>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.Adjugate3(System.Double[0:,0:])">
      <summary>
            Calculates the adjugate matrix of a 3×3 matrix
            </summary>
      <param name="a">The matrix</param>
      <returns>The adjugate matrix</returns>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.BackSolve(System.Double[0:,0:],System.Int32[],System.Double[])">
      <summary>Performs "back substitution" to solve a linear system, given an LU decomposition</summary>
      <param name="a">An LU decomposition of matrix a, as produced by LUDecomposition</param>
      <param name="index">Permutation vector produced by LUDecomposition</param>
      <param name="b">The right-hand side vector</param>
      <returns>The solution vector</returns>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.BackSubstitution(System.Double[0:,0:],System.Int32[],System.Double[])">
      <summary>Performs "back substitution" to solve a linear system, given an LU decomposition</summary>
      <param name="a">An LU decomposition of matrix a, as produced by LUDecomposition</param>
      <param name="index">Permutation vector produced by LUDecomposition</param>
      <param name="b">On input, the right-hand side. On output, the solution vector</param>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.Determinant3(System.Double[0:,0:])">
      <summary>
            Calculates the determinant of a 3 × 3 matrix
            </summary>
      <param name="u">The matrix</param>
      <returns>The determinant of the given matrix</returns>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.EigenSystem(System.Double[0:,0:])">
      <summary>
            Computes the eigensystem (eigenvalues and eigenvectors) of a matrix
            </summary>
      <param name="A">The matrix</param>
      <returns>Array of results (pairs of eigenvalue and eigenvector)</returns>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.Inverse(System.Double[0:,0:])">
      <summary>Computes the inverse of a square matrix a</summary>
      <param name="a">The matrix (not modified by this function)</param>
      <returns>The inverse</returns>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.Inverse3(System.Double[0:,0:])">
      <summary>
            Calculates the inverse of a 3 × 3 matrix
            </summary>
      <param name="a">Input matrix</param>
      <returns>Inverse matrix</returns>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.LinearSystemSolve(Snap.Vector,Snap.Vector,Snap.Vector,Snap.Vector)">
      <summary>Solves a system of three linear equations in vector form</summary>
      <param name="r">The right-hand side vector</param>
      <param name="u">First reference vector</param>
      <param name="v">Second reference vector</param>
      <param name="w">Third reference vector</param>
      <returns>The components of r with respect to the basis u, v, w</returns>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.LinearSystemSolve(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Solves a system of two linear equations</summary>
      <param name="a">Coefficient of x in the first equation</param>
      <param name="b">Coefficient of y in the first equation</param>
      <param name="c">Coefficient of x in the second equation</param>
      <param name="d">Coefficient of y in the second equation</param>
      <param name="h">Constant term (on right-hand side) in first equation</param>
      <param name="k">Constant term (on right-hand side) in second equation</param>
      <returns>Solutions for x and y</returns>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.LinearSystemSolve(System.Double[0:,0:],System.Double[])">
      <summary>Solves the linear system of equations a*x = b</summary>
      <param name="a">Coefficient matrix, of size n × n.</param>
      <param name="b">Right-hand-side vector, of length n.</param>
      <returns>Solution vector, again of length n</returns>
    </member>
    <member name="M:Snap.Math.LinearAlgebra.LUDecomposition(System.Double[0:,0:],System.Int32[],System.Double)">
      <summary>Modifies a square matrix to LU decomposition form</summary>
      <param name="a">Square matrix (input and output) -- modified upon output</param>
      <param name="index">Permutation info, for use by back substitution</param>
      <param name="d">Even/odd indicator. Used to calculate determinant.</param>
    </member>
    <member name="T:Snap.Math.LinearAlgebra.EigenSystemResult">
      <summary>Represents the results of an eigenvalue/eigenvector calculation</summary>
    </member>
    <member name="P:Snap.Math.LinearAlgebra.EigenSystemResult.Eigenvalue">
      <summary>An eigenvalue</summary>
    </member>
    <member name="P:Snap.Math.LinearAlgebra.EigenSystemResult.Eigenvector">
      <summary>The corresponding eigenvector</summary>
    </member>
    <member name="T:Snap.Math.MatrixMath">
      <summary>Provides simple manipulations of general matrices and vectors</summary>
    </member>
    <member name="M:Snap.Math.MatrixMath.Add(System.Double[0:,0:],System.Double[0:,0:])">
      <summary>Add two general matrices of doubles</summary>
      <param name="a">Matrix of size m × n</param>
      <param name="b">Matrix of same size m × n</param>
      <returns>Sum matrix, also of size m × n</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.ColumnCount(Snap.Position[0:,0:])">
      <summary>Return the number of columns in a given matrix of Positions</summary>
      <param name="a">The matrix</param>
      <returns>Number of columns</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.ColumnCount(Snap.Vector[0:,0:])">
      <summary>Return the number of columns in a given matrix of Vectors</summary>
      <param name="a">The matrix</param>
      <returns>Number of columns</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.ColumnCount(System.Double[0:,0:])">
      <summary>Return the number of columns in a given matrix of doubles</summary>
      <param name="a">The matrix</param>
      <returns>Number of columns</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Copy(System.Double[0:,0:])">
      <summary>Copies a 2-D array of doubles</summary>
      <param name="original">Original array</param>
      <returns>New array with elements equal to input</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Copy(System.Double[])">
      <summary>Copies an array of doubles</summary>
      <param name="original">Original array</param>
      <returns>New array with elements equal to input</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.GetColumn(Snap.Position[0:,0:],System.Int32)">
      <summary>Obtain a column from a matrix of Positions</summary>
      <param name="a">The matrix</param>
      <param name="j">Index of row required (zero-based)</param>
      <returns>The requested column</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.GetColumn(Snap.Vector[0:,0:],System.Int32)">
      <summary>Obtain a column from a matrix of Vectors</summary>
      <param name="a">The matrix</param>
      <param name="j">Index of row required (zero-based)</param>
      <returns>The requested column</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.GetColumn(System.Double[0:,0:],System.Int32)">
      <summary>Obtain a column from a matrix of doubles</summary>
      <param name="a">The matrix</param>
      <param name="j">Index of row required (zero-based)</param>
      <returns>The requested column</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.GetRow(Snap.Position[0:,0:],System.Int32)">
      <summary>Obtain a row from a matrix of Positions</summary>
      <param name="a">The matrix</param>
      <param name="i">Index of row required (zero-based)</param>
      <returns>The requested row</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.GetRow(Snap.Vector[0:,0:],System.Int32)">
      <summary>Obtain a row from a matrix of Vectors</summary>
      <param name="a">The matrix</param>
      <param name="i">Index of row required (zero-based)</param>
      <returns>The requested row</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.GetRow(System.Double[0:,0:],System.Int32)">
      <summary>Obtain a row from a matrix of doubles</summary>
      <param name="a">The matrix</param>
      <param name="i">Index of row required (zero-based)</param>
      <returns>The requested row</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.IdentityMatrix(System.Int32)">
      <summary>Returns an identity matrix of size n</summary>
      <param name="n">Required size, n</param>
      <returns>Identity matrix of size n × n</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.MatrixToVector(System.Double[0:,0:])">
      <summary>Rearranges a Double matrix (2-D array) into a vector (1-D array)</summary>
      <param name="matrix">Matrix</param>
      <returns>Vector</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.MatrixToVector(System.Int32[0:,0:])">
      <summary>Rearranges an Integer matrix (2-D array) into a vector (1-D array)</summary>
      <param name="matrix">Matrix</param>
      <returns>Vector</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Multiply(Snap.Vector[0:,0:],System.Double[0:,0:])">
      <summary>Calculates the product of matrix of doubles and matrix of Vectors</summary>
      <param name="a">Matrix of Vectors (of size m × n)</param>
      <param name="b">Matrix of doubles (of size n × p)</param>
      <returns>Product matrix -- a matrix of Vectors of size m × p</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Multiply(Snap.Vector[],System.Double[])">
      <summary>Calculates the dot product of array of doubles and array of Vectors</summary>
      <param name="u">Array of Vectors (of length n)</param>
      <param name="v">Array of doubles (of same length, n)</param>
      <returns>Dot product</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Multiply(System.Double[0:,0:],Snap.Vector[0:,0:])">
      <summary>Calculates the product of matrix of doubles and matrix of Vectors</summary>
      <param name="a">Matrix of doubles (of size m × n)</param>
      <param name="b">Matrix of Vectors (of size n × p)</param>
      <returns>Product matrix -- a matrix of Vectors of size m × p</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Multiply(System.Double[0:,0:],System.Double)">
      <summary>Multiplies a matrix by a scalar</summary>
      <param name="a">Matrix of doubles (of size m × n)</param>
      <param name="s">Scalar</param>
      <returns>Product matrix</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Multiply(System.Double[0:,0:],System.Double[0:,0:])">
      <summary>Multiply two general matrices of doubles</summary>
      <param name="a">Matrix of size m × n</param>
      <param name="b">Matrix of size n × p</param>
      <returns>Product matrix, of size m × p</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Multiply(System.Double[0:,0:],System.Double[])">
      <summary>Multiplies a matrix of doubles times a vector of doubles</summary>
      <param name="a">Matrix of size m × n</param>
      <param name="b">Vector of length n</param>
      <returns>Product = a*b (in that order); a vector of length m</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Multiply(System.Double[],Snap.Vector[])">
      <summary>Calculates the dot product of array of doubles and array of Vectors</summary>
      <param name="u">Array of doubles (of length n)</param>
      <param name="v">Array of Vectors (of same length, n)</param>
      <returns>Dot product</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Multiply(System.Double[],System.Double[])">
      <summary>Calculates the dot product of two arrays of doubles</summary>
      <param name="u">First array (of length n)</param>
      <param name="v">Second array (of same length, n)</param>
      <returns>Dot product</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.RowCount(Snap.Position[0:,0:])">
      <summary>Return the number of rows in a given matrix of Positions</summary>
      <param name="a">The matrix</param>
      <returns>Number of rows</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.RowCount(Snap.Vector[0:,0:])">
      <summary>Return the number of rows in a given matrix of Vectors</summary>
      <param name="a">The matrix</param>
      <returns>Number of rows</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.RowCount(System.Double[0:,0:])">
      <summary>Return the number of rows in a given matrix of doubles</summary>
      <param name="a">The matrix</param>
      <returns>Number of rows</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Transpose(Snap.Position[0:,0:])">
      <summary>Transposes a given matrix of positions</summary>
      <param name="a">Input matrix</param>
      <returns>Transpose</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.Transpose(System.Double[0:,0:])">
      <summary>Transposes a given matrix of doubles</summary>
      <param name="a">Input matrix</param>
      <returns>Transpose</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.VectorToMatrix(System.Double[],System.Int32,System.Int32)">
      <summary>Rearranges a Double vector (1-D array) into a matrix (2-D array)</summary>
      <param name="vector">The vector</param>
      <param name="nrows">Number of rows in output matrix</param>
      <param name="ncols">Number of columns in output matrix</param>
      <returns>Matrix</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.VectorToMatrix(System.Int32[],System.Int32,System.Int32)">
      <summary>Rearranges an Integer vector (1-D array) into a matrix (2-D array)</summary>
      <param name="vector">The vector</param>
      <param name="nrows">Number of rows in output matrix</param>
      <param name="ncols">Number of columns in output matrix</param>
      <returns>Matrix</returns>
    </member>
    <member name="M:Snap.Math.MatrixMath.ZeroMatrix(System.Int32)">
      <summary>Returns a square zero matrix of size n</summary>
      <param name="n">Required size, n</param>
      <returns>Zero matrix of size n × n</returns>
    </member>
    <member name="T:Snap.Math.SplineMath">
      <summary>Low-level tools for b-spline calculations</summary>
    </member>
    <member name="M:Snap.Math.SplineMath.BasisMatrix(System.Double[],System.Int32,System.Double[])">
      <summary>Evaluate matrix of basis function values</summary>
      <param name="knots">Knot sequence : n+k values t[0], ... , t[n+k-1]</param>
      <param name="k">Order of the b-spline</param>
      <param name="nodes">Parameter (n) values at which to evaluate, tau[0],...,tau[n-1]</param>
      <returns>Matrix (n x n) of basis function values, B(i,k)(nodes[j])</returns>
    </member>
    <member name="M:Snap.Math.SplineMath.BezierKnots(System.Int32)">
      <summary>Build Bezier knot sequence for degree m (m+1 zeros and m+1 1's)</summary>
      <param name="m">Degree</param>
      <returns>Array of knot values</returns>
    </member>
    <member name="M:Snap.Math.SplineMath.BsplineInterpolation(Snap.Position[],System.Double[],System.Double[])">
      <summary>B-spline Interpolation (3D -- vector-valued)</summary>
      <param name="intPoints">n 3D points to interpolate, q[0],...,q[n-1]</param>
      <param name="nodes">n parameter values at which to interpolate, tau[0],...,tau[n-1]</param>
      <param name="knots">knot sequence : n+k values t[0], ... , t[n+k-1]</param>
      <returns>The n 3D poles p[0],...,p[n-1] of the interpolating b-spline curve</returns>
    </member>
    <member name="M:Snap.Math.SplineMath.BsplineInterpolation(System.Double[],System.Double[],System.Double[])">
      <summary>B-spline interpolation (1D -- real-valued)</summary>
      <param name="intValues">The n values to interpolate, q[0],...,q[n-1]</param>
      <param name="nodes">The n parameter values at which to interpolate, tau[0],...,tau[n-1]</param>
      <param name="knots">Knot sequence : n-k values t[0], ... , t[n+k-1]</param>
      <returns>The n "poles" (ordinate values) p[0],...,p[n-1] of the interpolating b-spline</returns>
    </member>
    <member name="M:Snap.Math.SplineMath.CentripedalNodes(Snap.Position[])">
      <summary>Calculate nodes (parameter values for interpolation) based on the centripedal idea</summary>
      <param name="intPoints">Data points to be interpolated</param>
      <returns>Centripedal node values, normalized to the range [0,1]</returns>
    </member>
    <member name="M:Snap.Math.SplineMath.ChordalNodes(Snap.Position[0:,0:])">
      <summary>Calculate nodes (parameter values for interpolation) based on chordal distances</summary>
      <param name="intPoints">Two-dimensional grid of data points to be interpolated</param>
      <returns>Chordal distances, normalized to the range [0,1]</returns>
    </member>
    <member name="M:Snap.Math.SplineMath.ChordalNodes(Snap.Position[])">
      <summary>Calculate nodes (parameter values for interpolation) based on chordal distances</summary>
      <param name="intPoints">Data points to be interpolated</param>
      <returns>Chordal distances, normalized to the range [0,1]</returns>
    </member>
    <member name="M:Snap.Math.SplineMath.EvaluateBasisFunction(System.Double[],System.Int32,System.Int32,System.Double)">
      <summary>Evaluate value of a b-spline basis function</summary>
      <param name="knots">Knot sequence : n+k values t[0], ... , t[n+k-1]</param>
      <param name="i">Index of basis function (see below)</param>
      <param name="k">Order of the b-spline</param>
      <param name="t">Parameter value at which to evaluate</param>
      <returns>Value of i-th basis function B(i,k)(t)</returns>
    </member>
    <member name="M:Snap.Math.SplineMath.GrevilleKnots(System.Double[],System.Int32)">
      <summary>Calculate Greville knots based on given node values</summary>
      <param name="nodes">Node values</param>
      <param name="m">Degree of curve</param>
      <returns>Knot values</returns>
    </member>
    <member name="T:Snap.Number">
      <summary>Class to allow either double or string inputs when creating features</summary>
    </member>
    <member name="M:Snap.Number.ToString">
      <summary>Produces a string representation of a Number object</summary>
      <returns>The string</returns>
    </member>
    <member name="F:Snap.Number.Zero">
      <summary>The Number representing zero</summary>
    </member>
    <member name="T:Snap.Orientation">
      <summary>
            Represents an orientation in 3D space  (interchangeable with <see cref="T:NXOpen.Matrix3x3">NXOpen.Matrix3x3</see>)
            </summary>
    </member>
    <member name="M:Snap.Orientation.#ctor">
      <summary>Constructor for the identity Orientation</summary>
    </member>
    <member name="M:Snap.Orientation.#ctor(NXOpen.Matrix3x3)">
      <summary>Constructor, given an NXOpen.Matrix3x3 object</summary>
      <param name="matrix">An NXOpen.Matrix3x3 object</param>
    </member>
    <member name="M:Snap.Orientation.#ctor(Snap.Vector)">
      <summary>Constructor, given a Z-axis vector</summary>
      <param name="axisZ">Vector to be used as the Z-axis of the orientation (length doesn't matter)</param>
      <returns>Orientation having the given vector as its Z-axis</returns>
    </member>
    <member name="M:Snap.Orientation.#ctor(Snap.Vector,Snap.Vector)">
      <summary>Constructor, given X and Y axes</summary>
      <param name="axisX">The X-axis vector</param>
      <param name="axisY">The Y-axis vector</param>
    </member>
    <member name="M:Snap.Orientation.#ctor(Snap.Vector,Snap.Vector,Snap.Vector)">
      <summary>Constructor, given three orthogonal unit vectors</summary>
      <param name="axisX">Unit vector to be used as X-axis</param>
      <param name="axisY">Unit vector to be used as Y-axis</param>
      <param name="axisZ">Unit vector to be used as Z-axis</param>
    </member>
    <member name="P:Snap.Orientation.Array">
      <summary>
            The array representation of the orientation
            </summary>
    </member>
    <member name="P:Snap.Orientation.AxisX">
      <summary>The X-axis of the orientation (unit vector)</summary>
    </member>
    <member name="P:Snap.Orientation.AxisY">
      <summary>The Y-axis of the orientation (unit vector)</summary>
    </member>
    <member name="P:Snap.Orientation.AxisZ">
      <summary>The Z-axis of the orientation (unit vector)</summary>
    </member>
    <member name="P:Snap.Orientation.Identity">
      <summary>Returns the identity Orientation</summary>
    </member>
    <member name="T:Snap.Position">
      <summary>
            Represents a position in 3D space (interchangeable with <see cref="T:NXOpen.Point3d">NXOpen.Point3d</see>)
            </summary>
    </member>
    <member name="M:Snap.Position.#ctor(NXOpen.Point)">
      <summary>Creates a position from an NXOpen.Point object</summary>
      <param name="pt">An NXOpen.Point object</param>
    </member>
    <member name="M:Snap.Position.#ctor(NXOpen.Point3d)">
      <summary>Creates a position from an NXOpen.Point3d object</summary>
      <param name="pt">An NXOpen.Point3d object</param>
    </member>
    <member name="M:Snap.Position.#ctor(Snap.NX.Point)">
      <summary>Creates a position from an NX.Point object</summary>
      <param name="pt">An NX.Point object (or an NXOpen.Point)</param>
    </member>
    <member name="M:Snap.Position.#ctor(System.Double,System.Double)">
      <summary>Creates a position from x and y coordinates (z assumed = 0)</summary>
      <param name="x">x-coordinate</param>
      <param name="y">y-coordinate</param>
    </member>
    <member name="M:Snap.Position.#ctor(System.Double,System.Double,System.Double)">
      <summary>Creates a position from three rectangular coordinates</summary>
      <param name="x">x-coordinate</param>
      <param name="y">y-coordinate</param>
      <param name="z">z-coordinate</param>
    </member>
    <member name="M:Snap.Position.#ctor(System.Double[])">
      <summary>Creates a position from an array of three coordinates</summary>
      <param name="coords">Array of three coordinates</param>
    </member>
    <member name="P:Snap.Position.Array">
      <summary>Array of the coordinates of the position</summary>
    </member>
    <member name="M:Snap.Position.Copy">
      <summary>Copies a position</summary>
      <returns>A copy of the original input position</returns>
    </member>
    <member name="M:Snap.Position.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies a position</summary>
      <param name="xform">The transformation to apply</param>
      <returns>A transformed copy of the original input position</returns>
    </member>
    <member name="M:Snap.Position.Copy(Snap.Geom.Transform,Snap.Position[])">
      <summary>Transforms/copies an array of positions to another array of positions</summary>
      <param name="xform">The transformation to apply</param>
      <param name="original">Original array of positions</param>
      <returns>The array of transformed positions</returns>
    </member>
    <member name="M:Snap.Position.Copy(Snap.Position[])">
      <summary>Copies a position array to another position array</summary>
      <param name="original">Original position array</param>
      <returns>A copy of the original input array of positions</returns>
    </member>
    <member name="M:Snap.Position.Distance(Snap.Position,Snap.Position)">
      <summary>Calculates the distance between two positions</summary>
      <param name="p">First position</param>
      <param name="q">Second position</param>
      <returns>Distance between the positions</returns>
    </member>
    <member name="M:Snap.Position.Distance2(Snap.Position,Snap.Position)">
      <summary>Calculates the squared distance between two positions</summary>
      <param name="p">First position</param>
      <param name="q">Second position</param>
      <returns>Square of distance between the positions</returns>
    </member>
    <member name="M:Snap.Position.GetX(Snap.Position[0:,0:])">
      <summary>Generates a 2D array of X-coordinates from a 2D array of positions</summary>
      <param name="positions">Array of positions p00, p01, ..., pmn</param>
      <returns>Array of coordinates p00.X, p01.X, ... , pmn.X</returns>
    </member>
    <member name="M:Snap.Position.GetX(Snap.Position[])">
      <summary>Generates an array of X-coordinates from an array of positions</summary>
      <param name="positions">Array of positions p0, p1, ..., pn</param>
      <returns>Array of X-coordinates p0.X, p1.X, ... , pn.X</returns>
    </member>
    <member name="M:Snap.Position.GetXYZ(Snap.Position[])">
      <summary>Generates an array of XYZ coordinates from an array of positions</summary>
      <param name="positions">Array of positions p0, p1, ..., pn</param>
      <returns>Array of coordinates p0.X, p0.Y, p0.Z, p1.X, p1.Y, p1.Z, ... , pn.Z</returns>
    </member>
    <member name="M:Snap.Position.GetY(Snap.Position[0:,0:])">
      <summary>Generates a 2D array of Y-coordinates from a 2D array of positions</summary>
      <param name="positions">Array of positions p00, p01, ..., pmn</param>
      <returns>Array of Y-coordinates p00.Y, p01.Y, ... , pmn.Y</returns>
    </member>
    <member name="M:Snap.Position.GetY(Snap.Position[])">
      <summary>Generates an array of Y-coordinates from an array of positions</summary>
      <param name="positions">Array of vectors p0, p1, ..., pn</param>
      <returns>Array of Y-coordinates p0.Y, p1.Y, ... , pn.Y</returns>
    </member>
    <member name="M:Snap.Position.GetZ(Snap.Position[0:,0:])">
      <summary>Generates a 2D array of Z-coordinates from a 2D array of positions</summary>
      <param name="positions">Array of positions p00, p01, ..., pmn</param>
      <returns>Array of coordinates p00.Z, p01.Z, ... , pmn.Z</returns>
    </member>
    <member name="M:Snap.Position.GetZ(Snap.Position[])">
      <summary>Generates an array of Z-coordinates from an array of positions</summary>
      <param name="positions">Array of positions p0, p1, ..., pn</param>
      <returns>Array of Z-coordinates p0.Z, p1.Z, ... , pn.Z</returns>
    </member>
    <member name="M:Snap.Position.Move(Snap.Geom.Transform)">
      <summary>Transforms a position</summary>
      <param name="xform">The transformation to apply</param>
      <returns>A transformed version of the original input position</returns>
    </member>
    <member name="M:Snap.Position.Move(Snap.Geom.Transform,Snap.Position[])">
      <summary>Transforms an array of positions</summary>
      <param name="xform">The transformation to apply</param>
      <param name="original">Original position array</param>
      <returns>A transformed version of the original input array of positions</returns>
    </member>
    <member name="M:Snap.Position.op_Addition(Snap.Position,Snap.Position)">
      <summary>Adds two positions using the "+" notation</summary>
      <param name="p">First position</param>
      <param name="q">Second position</param>
      <returns>Sum of two positions: p + q</returns>
    </member>
    <member name="M:Snap.Position.op_Addition(Snap.Position,Snap.Vector)">
      <summary>Adds a position and a vector using the "+" notation</summary>
      <param name="p">Position</param>
      <param name="v">Vector</param>
      <returns>Sum of position and vector: p + v</returns>
    </member>
    <member name="M:Snap.Position.op_Division(Snap.Position,System.Double)">
      <summary>Divides a position by a scalar using "/" notation</summary>
      <param name="p">Position</param>
      <param name="s">Scalar (double)</param>
      <returns>Scalar multiple: p/s</returns>
    </member>
    <member name="M:Snap.Position.op_Multiply(System.Double,Snap.Position)">
      <summary>Multiplies a position by a scalar using "*" notation</summary>
      <param name="s">Scalar (double)</param>
      <param name="p">Position</param>
      <returns>Scalar multiple: s*p</returns>
    </member>
    <member name="M:Snap.Position.op_Multiply(System.Int32,Snap.Position)">
      <summary>Multiplies a position by a scalar using "*" notation</summary>
      <param name="s">Scalar (int)</param>
      <param name="p">Position</param>
      <returns>Scalar multiple: s*p</returns>
    </member>
    <member name="M:Snap.Position.op_Subtraction(Snap.Position,Snap.Position)">
      <summary>Subtracts two positions using the "-" notation</summary>
      <param name="p">First position</param>
      <param name="q">Second position</param>
      <returns>Vector representing difference of two positions: p - q</returns>
    </member>
    <member name="M:Snap.Position.op_Subtraction(Snap.Position,Snap.Vector)">
      <summary>Subtracts a vector from a position using the "-" notation</summary>
      <param name="p">Position</param>
      <param name="v">Vector</param>
      <returns>Position minus vector: p  - v</returns>
    </member>
    <member name="M:Snap.Position.op_UnaryNegation(Snap.Position)">
      <summary>Negates (reverses) a position using the "-" notation</summary>
      <param name="p">The position</param>
      <returns>Negative of the given position</returns>
    </member>
    <member name="F:Snap.Position.Origin">
      <summary>A position corresponding to the origin -- (0,0,0)</summary>
    </member>
    <member name="P:Snap.Position.PolarPhi">
      <summary>The polar angle "phi" -- the angle between the position and the XY-plane</summary>
    </member>
    <member name="P:Snap.Position.PolarTheta">
      <summary>The polar angle "theta" -- angle of rotation in the XY-plane</summary>
    </member>
    <member name="M:Snap.Position.PositionsFromCoordinates(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:])">
      <summary>Builds a 2D array of positions from three 2D arrays of coordinates</summary>
      <param name="x">2D array of x-coordinates x00, x01, ... , xmn</param>
      <param name="y">2D array of y-coordinates y00, y01, ... , ymn</param>
      <param name="z">2D array of z-coordinates z00, z01, ... , zmn</param>
      <returns>2D array of positions p00, p01, ..., pmn, where p[i,j] = ( x[i,j], y[i,j] z[i,j] )</returns>
    </member>
    <member name="M:Snap.Position.PositionsFromCoordinates(System.Double[])">
      <summary>Builds an array of positions from an array of coordinates</summary>
      <param name="coords">Array of coordinates x0, y0, z0, x1, y1, z1, ... , xn, yn, zn</param>
      <returns>Array of positions p0, p1, ..., pn, where pi = (xi, yi, zi)</returns>
    </member>
    <member name="M:Snap.Position.PositionsFromCoordinates(System.Double[],System.Double[],System.Double[])">
      <summary>Builds an array of positions from three arrays of coordinates</summary>
      <param name="x">Array of x-coordinates x00, x01, ... , xmn</param>
      <param name="y">Array of y-coordinates y00, y01, ... , ymn</param>
      <param name="z">Array of z-coordinates z00, z01, ... , zmn</param>
      <returns>Array of positions p0, p1, ..., pn, where p[i] = ( x[i], y[i] z[i] )</returns>
    </member>
    <member name="M:Snap.Position.Project(Snap.Geom.Surface.Plane)">
      <summary>Projects a position onto a plane (along the plane normal)</summary>
      <param name="plane">The plane onto which we want to project</param>
      <returns>The projected position</returns>
    </member>
    <member name="M:Snap.Position.ToString">
      <summary>Produces a string representation of a Position object</summary>
      <returns>String in the form (X, Y, Z)</returns>
    </member>
    <member name="M:Snap.Position.ToString(System.String)">
      <summary>Produces a string representation of a Position object using a given format</summary>
      <param name="format">A numeric format specifier</param>
      <returns>String in the form (X, Y, Z)</returns>
    </member>
    <member name="F:Snap.Position.X">
      <summary>The x-coordinate of the position</summary>
    </member>
    <member name="F:Snap.Position.Y">
      <summary>The y-coordinate of the position</summary>
    </member>
    <member name="F:Snap.Position.Z">
      <summary>The z-coordinate of the position</summary>
    </member>
    <member name="T:Snap.Print">
      <summary>
            Provides functions to support printing
            </summary>
    </member>
    <member name="M:Snap.Print.PrintDisplay(System.Int32,System.Double,System.Double,System.Double,NXOpen.PrintBuilder.OutputOption,System.Boolean,System.Boolean,System.Boolean,NXOpen.PrintBuilder.ImageResolutionOption,NXOpen.PrintBuilder.OrientationOption,NXOpen.PrintBuilder.PaperSize)">
      <summary>
            Printing the Current Display
            </summary>
      <param name="copies">The number of copies to be printed. Optional. Default = 1</param>
      <param name="thinWidth">
            The thin width scale factor. See remarks below. This number cannot be less than 0.0. Optional. Default = 1.0
            </param>
      <param name="normalWidth">
            The normal width scale factor.  See remarks below. This number cannot be less than 0.0. Optional. Default = 2.0
            </param>
      <param name="thickWidth">The thick width scale factor.  See remarks below. This number cannot be less than 0.0. Optional. Default = 3.0</param>
      <param name="output">The type of output desired (shaded or wire-fame). Optional. Default = WireframeBlackWhite </param>
      <param name="whiteBackground">
            If true, outputs an image with a white background, rather than using the current NX background color(s).
            This option is only applicable when the "output" parameter is set to "shaded".  Optional. Default = False
            </param>
      <param name="rasterImages">
            If true, indicates that any raster images inserted in drawings will be output when printing. Optional. Default = True
            </param>
      <param name="shadedGeometry">
            The shaded geometry as wireframe option.
            If true, indicates that shaded objects will be printed as wireframes, rather than shaded. Optional. Default = False
            </param>
      <param name="imageResolutionOption">The resolution of images created for printing shaded views. Optional. Default = Draft</param>
      <param name="orientation">The orientation of the printed page. Optional. Default = Landscape</param>
      <param name="paper">The paper size used for printing. Optional. Default = A4</param>
    </member>
    <member name="T:Snap.UnloadOption">
      <summary>
            Indicates when you want the system to unload your application library from a running NX session.
            </summary>
    </member>
    <member name="F:Snap.UnloadOption.Immediately">
      <summary>
            You want the system to unload the library as soon as your application program has finished running.
            </summary>
    </member>
    <member name="F:Snap.UnloadOption.Explicitly">
      <summary>
            You will unload the library yourself, using the "Unload Shared Image" command in File--&gt;Utilities.
            </summary>
    </member>
    <member name="F:Snap.UnloadOption.AtTermination">
      <summary>
            You want the system to unload the library when the current NX session terminates. 
            </summary>
    </member>
    <member name="T:Snap.Vector">
      <summary>
            Represents a vector in 3D space (interchangeable with <see cref="T:NXOpen.Vector3d">NXOpen.Vector3d</see>)
            </summary>
    </member>
    <member name="M:Snap.Vector.#ctor(NXOpen.Point)">
      <summary>Creates a vector from an NXOpen.Point object</summary>
      <param name="pt">An NXOpen.Point object</param>
    </member>
    <member name="M:Snap.Vector.#ctor(NXOpen.Point3d)">
      <summary>Creates a vector from an NXOpen.Point3d object</summary>
      <param name="pt">An NXOpen.Point3d object</param>
    </member>
    <member name="M:Snap.Vector.#ctor(NXOpen.Vector3d)">
      <summary>Creates a vector from an NXOpen.Vector3d object</summary>
      <param name="v">An NXOpen.Vector3d object</param>
    </member>
    <member name="M:Snap.Vector.#ctor(Snap.NX.Point)">
      <summary>Creates a vector from an NX.Point object</summary>
      <param name="pt">An NX.Point object (or an NXOpen.Point)</param>
    </member>
    <member name="M:Snap.Vector.#ctor(System.Double,System.Double)">
      <summary>Creates a vector from x and y coordinates (z assumed = 0)</summary>
      <param name="x">x-coordinate</param>
      <param name="y">y-coordinate</param>
    </member>
    <member name="M:Snap.Vector.#ctor(System.Double,System.Double,System.Double)">
      <summary>Creates a vector from three rectangular coordinates</summary>
      <param name="x">x-coordinate</param>
      <param name="y">y-coordinate</param>
      <param name="z">z-coordinate</param>
    </member>
    <member name="M:Snap.Vector.#ctor(System.Double[])">
      <summary>Creates a vector from an array of three coordinates</summary>
      <param name="coords">Array of three coordinates</param>
    </member>
    <member name="M:Snap.Vector.Angle(Snap.Vector,Snap.Vector)">
      <summary>Calculates the angle in degrees between two vectors</summary>
      <param name="u">First vector</param>
      <param name="v">Second vector</param>
      <returns>The angle, theta, in degrees, where 0 ≤ theta ≤ 180</returns>
    </member>
    <member name="P:Snap.Vector.Array">
      <summary>Array of the components of the vector</summary>
    </member>
    <member name="F:Snap.Vector.AxisX">
      <summary>A unit vector in the direction of the X-axis -- (1,0,0)</summary>
    </member>
    <member name="F:Snap.Vector.AxisY">
      <summary>A unit vector in the direction of the Y-axis -- (0,1,0)</summary>
    </member>
    <member name="F:Snap.Vector.AxisZ">
      <summary>A unit vector in the direction of the Z-axis -- (0,0,1)</summary>
    </member>
    <member name="M:Snap.Vector.Components(Snap.Vector,Snap.Vector,Snap.Vector)">
      <summary>Calculates components with respect to two given basis vectors</summary>
      <param name="r">The vector whose components we want</param>
      <param name="u">First basis vector</param>
      <param name="v">Second basis vector</param>
      <returns>The components of r with respect to the basis u, v, n (see remarks)</returns>
    </member>
    <member name="M:Snap.Vector.Components(Snap.Vector,Snap.Vector,Snap.Vector,Snap.Vector)">
      <summary>Calculates components with respect to three given basis vectors</summary>
      <param name="r">The vector whose components we want</param>
      <param name="u">First basis vector</param>
      <param name="v">Second basis vector</param>
      <param name="w">Third basis vector</param>
      <returns>The components of r with respect to the basis u, v, w</returns>
    </member>
    <member name="M:Snap.Vector.Copy">
      <summary>Copies a vector</summary>
      <returns>A copy of the original input vector</returns>
    </member>
    <member name="M:Snap.Vector.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies a vector</summary>
      <param name="xform">The transformation to apply</param>
      <returns>A transformed copy of the original input vector</returns>
    </member>
    <member name="M:Snap.Vector.Copy(Snap.Geom.Transform,Snap.Vector[])">
      <summary>Transforms/copies an array of vectors</summary>
      <param name="xform">The transformation to apply</param>
      <param name="original">Original vector array</param>
      <returns>A transformed copy of the original input array of vectors</returns>
    </member>
    <member name="M:Snap.Vector.Copy(Snap.Vector[])">
      <summary>Copies a vector array to another vector array</summary>
      <param name="original">Original vector array</param>
      <returns>Vector array</returns>
    </member>
    <member name="M:Snap.Vector.Cross(Snap.Vector,Snap.Vector)">
      <summary>Calculates the cross product (vector product) of two vectors</summary>
      <param name="u">First vector</param>
      <param name="v">Second vector</param>
      <returns>Cross product</returns>
    </member>
    <member name="M:Snap.Vector.GetX(Snap.Vector[0:,0:])">
      <summary>Generates a 2D array of X-coordinates from a 2D array of vectors</summary>
      <param name="vectors">Array of vectors v00, v01, ..., vmn</param>
      <returns>Array of coordinates v00.X, v01.X, ... , vmn.X</returns>
    </member>
    <member name="M:Snap.Vector.GetX(Snap.Vector[])">
      <summary>Generates an array of X-coordinates from an array of vectors</summary>
      <param name="vectors">Array of vectors v0, v1, ..., vn</param>
      <returns>Array of coordinates v0.X, v1.X, ... , vn.X</returns>
    </member>
    <member name="M:Snap.Vector.GetXYZ(Snap.Vector[])">
      <summary>Generates an array of XYZ coordinates from an array of vectors</summary>
      <param name="vectors">Array of vectors v0, v1, ..., vn</param>
      <returns>Array of coordinates v0.X, v0.Y, v0.Z, v1.X, v1.Y, v1.Z, ... , vn.Z</returns>
    </member>
    <member name="M:Snap.Vector.GetY(Snap.Vector[0:,0:])">
      <summary>Generates a 2D array of Y-coordinates from a 2D array of vectors</summary>
      <param name="vectors">Array of vectors v00, v01, ..., vmn</param>
      <returns>Array of coordinates v00.Y, v01.Y, ... , vmn.Y</returns>
    </member>
    <member name="M:Snap.Vector.GetY(Snap.Vector[])">
      <summary>Generates an array of Y-coordinates from an array of vectors</summary>
      <param name="vectors">Array of vectors v0, v1, ..., vn</param>
      <returns>Array of coordinates v0.Y, v1.Y, ... , vn.Y</returns>
    </member>
    <member name="M:Snap.Vector.GetZ(Snap.Vector[0:,0:])">
      <summary>Generates a 2D array of Z-coordinates from a 2D array of vectors</summary>
      <param name="vectors">Array of vectors v00, v01, ..., vmn</param>
      <returns>Array of coordinates v00.Z, v01.Z, ... , vmn.Z</returns>
    </member>
    <member name="M:Snap.Vector.GetZ(Snap.Vector[])">
      <summary>Generates an array of Z-coordinates from an array of vectors</summary>
      <param name="vectors">Array of vectors v0, v1, ..., vn</param>
      <returns>Array of coordinates v0.Z, v1.Z, ... , vn.Z</returns>
    </member>
    <member name="M:Snap.Vector.Move(Snap.Geom.Transform)">
      <summary>Transforms a vector</summary>
      <param name="xform">The transformation to apply</param>
      <returns>A transformed version of the original input vector</returns>
    </member>
    <member name="M:Snap.Vector.Move(Snap.Geom.Transform,Snap.Vector[])">
      <summary>Transforms an array of vector</summary>
      <param name="xform">The transformation to apply</param>
      <param name="original">Original vector array</param>
      <returns>A transformed version of the original input array of vector</returns>
    </member>
    <member name="M:Snap.Vector.Norm(Snap.Vector)">
      <summary>Calculates the norm (length) of a vector</summary>
      <param name="u">The vector</param>
      <returns>Norm (length) of vector</returns>
    </member>
    <member name="M:Snap.Vector.Norm2(Snap.Vector)">
      <summary>Calculates the norm squared (length squared) of a vector</summary>
      <param name="u">The vector</param>
      <returns>Norm (length) squared of vector</returns>
    </member>
    <member name="M:Snap.Vector.op_Addition(Snap.Vector,Snap.Vector)">
      <summary>Adds two vectors using the "+" notation</summary>
      <param name="u">First vector</param>
      <param name="v">Second vector</param>
      <returns>Sum of two vectors: u + v</returns>
    </member>
    <member name="M:Snap.Vector.op_Division(Snap.Vector,System.Double)">
      <summary>Divides a vector by a scalar using "/" notation</summary>
      <param name="u">Vector</param>
      <param name="s">Scalar (double)</param>
      <returns>Scalar multiple: u/s</returns>
    </member>
    <member name="M:Snap.Vector.op_Multiply(Snap.Vector,Snap.Vector)">
      <summary>Calculates the dot product (scalar product) of two vectors</summary>
      <param name="u">First vector</param>
      <param name="v">Second vector</param>
      <returns>Dot product: u*v</returns>
    </member>
    <member name="M:Snap.Vector.op_Multiply(System.Double,Snap.Vector)">
      <summary>Multiplies a vector by a scalar using "*" notation</summary>
      <param name="s">Scalar (double)</param>
      <param name="u">Vector</param>
      <returns>Scalar multiple: s*u</returns>
    </member>
    <member name="M:Snap.Vector.op_Multiply(System.Int32,Snap.Vector)">
      <summary>Multiplies a vector by a scalar using "*" notation</summary>
      <param name="s">Scalar (int)</param>
      <param name="u">Vector</param>
      <returns>Scalar multiple: s*u</returns>
    </member>
    <member name="M:Snap.Vector.op_Subtraction(Snap.Vector,Snap.Vector)">
      <summary>Subtracts two vectors using the "-" notation</summary>
      <param name="u">First vector</param>
      <param name="v">Second vector</param>
      <returns>Difference of two vectors: u - v</returns>
    </member>
    <member name="M:Snap.Vector.op_UnaryNegation(Snap.Vector)">
      <summary>Negates (reverses) a vector using the "-" notation</summary>
      <param name="u">The vector</param>
      <returns>Negative of the given vector</returns>
    </member>
    <member name="P:Snap.Vector.PolarPhi">
      <summary>The polar angle "phi" -- angle between the vector and the XY-plane, in degrees</summary>
    </member>
    <member name="P:Snap.Vector.PolarTheta">
      <summary>The polar angle "theta" -- the angle of rotation in the XY-plane, in degrees</summary>
    </member>
    <member name="M:Snap.Vector.ToString">
      <summary>Produces a string representation of a Vector object</summary>
      <returns>String in the form (X, Y, Z)</returns>
    </member>
    <member name="M:Snap.Vector.ToString(System.String)">
      <summary>Produces a string representation of a Vector object using a given format</summary>
      <param name="format">A numeric format specifier</param>
      <returns>String in the form (X, Y, Z)</returns>
    </member>
    <member name="M:Snap.Vector.Unit(Snap.Vector)">
      <summary>Unitizes a given vector</summary>
      <param name="u">Vector to be unitized</param>
      <returns>Unit vector in same direction</returns>
    </member>
    <member name="M:Snap.Vector.UnitCross(Snap.Vector,Snap.Vector)">
      <summary>Calculates the unitized cross product (vector product) of two vectors</summary>
      <param name="u">First vector</param>
      <param name="v">Second vector</param>
      <returns>Unitized cross product</returns>
    </member>
    <member name="M:Snap.Vector.Unitize">
      <summary>Unitizes a given vector</summary>
      <returns>Unit vector in same direction</returns>
    </member>
    <member name="M:Snap.Vector.VectorsFromCoordinates(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:])">
      <summary>Builds a 2D array of vectors from three 2D arrays of coordinates</summary>
      <param name="x">2D array of x-coordinates x00, x01, ... , xmn</param>
      <param name="y">2D array of y-coordinates y00, y01, ... , ymn</param>
      <param name="z">2D array of z-coordinates z00, z01, ... , zmn</param>
      <returns>2D array of vectors v00, v01, ..., vmn, where v[i,j] = ( x[i,j], y[i,j] z[i,j] )</returns>
    </member>
    <member name="M:Snap.Vector.VectorsFromCoordinates(System.Double[])">
      <summary>Builds an array of vectors from an array of coordinates</summary>
      <param name="coords">Array of coordinates x0, y0, z0, x1, y1, z1, ... , xn, yn, zn</param>
      <returns>Array of vectors v0, v1, ..., vn, where vi = (xi, yi, zi)</returns>
    </member>
    <member name="M:Snap.Vector.VectorsFromCoordinates(System.Double[],System.Double[],System.Double[])">
      <summary>Builds an array of vectors from three arrays of coordinates</summary>
      <param name="x">Array of x-coordinates x0, x1, ... , xn</param>
      <param name="y">Array of y-coordinates y0, y1, ... , yn</param>
      <param name="z">Array of z-coordinates z0, z1, ... , zn</param>
      <returns>Array of vectors v0, v1, ..., vn, where v[i] = ( xi, yi, zi )</returns>
    </member>
    <member name="F:Snap.Vector.X">
      <summary>The x-component (or coordinate) of the vector</summary>
    </member>
    <member name="F:Snap.Vector.Y">
      <summary>The y-component (or coordinate) of the vector</summary>
    </member>
    <member name="F:Snap.Vector.Z">
      <summary>The z-component (or coordinate) of the vector</summary>
    </member>
    <member name="T:Snap.Geom.Box2d">
      <summary>Represents a 2D box (rectangle)</summary>
    </member>
    <member name="M:Snap.Geom.Box2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a 2D box from min and max values</summary>
      <param name="minU">Minimum u-value</param>
      <param name="minV">Minimum v-value</param>
      <param name="maxU">Maximum u-value</param>
      <param name="maxV">Maximum v-value</param>
    </member>
    <member name="P:Snap.Geom.Box2d.MaxU">
      <summary>The upper u-value</summary>
    </member>
    <member name="P:Snap.Geom.Box2d.MaxV">
      <summary>The upper v-value</summary>
    </member>
    <member name="P:Snap.Geom.Box2d.MinU">
      <summary>The lower u-value</summary>
    </member>
    <member name="P:Snap.Geom.Box2d.MinV">
      <summary>The lower v-value</summary>
    </member>
    <member name="T:Snap.Geom.Box3d">
      <summary>Represents a 3D box, with sides aligned with the ACS axes.</summary>
    </member>
    <member name="M:Snap.Geom.Box3d.#ctor(Snap.Position,Snap.Position)">
      <summary>Constructs a Box3D from given corner positions</summary>
      <param name="minXYZ">The "lower" corner position (MinX, MinY, MinZ)</param>
      <param name="maxXYZ">The "upper" corner position (MaxX, MaxY, MaxZ)</param>
    </member>
    <member name="M:Snap.Geom.Box3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Constructs a Box3D from minimum and maximum x, y, z values</summary>
      <param name="minX">Minimum x-value</param>
      <param name="minY">Minimum y-value</param>
      <param name="minZ">Minimum z-value</param>
      <param name="maxX">Maximum x-value</param>
      <param name="maxY">Maximum y-value</param>
      <param name="maxZ">Maximum z-value</param>
    </member>
    <member name="P:Snap.Geom.Box3d.Corners">
      <summary>The eight corners of the box</summary>
    </member>
    <member name="P:Snap.Geom.Box3d.MaxX">
      <summary>The upper x-value</summary>
    </member>
    <member name="P:Snap.Geom.Box3d.MaxXYZ">
      <summary>The upper corner of the box (max X, Y, Z values)</summary>
    </member>
    <member name="P:Snap.Geom.Box3d.MaxY">
      <summary>The upper y-value</summary>
    </member>
    <member name="P:Snap.Geom.Box3d.MaxZ">
      <summary>The upper z-value</summary>
    </member>
    <member name="P:Snap.Geom.Box3d.MinX">
      <summary>The lower x-value</summary>
    </member>
    <member name="P:Snap.Geom.Box3d.MinXYZ">
      <summary>The lower corner of the box (min X, Y, Z values)</summary>
    </member>
    <member name="P:Snap.Geom.Box3d.MinY">
      <summary>The lower y-value</summary>
    </member>
    <member name="P:Snap.Geom.Box3d.MinZ">
      <summary>The lower z-value</summary>
    </member>
    <member name="T:Snap.Geom.Curve">
      <summary>
            Represents a non-persistent curve -- not stored in NX
            </summary>
    </member>
    <member name="T:Snap.Geom.Curve.Arc">
      <summary>Represents a non-persistent circular arc -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Arc.AxisX">
      <summary> A unit vector along the X-axis of the arc (where angle = 0)</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Arc.AxisY">
      <summary> A unit vector along the Y-axis of the arc (where angle = 90)</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Arc.Center">
      <summary> The center of the arc (in absolute coordinates) </summary>
    </member>
    <member name="P:Snap.Geom.Curve.Arc.EndAngle">
      <summary> The end angle of the arc (in degrees) </summary>
    </member>
    <member name="M:Snap.Geom.Curve.Arc.Fillet(Snap.Position,Snap.Position,Snap.Position,System.Double)">
      <summary>Constructs a fillet arc from three points</summary>
      <param name="p0">First point</param>
      <param name="pa">Apex point</param>
      <param name="p1">Last point</param>
      <param name="radius">Radius</param>
      <returns>A Geom.Arc representing the fillet</returns>
    </member>
    <member name="P:Snap.Geom.Curve.Arc.Radius">
      <summary> The radius of the arc</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Arc.StartAngle">
      <summary> The start angle of the arc (in degrees) </summary>
    </member>
    <member name="T:Snap.Geom.Curve.Ellipse">
      <summary>Represents a non-persistent ellipse -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Ellipse.AxisX">
      <summary>A unit vector along the X-axis of the ellipse (where angle = 0)</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Ellipse.AxisY">
      <summary>A unit vector along the Y-axis of the ellipse (where angle = 90)</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Ellipse.Center">
      <summary> Center of ellipse (in absolute coordinates)</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Ellipse.EndAngle">
      <summary>End angle (in degrees)</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Ellipse.RadiusX">
      <summary>The half-width of the ellipse in its X-direction</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Ellipse.RadiusY">
      <summary>The half-width of the ellipse in its Y-direction</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Ellipse.StartAngle">
      <summary>Start angle (in degrees)</summary>
    </member>
    <member name="T:Snap.Geom.Curve.Line">
      <summary>Represents a non-persistent line -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Line.EndPoint">
      <summary>The end point of the line</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Line.StartPoint">
      <summary>The start point of the line</summary>
    </member>
    <member name="T:Snap.Geom.Curve.Ray">
      <summary>Represents a non-persistent infinite line -- not stored in NX</summary>
    </member>
    <member name="M:Snap.Geom.Curve.Ray.#ctor(Snap.Position,Snap.Vector)">
      <summary>Constructs a ray from a given position and vector</summary>
      <param name="origin">Point lying on ray</param>
      <param name="axis">Vector along ray</param>
    </member>
    <member name="P:Snap.Geom.Curve.Ray.Axis">
      <summary> A vector along the ray (a unit vector) </summary>
    </member>
    <member name="P:Snap.Geom.Curve.Ray.Origin">
      <summary> A position on the ray</summary>
    </member>
    <member name="T:Snap.Geom.Curve.Spline">
      <summary>Represents a non-persistent spline curve -- not stored in NX</summary>
    </member>
    <member name="M:Snap.Geom.Curve.Spline.Create(System.Double[],Snap.Position[])">
      <summary>Creates a polynomial Geom.Curve.Spline from knots and poles</summary>
      <param name="knots">Knots -- an array of n+k knot values : t[0], ... , t[n+k-1]</param>
      <param name="poles">An array of n 3D positions representing poles</param>
      <returns>A Snap.Geom.Curve.Spline object</returns>
    </member>
    <member name="M:Snap.Geom.Curve.Spline.Create(System.Double[],Snap.Position[],System.Double[])">
      <summary>Creates a rational Geom.Curve.Spline from knots, poles, and weights</summary>
      <param name="knots">Knots -- an array of n+k knot values : t[0], ... , t[n+k-1]</param>
      <param name="poles">An array of n 3D positions representing poles</param>
      <param name="weights">An array of n weight values</param>
      <returns>A Snap.Geom.Curve.Spline object</returns>
    </member>
    <member name="M:Snap.Geom.Curve.Spline.CreateBezier(Snap.Position[])">
      <summary>Creates a polynomial Bezier curve from given poles</summary>
      <param name="poles">Array of m+1 poles (3D)</param>
      <returns>A Snap.Geom.Curve.Spline object that is a polynomial Bezier curve of degree m</returns>
    </member>
    <member name="M:Snap.Geom.Curve.Spline.CreateBezier(Snap.Position[],System.Double[])">
      <summary>Creates a rational Bezier curve from given poles and weights</summary>
      <param name="poles">Array of m+1 poles (3D)</param>
      <param name="weights">Array of m+1 weights</param>
      <returns>A Snap.Geom.Curve.Spline object that is a rational Bezier curve of degree m</returns>
    </member>
    <member name="P:Snap.Geom.Curve.Spline.Degree">
      <summary>The degree of the spline, m (equal to order - 1)</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Spline.Knots">
      <summary> Array of knot values </summary>
    </member>
    <member name="P:Snap.Geom.Curve.Spline.Order">
      <summary>The order of the spline, k (equal to degree + 1)</summary>
    </member>
    <member name="P:Snap.Geom.Curve.Spline.Poles">
      <summary> Array of poles</summary>
    </member>
    <member name="M:Snap.Geom.Curve.Spline.Position(System.Double)">
      <summary>Calculates a point on the curve at a given parameter value</summary>
      <param name="t">Parameter value</param>
      <returns>The point corresponding to the given parameter value</returns>
    </member>
    <member name="M:Snap.Geom.Curve.Spline.Position(System.Int32,System.Double)">
      <summary>Calculates a point on the curve at a given parameter value</summary>
      <param name="r">The index of the span on which the given parameter value lies</param>
      <param name="t">Parameter value</param>
      <returns>The point corresponding to the given parameter value</returns>
    </member>
    <member name="P:Snap.Geom.Curve.Spline.Weights">
      <summary> Array of weight values</summary>
    </member>
    <member name="T:Snap.Geom.Surface">
      <summary>
            Represents a non-persistent infinite surface -- not stored in NX
            </summary>
    </member>
    <member name="T:Snap.Geom.Surface.Blend">
      <summary>Represents a non-persistent blending surface -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Blend.Radius">
      <summary>Radius of the blending surface</summary>
    </member>
    <member name="T:Snap.Geom.Surface.Bsurface">
      <summary>Represents a non-persistent B-surface object -- not stored in NX</summary>
    </member>
    <member name="M:Snap.Geom.Surface.Bsurface.Create(Snap.Position[0:,0:],System.Double[0:,0:],System.Double[],System.Double[])">
      <summary>Constructs a rational Geom.Bsurface from poles, weights, and knot sequences</summary>
      <param name="poles">A 2D array of nu x nv 3D vectors representing poles</param>
      <param name="weights">A 2D array of nu x nv values representing weights</param>
      <param name="knotsU">Knots for u-direction -- an array of nu+ku knot values : u[0], ... , u[nu+ku-1]</param>
      <param name="knotsV">Knots for v-direction -- an array of nv+kv knot values : v[0], ... , v[nv+kv-1]</param>
      <returns>A rational Geom.Bsurface</returns>
    </member>
    <member name="M:Snap.Geom.Surface.Bsurface.Create(Snap.Position[0:,0:],System.Double[],System.Double[])">
      <summary>Constructs a polynomial Geom.Bsurface from poles and knot sequences</summary>
      <param name="poles">A 2D array of nu x nv 3D positions representing poles</param>
      <param name="knotsU">Knots for u-direction -- an array of nu+ku knot values : u[0], ... , u[nu+ku-1]</param>
      <param name="knotsV">Knots for v-direction -- an array of nv+kv knot values : v[0], ... , v[nv+kv-1]</param>
      <returns>A polynomial Geom.Bsurface</returns>
    </member>
    <member name="M:Snap.Geom.Surface.Bsurface.CreateBezier(Snap.Position[0:,0:])">
      <summary>Creates a Geom.Bsurface that is polynomial Bezier patch</summary>
      <param name="poles">A 2D array of (mu+1) x (mv+1) 3D positions representing poles</param>
      <returns>A polynomial Bezier patch of degree mu x mv</returns>
    </member>
    <member name="M:Snap.Geom.Surface.Bsurface.CreateBezier(Snap.Position[0:,0:],System.Double[0:,0:])">
      <summary>Creates a Geom.Bsurface that is a rational Bezier patch</summary>
      <param name="poles">A 2D array of (mu+1) x (mv+1) 3D positions representing poles</param>
      <param name="weights">A 2D array of (mu+1) x (mv+1) values representing weights</param>
      <returns>A rational Bezier patch of degree mu x mv</returns>
    </member>
    <member name="P:Snap.Geom.Surface.Bsurface.DegreeU">
      <summary>The degree of the b-surface in the u-direction</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Bsurface.DegreeV">
      <summary>The degree of the b-surface in the v-direction</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Bsurface.KnotsU">
      <summary> Array of knot values in u-direction </summary>
    </member>
    <member name="P:Snap.Geom.Surface.Bsurface.KnotsV">
      <summary> Array of knot values in v-direction </summary>
    </member>
    <member name="P:Snap.Geom.Surface.Bsurface.OrderU">
      <summary>The order of the b-surface in the u-direction</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Bsurface.OrderV">
      <summary>The order of the b-surface in the v-direction</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Bsurface.Poles">
      <summary> Array of poles (3D) </summary>
    </member>
    <member name="M:Snap.Geom.Surface.Bsurface.Position(System.Double[])">
      <summary>Evaluate a point on a Snap.Geom.Surface.Bsurface at given (u,v) parameter values</summary>
      <param name="uv">The (u,v) parameter values</param>
      <returns>Point on surface at the given (u,v) parameter values</returns>
      <exception cref="T:System.ArgumentException">
            The (u,v) parameter array has the wrong length. You must input
            two separate values, or an array of length 2.
            </exception>
    </member>
    <member name="P:Snap.Geom.Surface.Bsurface.Weights">
      <summary> Array of weight values</summary>
    </member>
    <member name="T:Snap.Geom.Surface.Cone">
      <summary>Represents a non-persistent conical surface -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Cone.AxisPoint">
      <summary>Axis point of the conical surface</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Cone.AxisVector">
      <summary>Axis vector of the conical surface</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Cone.HalfAngle">
      <summary>Half-angle, in degrees</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Cone.Radius">
      <summary>Radius at axis point</summary>
    </member>
    <member name="T:Snap.Geom.Surface.Cylinder">
      <summary>Represents a non-persistent cylindrical surface -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Cylinder.AxisPoint">
      <summary>Axis point of the cylindrical surface</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Cylinder.AxisVector">
      <summary>Axis vector of the cylindrical surface</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Cylinder.Diameter">
      <summary>Diameter of the cylindrical surface</summary>
    </member>
    <member name="T:Snap.Geom.Surface.Extrude">
      <summary>Represents a non-persistent extruded surface -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Extrude.Direction">
      <summary>Axis vector of the extruded surface</summary>
    </member>
    <member name="T:Snap.Geom.Surface.Offset">
      <summary>Represents a non-persistent offset surface -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Offset.Distance">
      <summary>Offset Distance</summary>
    </member>
    <member name="T:Snap.Geom.Surface.Plane">
      <summary>Represents a non-persistent infinite plane -- not stored in NX</summary>
    </member>
    <member name="M:Snap.Geom.Surface.Plane.#ctor(Snap.Position,Snap.Position,Snap.Position)">
      <summary>Constructs a plane through three points</summary>
      <param name="p0">First point</param>
      <param name="p1">Second point</param>
      <param name="p2">Third point</param>
    </member>
    <member name="M:Snap.Geom.Surface.Plane.#ctor(Snap.Position,Snap.Vector)">
      <summary>Constructs a plane through a given point and normal</summary>
      <param name="point">Point lying on plane</param>
      <param name="normal">Normal vector</param>
    </member>
    <member name="M:Snap.Geom.Surface.Plane.#ctor(Snap.Vector,System.Double)">
      <summary>
            Constructs a plane given normal and distance
            </summary>
      <param name="normal">Normal vector of plane</param>
      <param name="distance">Signed distance from origin to plane, along the normal vector</param>
    </member>
    <member name="M:Snap.Geom.Surface.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Constructs a plane from algebraic coefficients (a*x + b*y + c*z = d)</summary>
      <param name="a">Coefficient of x</param>
      <param name="b">Coefficient of y</param>
      <param name="c">Coefficient of z</param>
      <param name="d">Constant term (on right-hand side)</param>
    </member>
    <member name="P:Snap.Geom.Surface.Plane.D">
      <summary> Signed distance from origin to plane, measured along the plane normal</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Plane.Normal">
      <summary> Normal vector (a unit vector) </summary>
    </member>
    <member name="P:Snap.Geom.Surface.Plane.Origin">
      <summary>Origin of plane : the point at D*Normal</summary>
    </member>
    <member name="T:Snap.Geom.Surface.Revolve">
      <summary>Represents a non-persistent revolved surface -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Revolve.AxisPoint">
      <summary>Axis point of the revolved surface</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Revolve.AxisVector">
      <summary>Axis vector of the revolved surface </summary>
    </member>
    <member name="T:Snap.Geom.Surface.Sphere">
      <summary>Represents a non-persistent spherical surface -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Sphere.Center">
      <summary>Center of the spherical surface</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Sphere.Diameter">
      <summary>Diameter of the spherical surface</summary>
    </member>
    <member name="T:Snap.Geom.Surface.Torus">
      <summary>Represents a non-persistent toroidal surface -- not stored in NX</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Torus.AxisPoint">
      <summary>Axis point of the toroidal surface</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Torus.AxisVector">
      <summary>Axis Vector of the toroidal surface</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Torus.MajorRadius">
      <summary>Major radius of the toroidal surface</summary>
    </member>
    <member name="P:Snap.Geom.Surface.Torus.MinorRadius">
      <summary>Minor radius of the toroidal surface</summary>
    </member>
    <member name="T:Snap.Geom.Transform">
      <summary>
            Class for building and applying NX transformations
            </summary>
    </member>
    <member name="M:Snap.Geom.Transform.Composition(Snap.Geom.Transform,Snap.Geom.Transform)">
      <summary>Forms the composition of two transforms (one followed by the other)</summary>
      <param name="xform1">First transform</param>
      <param name="xform2">Second transform</param>
      <returns>Composition of two transforms (first one followed by second one)</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateReflection(Snap.Geom.Surface.Plane)">
      <summary>Creates a transform that performs reflection through a given plane</summary>
      <param name="plane">The plane of reflection</param>
      <returns>Transform that performs the reflection</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateReflection(Snap.Vector,System.Double)">
      <summary>Creates a transform that performs reflection through a given plane</summary>
      <param name="normal">The normal of the plane (unit vector)</param>
      <param name="d">Signed distance from origin to plane (plane equation is X*Normal = d)</param>
      <returns>Transform that performs the reflection</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateRotation(Snap.Orientation)">
      <summary>Creates a transform that performs rotation defined by an orientation</summary>
      <param name="orientation">The orientation</param>
      <returns>Transform that performs the rotation</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateRotation(Snap.Position,Snap.Vector,System.Double)">
      <summary>Creates a transform that performs rotation around a given axis</summary>
      <param name="basePoint">Point on the axis</param>
      <param name="axis">Vector along the axis</param>
      <param name="angle">Angle of rotation (in degrees)</param>
      <returns>Transform that performs the rotation</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateRotation(Snap.Position,System.Double)">
      <summary>Creates a transform that performs 2D rotation around a point in the XY-plane</summary>
      <param name="basePoint">Point (presumably on the XY-plane</param>
      <param name="angle">Angle of rotation (in degrees)</param>
      <returns>Transform that performs the rotation</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateScale(Snap.Position,System.Double)">
      <summary>Creates a transform that performs a (uniform) scaling operation</summary>
      <param name="basePoint">The basePoint for the scaling operation</param>
      <param name="scaleFactor">The scaling factor</param>
      <returns>Transform that performs the scaling operation</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateScale(Snap.Position,System.Double[])">
      <summary>Creates a transform that performs a (non-uniform) scaling operation</summary>
      <param name="basePoint">The basePoint for the scaling operation</param>
      <param name="scaleFactors">The scaling factors for the X, Y, Z directions</param>
      <returns>Transform that performs the scaling operation</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateTranslation">
      <summary>Creates an identify translation</summary>
      <returns>Transform that performs an identity (null) translation</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateTranslation(Snap.Vector)">
      <summary>Creates a transform that performs translation</summary>
      <param name="v">Translation vector</param>
      <returns>Transform that performs the translation</returns>
    </member>
    <member name="M:Snap.Geom.Transform.CreateTranslation(System.Double,System.Double,System.Double)">
      <summary>Creates a transform that performs translation</summary>
      <param name="dx">Displacement in the X-direction</param>
      <param name="dy">Displacement in the Y-direction</param>
      <param name="dz">Displacement in the Z-direction</param>
      <returns>Transform that performs the translation</returns>
    </member>
    <member name="P:Snap.Geom.Transform.Matrix">
      <summary>Array of 12 doubles (the matrix elements)</summary>
    </member>
    <member name="T:Snap.NX.Arc">
      <summary>
            Represents an NX arc/circle object (interchangeable with <see cref="T:NXOpen.Arc">NXOpen.Arc</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Arc.AxisX">
      <summary>A unit vector along the X-axis of the arc (where angle = 0)</summary>
    </member>
    <member name="P:Snap.NX.Arc.AxisY">
      <summary>A unit vector along the Y-axis of the arc (where angle = 90)</summary>
    </member>
    <member name="P:Snap.NX.Arc.AxisZ">
      <summary>A unit vector along the Z-axis of the arc (normal to the plane of the arc)</summary>
    </member>
    <member name="P:Snap.NX.Arc.Center">
      <summary> The center of the arc (in absolute coordinates)</summary>
    </member>
    <member name="M:Snap.NX.Arc.Copy">
      <summary>Copies an NX.Arc (with a null transform)</summary>
      <returns>A copy of the input arc</returns>
    </member>
    <member name="M:Snap.NX.Arc.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an NX.Arc</summary>
      <param name="xform">Transform to be applied</param>
      <returns>A transformed copy of NX.Arc</returns>
      <exception cref="T:System.ArgumentException">The transform would convert the arc to an ellipse. Please use Curve.Copy instead</exception>
    </member>
    <member name="M:Snap.NX.Arc.Copy(Snap.Geom.Transform,Snap.NX.Arc[])">
      <summary>Transforms/copies an array of NX.Arc objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.Arc array</param>
      <returns>A copy of the input arcs</returns>
      <exception cref="T:System.ArgumentException">The transform would convert the arc to an ellipse. Please use Curve.Copy instead</exception>
    </member>
    <member name="M:Snap.NX.Arc.Copy(Snap.NX.Arc[])">
      <summary>Copies an array of NX.Arc objects (with no transform)</summary>
      <param name="original">Original NX.Arc array</param>
      <returns>A copy of the input arcs</returns>
    </member>
    <member name="P:Snap.NX.Arc.Diameter">
      <summary>The diameter of the arc</summary>
    </member>
    <member name="M:Snap.NX.Arc.Divide(Snap.Geom.Surface.Plane,Snap.Position)">
      <summary>Divide an arc at an intersection with a given plane</summary>
      <param name="geomPlane">A plane to be used to divide the given arc</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Arc.Divide(Snap.NX.Face,Snap.Position)">
      <summary>Divide an arc at an intersection with a given face</summary>
      <param name="face">A face to be used to divide the given arc</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Arc.Divide(Snap.NX.ICurve,Snap.Position)">
      <summary>Divide an arc at an intersection with another curve</summary>
      <param name="boundingCurve">Bounding curve to be used to divide the given arc</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Arc.Divide(System.Double[])">
      <summary>Divide an arc at an array of parameter values</summary>
      <param name="parameters">The parameter values at which the arc should be divided</param>
      <returns>An array of <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> objects</returns>
    </member>
    <member name="P:Snap.NX.Arc.EndAngle">
      <summary> The end angle of the arc (in degrees) </summary>
    </member>
    <member name="P:Snap.NX.Arc.Geometry">
      <summary>The geometric data of the arc</summary>
    </member>
    <member name="P:Snap.NX.Arc.Matrix">
      <summary>The matrix of the arc (an <see cref="T:NXOpen.NXMatrix">NXOpen.NXMatrix</see> object)</summary>
    </member>
    <member name="P:Snap.NX.Arc.NXOpenArc">
      <summary>The enclosed <see cref="T:NXOpen.Arc">NXOpen.Arc</see> object</summary>
    </member>
    <member name="P:Snap.NX.Arc.Orientation">
      <summary>The orientation of the arc</summary>
    </member>
    <member name="P:Snap.NX.Arc.Prototype">
      <summary>
            Returns the prototype arc of this one (if it has one)
            </summary>
    </member>
    <member name="P:Snap.NX.Arc.Radius">
      <summary>The radius of the arc</summary>
    </member>
    <member name="P:Snap.NX.Arc.StartAngle">
      <summary> The start angle of the arc (in degrees) </summary>
    </member>
    <member name="M:Snap.NX.Arc.Trim(System.Double,System.Double)">
      <summary>Trim an arc to a parameter interval</summary>
      <param name="lowerParam">The lower-limit parameter value</param>
      <param name="upperParam">The upper-limit parameter value</param>
    </member>
    <member name="M:Snap.NX.Arc.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Arc tag to a Snap.NX.Arc</summary>
      <param name="nxopenArcTag">The tag of an NXOpen.Arc object to be converted</param>
      <returns>The Snap.NX.Arc object formed by wrapping the NXOpen.Arc having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Arc object</exception>
    </member>
    <member name="T:Snap.NX.Block">
      <summary>
            Represents a Snap.NX.Block feature (interchangeable with <see cref="T:NXOpen.Features.Block">NXOpen.Features.Block</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Block.BlockBuilder">
      <summary>The NXOpen.Features.BlockFeatureBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.Block.Height">
      <summary>The height of the block  (length in the z-direction)</summary>
    </member>
    <member name="P:Snap.NX.Block.Length">
      <summary>The length of the block (length in the x-direction)</summary>
    </member>
    <member name="P:Snap.NX.Block.NXOpenBlock">
      <summary>The enclosed NXOpen.Features.Block object</summary>
    </member>
    <member name="P:Snap.NX.Block.Origin">
      <summary>The position of the origin point of the block</summary>
    </member>
    <member name="P:Snap.NX.Block.Width">
      <summary>The width of the block (length in the y-direction)</summary>
    </member>
    <member name="M:Snap.NX.Block.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Block tag to a Snap.NX.Block</summary>
      <param name="nxopenBlockTag">The tag of an NXOpen.Features.Block object to be converted</param>
      <returns>The Snap.NX.Block object formed by wrapping the NXOpen.Features.Block having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Block object</exception>
    </member>
    <member name="T:Snap.NX.Body">
      <summary>
            Represents a Snap.NX.Body object (interchangeable with <see cref="T:NXOpen.Body">NXOpen.Body</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Body.Box">
      <summary>The bounding box of the body</summary>
    </member>
    <member name="M:Snap.NX.Body.ContainsPoint(Snap.Position)">
      <summary>
            Determine whether a given point is inside the body
            </summary>
      <param name="pt">The point to be </param>
      <returns>True if the given point lies inside (or on a face) of the body</returns>
    </member>
    <member name="M:Snap.NX.Body.Copy">
      <summary>Copies an NX.Body (with no transform)</summary>
      <returns>A copy of the input body</returns>
    </member>
    <member name="M:Snap.NX.Body.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an NX.Body</summary>
      <param name="xform">Transform to be applied</param>
      <returns>A transformed copy of NX.Body</returns>
    </member>
    <member name="M:Snap.NX.Body.Copy(Snap.Geom.Transform,Snap.NX.Body[])">
      <summary>Transforms/copies an array of NX.Body objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.Body array</param>
      <returns>A copy of the input bodies</returns>
    </member>
    <member name="M:Snap.NX.Body.Copy(Snap.NX.Body[])">
      <summary>Copies an array of NX.Body objects (with no transform)</summary>
      <param name="original">Original NX.Body array</param>
      <returns>An array of copies of the input bodies</returns>
    </member>
    <member name="P:Snap.NX.Body.Density">
      <summary>The density of the body</summary>
    </member>
    <member name="P:Snap.NX.Body.Edges">
      <summary>The array of <see cref="T:Snap.NX.Edge">edges</see> in the body</summary>
    </member>
    <member name="P:Snap.NX.Body.Faces">
      <summary>The array of <see cref="T:Snap.NX.Face">faces</see> in the body</summary>
    </member>
    <member name="P:Snap.NX.Body.IsSheetBody">
      <summary>If true, indicates that the body is a sheet</summary>
    </member>
    <member name="P:Snap.NX.Body.IsSolidBody">
      <summary>If true, indicates that the body is a solid</summary>
    </member>
    <member name="P:Snap.NX.Body.NXOpenBody">
      <summary>The enclosed NXOpen.Body object</summary>
    </member>
    <member name="P:Snap.NX.Body.ObjectSubType">
      <summary>Subtypes of NX body</summary>
    </member>
    <member name="P:Snap.NX.Body.Prototype">
      <summary>
            Returns the prototype body of this body (if it has one)
            </summary>
    </member>
    <member name="P:Snap.NX.Body.Shells">
      <summary>The array of <see cref="T:Snap.Topology.Shell">shells</see> in the body</summary>
    </member>
    <member name="P:Snap.NX.Body.Vertices">
      <summary>The array of vertices in the body</summary>
    </member>
    <member name="M:Snap.NX.Body.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Body tag to a Snap.NX.Body</summary>
      <param name="nxopenBodyTag">The tag of an NXOpen.Body object to be converted</param>
      <returns>The Snap.NX.Body object formed by wrapping the NXOpen.Body having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Body object</exception>
    </member>
    <member name="T:Snap.NX.Boolean">
      <summary>
            Represents a Snap.NX.Boolean feature (interchangeable with <see cref="T:NXOpen.Features.BooleanFeature">NXOpen.Features.BooleanFeature</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Boolean.BooleanBuilder">
      <summary>The NXOpen.Features.BooleanBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.Boolean.NXOpenBooleanFeature">
      <summary>The enclosed NXOpen.Features.BooleanFeature object</summary>
    </member>
    <member name="M:Snap.NX.Boolean.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.BooleanFeature tag to a Snap.NX.Boolean</summary>
      <param name="nxopenBooleanTag">The tag of an NXOpen.Features.BooleanFeature object to be converted</param>
      <returns>The Snap.NX.Boolean object formed by wrapping the NXOpen.Features.BooleanFeature having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.BooleanFeature object</exception>
    </member>
    <member name="T:Snap.NX.BoundedPlane">
      <summary>
            Represents a Snap.NX.BoundedPlane feature (interchangeable with <see cref="T:NXOpen.Features.BoundedPlane">NXOpen.Features.BoundedPlane</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.BoundedPlane.BoundedPlaneBuilder">
      <summary>The NXOpen.Features.BooleanBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.BoundedPlane.NXOpenBoundedPlane">
      <summary>The enclosed NXOpen.Features.BoundedPlane object</summary>
    </member>
    <member name="M:Snap.NX.BoundedPlane.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.BoundedPlane tag to a Snap.NX.BoundedPlane</summary>
      <param name="nxopenBoundedPlaneTag">The tag of an NXOpen.Features.BoundedPlane object to be converted</param>
      <returns>The Snap.NX.BoundedPlane object formed by wrapping the NXOpen.Features.BoundedPlane having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.BoundedPlane object</exception>
    </member>
    <member name="T:Snap.NX.Bsurface">
      <summary>
            Represents a Snap.NX.Bsurface object, which is a body with a single face (interchangeable with <see cref="T:NXOpen.Body">NXOpen.Body</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Bsurface.Face">
      <summary>Gets the (one and only) NX.Face of the NX.Bsurface body</summary>
    </member>
    <member name="T:Snap.NX.Category">
      <summary>Represents a layer category object (interchangeable with <see cref="T:NXOpen.Layer.Category">NXOpen.Layer.Category</see>)
            </summary>
    </member>
    <member name="M:Snap.NX.Category.Add(System.Int32[])">
      <summary>Add layers into category</summary>
      <param name="layers">Array of layers to be added</param>
    </member>
    <member name="M:Snap.NX.Category.Delete">
      <summary>Delete this layer category</summary>
    </member>
    <member name="M:Snap.NX.Category.Delete(Snap.NX.Category[])">
      <summary>Deletes an array of layer categories</summary>
      <param name="categories">The categories to delete</param>
    </member>
    <member name="P:Snap.NX.Category.Description">
      <summary>The description of the layer category</summary>
    </member>
    <member name="M:Snap.NX.Category.FindByName(System.String)">
      <summary>Find the category in the work part that has a given name</summary>
      <param name="name">Name of the category</param>
      <returns>The NX.Category object having the given name, or <c>Nothing</c></returns>
    </member>
    <member name="P:Snap.NX.Category.LayerMask">
      <summary>Layer mask indicating which layers belong to this category.</summary>
    </member>
    <member name="P:Snap.NX.Category.Layers">
      <summary>The list of layers contained in the category</summary>
    </member>
    <member name="P:Snap.NX.Category.Name">
      <summary>The name of the layer category</summary>
    </member>
    <member name="P:Snap.NX.Category.NXOpenCategory">
      <summary>The enclosed NXOpen.Layer.Category object</summary>
    </member>
    <member name="P:Snap.NX.Category.NXOpenTag">
      <summary>Get the NXOpen.Tag from this NX.Category</summary>
    </member>
    <member name="M:Snap.NX.Category.Remove(System.Int32[])">
      <summary>Remove layers from category</summary>
      <param name="layers">Array of layers to be removed</param>
      <returns>False if any of the input layers did not belong to the category</returns>
    </member>
    <member name="M:Snap.NX.Category.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Layer.Category tag to a Snap.NX.Category</summary>
      <param name="nxopenCategoryTag">The tag of an NXOpen.Layer.Category object to be converted</param>
      <returns>The Snap.NX.Category object formed by wrapping the NXOpen.Layer.Category having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Layer.Category object</exception>
    </member>
    <member name="T:Snap.NX.Chamfer">
      <summary>
            Represents a Snap.NX.Chamfer feature (interchangeable with <see cref="T:NXOpen.Features.Chamfer">NXOpen.Features.Chamfer</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Chamfer.ChamferBuilder">
      <summary>The NXOpen.Features.ChamferBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.Chamfer.NXOpenChamfer">
      <summary>The enclosed <see cref="T:NXOpen.Features.Chamfer">NXOpen.Features.Chamfer</see> object</summary>
    </member>
    <member name="P:Snap.NX.Chamfer.NXOpenDisplayableObjects">
      <summary>The associated NXOpen.DisplayableObjects array of this NX.Feature.Chamfer</summary>
    </member>
    <member name="M:Snap.NX.Chamfer.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Chamfer tag to a Snap.NX.Chamfer</summary>
      <param name="nxopenChamferTag">The tag of an NXOpen.Features.Chamfer object to be converted</param>
      <returns>The Snap.NX.Chamfer object formed by wrapping the NXOpen.Features.Chamfer having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Chamfer object</exception>
    </member>
    <member name="T:Snap.NX.Component">
      <summary>
            Represents a Snap.NX.Component object (interchangeable with <see cref="T:NXOpen.Assemblies.Component">NXOpen.Assemblies.Component</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Component.Children">
      <summary>The child components of this component</summary>
    </member>
    <member name="P:Snap.NX.Component.Depth">
      <summary>
            The depth of the component in the component tree hierarchy
            </summary>
    </member>
    <member name="P:Snap.NX.Component.Descendants">
      <summary>
            Returns an enumerable collection containing the component itself,
            children, grandchildren, and all other descendents.
            </summary>
    </member>
    <member name="P:Snap.NX.Component.IsLeaf">
      <summary>
            If True, indicates that this component is a "leaf" node
            </summary>
    </member>
    <member name="P:Snap.NX.Component.IsRoot">
      <summary>
            If True, indicates that this component is a "root" node
            </summary>
    </member>
    <member name="P:Snap.NX.Component.Leaves">
      <summary>
            Returns an enumerable collection containing all the "leaf" node 
            components descended from this component.
            </summary>
    </member>
    <member name="P:Snap.NX.Component.NXOpenComponent">
      <summary>The enclosed NXOpen.Assemblies.Component object</summary>
    </member>
    <member name="P:Snap.NX.Component.Orientation">
      <summary>
            The orientation of the component
            </summary>
    </member>
    <member name="P:Snap.NX.Component.Parent">
      <summary>The parent component of this component</summary>
    </member>
    <member name="P:Snap.NX.Component.Position">
      <summary>
            The position of the component
            </summary>
    </member>
    <member name="P:Snap.NX.Component.Prototype">
      <summary>
            The prototype part of this component
            </summary>
    </member>
    <member name="M:Snap.NX.Component.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Assemblies.Component tag to a Snap.NX.Component</summary>
      <param name="nxopenComponentTag">The tag of an NXOpen.Assemblies.Component object to be converted</param>
      <returns>The Snap.NX.Component object formed by wrapping the NXOpen.Assemblies.Component having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Assemblies.Component object</exception>
    </member>
    <member name="T:Snap.NX.Cone">
      <summary>
            Represents a Snap.NX.Cone feature (interchangeable with <see cref="T:NXOpen.Features.Cone">NXOpen.Features.Cone</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Cone.AxisPoint">
      <summary>The axis point of the cone</summary>
    </member>
    <member name="P:Snap.NX.Cone.AxisVector">
      <summary>The cone axis vector</summary>
    </member>
    <member name="P:Snap.NX.Cone.BaseArc">
      <summary>The circle at the base of the cone, with center at the cone's AxisPoint</summary>
    </member>
    <member name="P:Snap.NX.Cone.BaseDiameter">
      <summary>The cone base diameter</summary>
    </member>
    <member name="P:Snap.NX.Cone.ConeBuilder">
      <summary>The NXOpen.Features.ConeBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.Cone.HalfAngle">
      <summary>The cone half-angle, in degrees.</summary>
    </member>
    <member name="P:Snap.NX.Cone.Height">
      <summary>The cone height</summary>
    </member>
    <member name="P:Snap.NX.Cone.NXOpenCone">
      <summary>The enclosed NXOpen.Features.Cone object</summary>
    </member>
    <member name="P:Snap.NX.Cone.TopArc">
      <summary>The circle at the top of the cone (the other end from the BaseArc)</summary>
    </member>
    <member name="P:Snap.NX.Cone.TopDiameter">
      <summary>The cone top diameter</summary>
    </member>
    <member name="M:Snap.NX.Cone.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Cone tag to a Snap.NX.Cone</summary>
      <param name="nxopenConeTag">The tag of an NXOpen.Features.Cone object to be converted</param>
      <returns>The Snap.NX.Cone object formed by wrapping the NXOpen.Features.Cone having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Cone object</exception>
    </member>
    <member name="T:Snap.NX.CoordinateSystem">
      <summary>
            Represents a Snap.NX.CoordinateSystem object (interchangeable with <see cref="T:NXOpen.CoordinateSystem">NXOpen.CoordinateSystem</see>)   
            </summary>
    </member>
    <member name="P:Snap.NX.CoordinateSystem.AxisX">
      <summary>X-axis of coordinate system</summary>
    </member>
    <member name="P:Snap.NX.CoordinateSystem.AxisY">
      <summary>Y-axis of coordinate system</summary>
    </member>
    <member name="P:Snap.NX.CoordinateSystem.AxisZ">
      <summary>Z-axis of coordinate system</summary>
    </member>
    <member name="M:Snap.NX.CoordinateSystem.Copy">
      <summary>Copies an NX.CoordinateSystem (with a null transform)</summary>
      <returns>A copy of the input CoordinateSystem</returns>
    </member>
    <member name="M:Snap.NX.CoordinateSystem.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an NX.CoordinateSystem</summary>
      <param name="xform">Transform to be applied</param>
      <returns>A transformed copy of NX.CoordinateSystem</returns>
    </member>
    <member name="M:Snap.NX.CoordinateSystem.MapAcsToWcs(Snap.Position)">
      <summary>Map a position from Absolute coordinates to Work coordinates</summary>
      <param name="absCoords">The coordinates of the given point wrt the Absolute Coordinate System (ACS)</param>
      <returns>The coordinates of the given point wrt the Work Coordinate System (WCS)</returns>
    </member>
    <member name="M:Snap.NX.CoordinateSystem.MapAcsToWcs(Snap.Vector)">
      <summary>Map a vector from Absolute coordinates to Work coordinates</summary>
      <param name="absVector">The components of the given vector wrt the Absolute Coordinate System (ACS)</param>
      <returns>The components of the given vector wrt the Work Coordinate System (WCS)</returns>
    </member>
    <member name="M:Snap.NX.CoordinateSystem.MapCsysToCsys(Snap.Position,Snap.NX.CoordinateSystem,Snap.NX.CoordinateSystem)">
      <summary>Map a position from one coordinate system to another</summary>
      <param name="inputCoords">The coordinates of the given point wrt the input coordinate system</param>
      <param name="inputCsys">The input coordinate system</param>
      <param name="outputCsys">The output coordinate system</param>
      <returns>The coordinates of the given point wrt the output coordinate system</returns>
    </member>
    <member name="M:Snap.NX.CoordinateSystem.MapCsysToCsys(Snap.Vector,Snap.NX.CoordinateSystem,Snap.NX.CoordinateSystem)">
      <summary>Map a vector from one coordinate system to another</summary>
      <param name="inputVector">The components of the given vector wrt the input coordinate system</param>
      <param name="inputCsys">The input coordinate system</param>
      <param name="outputCsys">The output coordinate system</param>
      <returns>The components of the given vector wrt the output coordinate system</returns>
    </member>
    <member name="M:Snap.NX.CoordinateSystem.MapWcsToAcs(Snap.Position)">
      <summary>Map a position from Work coordinates to Absolute coordinates</summary>
      <param name="workCoords">The coordinates of the given point wrt the Work Coordinate System (WCS)</param>
      <returns>The coordinates of the given point wrt the Absolute Coordinate System (ACS)</returns>
    </member>
    <member name="M:Snap.NX.CoordinateSystem.MapWcsToAcs(Snap.Vector)">
      <summary>Map a vector from Work coordinates to Absolute coordinates</summary>
      <param name="workVector">The components of the given vector wrt the Work Coordinate System (WCS)</param>
      <returns>The components of the given vector wrt the Absolute Coordinate System (ACS)</returns>
    </member>
    <member name="P:Snap.NX.CoordinateSystem.Matrix">
      <summary>The NX.Matrix object referred to by the coordinate system</summary>
    </member>
    <member name="P:Snap.NX.CoordinateSystem.NXOpenCoordinateSystem">
      <summary>The enclosed NXOpen.CoordinateSystem object</summary>
    </member>
    <member name="P:Snap.NX.CoordinateSystem.ObjectSubType">
      <summary>Subtypes of NX CoordinateSystem</summary>
    </member>
    <member name="P:Snap.NX.CoordinateSystem.Orientation">
      <summary>Orientation of coordinate system</summary>
    </member>
    <member name="P:Snap.NX.CoordinateSystem.Origin">
      <summary>The location of the origin of the coordinate system</summary>
    </member>
    <member name="P:Snap.NX.CoordinateSystem.Prototype">
      <summary>
            Returns the prototype coordinate system of this one (if it has one)
            </summary>
    </member>
    <member name="M:Snap.NX.CoordinateSystem.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.CoordinateSystem tag to a Snap.NX.CoordinateSystem</summary>
      <param name="nxopenCoordinateSystemTag">The tag of an NXOpen.CoordinateSystem object to be converted</param>
      <returns>The Snap.NX.CoordinateSystem object formed by wrapping the NXOpen.CoordinateSystem having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.CoordinateSystem object</exception>
    </member>
    <member name="T:Snap.NX.Curve">
      <summary>
            Represents a Snap.NX.Curve object (interchangeable with <see cref="T:NXOpen.Curve">NXOpen.Curve</see>)   
            </summary>
    </member>
    <member name="M:Snap.NX.Curve.#ctor(NXOpen.Tag)">
      <summary>Construct an NX.Curve, given an NXOpen.Tag</summary>
      <param name="objectTag">An NXOpen.Tag</param>
    </member>
    <member name="P:Snap.NX.Curve.ArcLength">
      <summary>The arclength of the curve</summary>
    </member>
    <member name="M:Snap.NX.Curve.Binormal(System.Double)">
      <summary>Calculates the unit binormal at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Unit binormal</returns>
    </member>
    <member name="P:Snap.NX.Curve.Box">
      <summary>The 3D box that encloses the curve</summary>
    </member>
    <member name="M:Snap.NX.Curve.Copy">
      <summary>Copies an NX.Curve (with a null transform)</summary>
      <returns>A copy of the input curve</returns>
    </member>
    <member name="M:Snap.NX.Curve.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an NX.Curve</summary>
      <param name="xform">Transform to be applied</param>
      <returns>A transformed copy of NX.Curve</returns>
    </member>
    <member name="M:Snap.NX.Curve.Copy(Snap.Geom.Transform,Snap.NX.Curve[])">
      <summary>Transforms/copies an array of NX.Curve objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.Curve array</param>
      <returns>A copy of the input curves</returns>
    </member>
    <member name="M:Snap.NX.Curve.Copy(Snap.NX.Curve[])">
      <summary>Copies an array of NX.Curve (with no transform)</summary>
      <param name="original">Original NX.Curve array</param>
      <returns>A copy of the input curves</returns>
    </member>
    <member name="M:Snap.NX.Curve.Curvature(System.Double)">
      <summary>Calculates curvature at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Curvature value (always non-negative)</returns>
    </member>
    <member name="M:Snap.NX.Curve.Derivative(System.Double)">
      <summary>Calculates the first derivative vector on the curve at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>First derivative vector (not unitized)</returns>
    </member>
    <member name="M:Snap.NX.Curve.Derivatives(System.Double,System.Int32)">
      <summary>Calculates curve derivatives (and position) at a given parameter value</summary>
      <param name="value">Parameter at which to evaluate</param>
      <param name="order">Order of highest derivative returned (zero for position alone)</param>
      <returns>Array of derivative vectors -- [0] is position, [1] is first derivative, etc.</returns>
    </member>
    <member name="M:Snap.NX.Curve.Divide(Snap.Geom.Surface.Plane,Snap.Position)">
      <summary>Divide a curve at its intersection with a given plane</summary>
      <param name="geomPlane">A plane to be used to divide the given curve</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Curve">Snap.NX.Curve</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Curve.Divide(Snap.NX.Face,Snap.Position)">
      <summary>Divide a curve at its intersection with a given face</summary>
      <param name="face">A face to be used to divide the given curve</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Curve">Snap.NX.Curve</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Curve.Divide(Snap.NX.ICurve,Snap.Position)">
      <summary>Divide a curve at its intersection with another curve</summary>
      <param name="boundingCurve">Bounding curve to be used to divide the given curve</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Curve">Snap.NX.Curve</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Curve.Divide(System.Double[])">
      <summary>Divide a curve at an array of parameter values</summary>
      <param name="parameters">The parameter values at which the curve should be divided</param>
      <returns>An array of <see cref="T:Snap.NX.Curve">Snap.NX.Curve</see> objects</returns>
    </member>
    <member name="P:Snap.NX.Curve.EndPoint">
      <summary>The end point of the curve</summary>
    </member>
    <member name="P:Snap.NX.Curve.IsClosed">
      <summary>If true, indicates that the curve is closed (start-point = end-point)</summary>
    </member>
    <member name="P:Snap.NX.Curve.MaxU">
      <summary>The upper-limit parameter value (at the end-point of the curve)</summary>
    </member>
    <member name="P:Snap.NX.Curve.MinU">
      <summary>The lower-limit parameter value (at the start-point of the curve)</summary>
    </member>
    <member name="M:Snap.NX.Curve.Normal(System.Double)">
      <summary>Calculates unit normal at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Unit normal vector</returns>
    </member>
    <member name="P:Snap.NX.Curve.NXOpenCurve">
      <summary>The enclosed NXOpen.Curve object</summary>
    </member>
    <member name="P:Snap.NX.Curve.NXOpenDisplayableObject">
      <summary>The associated NXOpen.DisplayableObject of this NX.Curve</summary>
    </member>
    <member name="P:Snap.NX.Curve.NXOpenICurve">
      <summary>The enclosed NXOpen.ICurve object</summary>
    </member>
    <member name="P:Snap.NX.Curve.NXOpenTag">
      <summary>Get the NXOpen.Tag from this NX.Curve</summary>
    </member>
    <member name="M:Snap.NX.Curve.Parameter(Snap.Position)">
      <summary>Calculates the parameter value at a point on the curve</summary>
      <param name="point">The point</param>
      <returns>Parameter value at the point (not unitized)</returns>
    </member>
    <member name="M:Snap.NX.Curve.Parameter(System.Double)">
      <summary>Calculates the parameter value at a fractional arclength value along a curve</summary>
      <param name="arclengthFraction">Fractional arclength along the curve</param>
      <returns>Parameter value</returns>
    </member>
    <member name="M:Snap.NX.Curve.Parameter(System.Double,System.Double)">
      <summary>Calculates the parameter value defined by an arclength step along a curve</summary>
      <param name="baseParameter">The curve parameter value at the starting location</param>
      <param name="arclength">The arclength increment along the curve (the length of our step)</param>
      <returns>The curve parameter value at the far end of the step</returns>
    </member>
    <member name="P:Snap.NX.Curve.Plane">
      <summary>A plane containing the given curve</summary>
    </member>
    <member name="M:Snap.NX.Curve.Position(System.Double)">
      <summary>Calculates a point on the curve at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>The point corresponding to the given parameter value</returns>
    </member>
    <member name="M:Snap.NX.Curve.PositionArray(System.Double)">
      <summary>Calculate an array of positions on a curve corresponding to a given chord-height tolerance</summary>
      <param name="chordalTolerance">The chord-height tolerance</param>
      <returns>An array of positions on the curve</returns>
    </member>
    <member name="M:Snap.NX.Curve.PositionArray(System.Double,System.Double,System.Double)">
      <summary>Calculates an array of positions on a curve corresponding to given tolerances</summary>
      <param name="chordalTolerance">The chord-height tolerance</param>
      <param name="angularTolerance">The angular tolerance (in degrees)</param>
      <param name="stepTolerance">The chord-length tolerance</param>
      <returns>An array of positions on the curve</returns>
    </member>
    <member name="M:Snap.NX.Curve.PositionArray(System.Double[])">
      <summary>Calculates points on a curve at given parameter values</summary>
      <param name="values">Parameter values</param>
      <returns>The points corresponding to the given parameter values</returns>
    </member>
    <member name="M:Snap.NX.Curve.PositionArray(System.Int32)">
      <summary>Calculates an arrays of positions at equal arclengths on a curve</summary>
      <param name="pointCount">The number of positions to be calculated on the curve</param>
      <returns>An array of positions on the curve</returns>
    </member>
    <member name="P:Snap.NX.Curve.Prototype">
      <summary>
            Returns the prototype curve of this curve (if it has one)
            </summary>
    </member>
    <member name="P:Snap.NX.Curve.StartPoint">
      <summary>The start point of the curve</summary>
    </member>
    <member name="M:Snap.NX.Curve.Tangent(System.Double)">
      <summary>Calculates the unit tangent vector at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Unit tangent vector</returns>
    </member>
    <member name="M:Snap.NX.Curve.ToSpline">
      <summary>Converts the curve to a spline</summary>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="M:Snap.NX.Curve.Trim(System.Double,System.Double)">
      <summary>Trim a curve to a parameter interval</summary>
      <param name="lowerParam">The lower-limit parameter value</param>
      <param name="upperParam">The upper-limit parameter value</param>
    </member>
    <member name="M:Snap.NX.Curve.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Curve tag to a Snap.NX.Curve</summary>
      <param name="nxopenCurveTag">The tag of an NXOpen.Curve object to be converted</param>
      <returns>The Snap.NX.Curve object formed by wrapping the NXOpen.Curve having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Curve object</exception>
    </member>
    <member name="T:Snap.NX.Cylinder">
      <summary>
            Represents a Snap.NX.Cylinder feature (interchangeable with <see cref="T:NXOpen.Features.Cylinder">NXOpen.Features.Cylinder</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Cylinder.AxisPoint">
      <summary>The axis point of the cylinder</summary>
    </member>
    <member name="P:Snap.NX.Cylinder.AxisVector">
      <summary>The axis vector of the cylinder</summary>
    </member>
    <member name="P:Snap.NX.Cylinder.CylinderBuilder">
      <summary>The NXOpen.Features.CylinderBuilder object</summary>
    </member>
    <member name="P:Snap.NX.Cylinder.Diameter">
      <summary>The cylinder diameter</summary>
    </member>
    <member name="P:Snap.NX.Cylinder.Height">
      <summary>The cylinder height (must be positive)</summary>
    </member>
    <member name="P:Snap.NX.Cylinder.NXOpenCylinder">
      <summary>The enclosed NXOpen.Features.Cylinder object</summary>
    </member>
    <member name="M:Snap.NX.Cylinder.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Cylinder tag to a Snap.NX.Cylinder</summary>
      <param name="nxopenCylinderTag">The tag of an NXOpen.Features.Cylinder object to be converted</param>
      <returns>The Snap.NX.Cylinder object formed by wrapping the NXOpen.Features.Cylinder having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Cylinder object</exception>
    </member>
    <member name="T:Snap.NX.DatumAxis">
      <summary>Represents a Snap.NX.DatumAxis object (interchangeable with <see cref="T:NXOpen.Features.DatumAxisFeature">NXOpen.Features.DatumAxisFeature</see>)</summary>
    </member>
    <member name="P:Snap.NX.DatumAxis.DatumAxisBuilder">
      <summary>The NXOpen.Features.DatumAxisBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.DatumAxis.Direction">
      <summary>The direction vector of the datum axis (a unit vector)</summary>
    </member>
    <member name="P:Snap.NX.DatumAxis.EndPoint">
      <summary>The end point of the axis</summary>
    </member>
    <member name="P:Snap.NX.DatumAxis.NXOpenDatumAxisFeature">
      <summary>The enclosed NXOpen.Features.DatumAxisFeature object</summary>
    </member>
    <member name="P:Snap.NX.DatumAxis.NXOpenDisplayableObjects">
      <summary>The associated NXOpen.DisplayableObjects array of this NX.Feature.DatumAxis</summary>
    </member>
    <member name="P:Snap.NX.DatumAxis.ObjectType">
      <summary>The type of the object</summary>
    </member>
    <member name="P:Snap.NX.DatumAxis.Origin">
      <summary>The origin of the datum axis</summary>
    </member>
    <member name="P:Snap.NX.DatumAxis.StartPoint">
      <summary>The start point of the axis</summary>
    </member>
    <member name="M:Snap.NX.DatumAxis.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.DatumAxisFeature tag to a Snap.NX.DatumAxis</summary>
      <param name="nxopenDatumAxisTag">The tag of an NXOpen.Features.DatumAxisFeature object to be converted</param>
      <returns>The Snap.NX.DatumAxis object formed by wrapping the NXOpen.Features.DatumAxisFeature having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.DatumAxisFeature object</exception>
    </member>
    <member name="T:Snap.NX.DatumAxis.CurveOrientations">
      <summary>Available orientation options when creating a Datum Axis at a point on a curve</summary>
    </member>
    <member name="F:Snap.NX.DatumAxis.CurveOrientations.Tangent">
      <summary>Along the tangent vector of the curve at the point</summary>
    </member>
    <member name="F:Snap.NX.DatumAxis.CurveOrientations.Normal">
      <summary>Along the normal vector of the curve at the point</summary>
    </member>
    <member name="F:Snap.NX.DatumAxis.CurveOrientations.Binormal">
      <summary>Along the binormal vector of the curve at the point</summary>
    </member>
    <member name="T:Snap.NX.DatumCsys">
      <summary>Represents a Snap.NX.DatumCsys object (interchangeable with <see cref="T:NXOpen.Features.DatumCsys">NXOpen.Features.DatumCsys</see>)</summary>
    </member>
    <member name="P:Snap.NX.DatumCsys.AxisX">
      <summary>X-axis of datum csys</summary>
    </member>
    <member name="P:Snap.NX.DatumCsys.AxisY">
      <summary>Y-axis of datum csys</summary>
    </member>
    <member name="P:Snap.NX.DatumCsys.AxisZ">
      <summary>Z-axis of coordinate system</summary>
    </member>
    <member name="P:Snap.NX.DatumCsys.DatumCsysBuilder">
      <summary>The NXOpen.Features.DatumCsysBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.DatumCsys.Matrix">
      <summary>The NX.Matrix object referred to by the datum csys</summary>
    </member>
    <member name="P:Snap.NX.DatumCsys.NXOpenDatumCsys">
      <summary>The enclosed NXOpen.Features.DatumCsys object</summary>
    </member>
    <member name="P:Snap.NX.DatumCsys.NXOpenDisplayableObjects">
      <summary>The associated NXOpen.DisplayableObjects array of this NX.Feature.DatumCsys</summary>
    </member>
    <member name="P:Snap.NX.DatumCsys.Orientation">
      <summary>Orientation of coordinate system</summary>
    </member>
    <member name="P:Snap.NX.DatumCsys.Origin">
      <summary>The location of the origin of the coordinate system</summary>
    </member>
    <member name="M:Snap.NX.DatumCsys.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.DatumCsys tag to a Snap.NX.DatumCsys</summary>
      <param name="nxopenDatumCsysTag">The tag of an NXOpen.Features.DatumCsys object to be converted</param>
      <returns>The Snap.NX.DatumCsys object formed by wrapping the NXOpen.Features.DatumCsys having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.DatumCsys object</exception>
    </member>
    <member name="T:Snap.NX.DatumPlane">
      <summary>
            Represents a Snap.NX.DatumPlane object (interchangeable with <see cref="T:NXOpen.Features.DatumPlaneFeature">NXOpen.Features.DatumPlaneFeature</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.DatumPlane.CornerPoints">
      <summary>The corner points the datum plane</summary>
    </member>
    <member name="P:Snap.NX.DatumPlane.DatumPlaneBuilder">
      <summary>The NXOpen.Features.DatumPlaneBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.DatumPlane.Normal">
      <summary>The normal vector of the datum plane</summary>
    </member>
    <member name="P:Snap.NX.DatumPlane.NXOpenDatumPlaneFeature">
      <summary>The enclosed NXOpen.Features.DatumPlaneFeature object</summary>
    </member>
    <member name="P:Snap.NX.DatumPlane.NXOpenDisplayableObjects">
      <summary>The associated NXOpen.DisplayableObjects array of this NX.Feature.DatumPlane</summary>
    </member>
    <member name="P:Snap.NX.DatumPlane.ObjectType">
      <summary>The type of the object</summary>
    </member>
    <member name="P:Snap.NX.DatumPlane.Origin">
      <summary>The origin of the datum plane</summary>
    </member>
    <member name="M:Snap.NX.DatumPlane.ReverseDirection">
      <summary>Reverse the direction of the plane. The default direction is the normal of the plane.</summary>
    </member>
    <member name="P:Snap.NX.DatumPlane.Translucency">
      <summary>The translucency of the feature</summary>
    </member>
    <member name="M:Snap.NX.DatumPlane.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.DatumPlaneFeature tag to a Snap.NX.DatumPlane</summary>
      <param name="nxopenDatumPlaneTag">The tag of an NXOpen.Features.DatumPlaneFeature object to be converted</param>
      <returns>The Snap.NX.DatumPlane object formed by wrapping the NXOpen.Features.DatumPlaneFeature having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.DatumPlaneFeature object</exception>
    </member>
    <member name="T:Snap.NX.Edge">
      <summary>
            Represents a Snap.NX.Edge object (interchangeable with <see cref="T:NXOpen.Edge">NXOpen.Edge</see>)   
            </summary>
    </member>
    <member name="P:Snap.NX.Edge.ArcLength">
      <summary>The arclength of the edge</summary>
    </member>
    <member name="M:Snap.NX.Edge.Binormal(System.Double)">
      <summary>Calculates the unit binormal at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Unit binormal</returns>
    </member>
    <member name="P:Snap.NX.Edge.Body">
      <summary>The body on which the edge lies</summary>
    </member>
    <member name="P:Snap.NX.Edge.Box">
      <summary>The 3D box that encloses the edge</summary>
    </member>
    <member name="M:Snap.NX.Edge.Convexity(System.Double)">
      <summary>The convexity across this edge</summary>
      <param name="angleTolerance">Angular tolerance, in degrees</param>
      <returns>The convexity</returns>
    </member>
    <member name="M:Snap.NX.Edge.Curvature(System.Double)">
      <summary>Calculates curvature at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Curvature value (always non-negative)</returns>
    </member>
    <member name="M:Snap.NX.Edge.Derivative(System.Double)">
      <summary>Calculates the first derivative vector on the edge at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>First derivative vector (not unitized)</returns>
    </member>
    <member name="M:Snap.NX.Edge.Derivatives(System.Double,System.Int32)">
      <summary>Calculates edge derivatives (and position) at a given parameter value</summary>
      <param name="value">Parameter at which to evaluate</param>
      <param name="order">Order of highest derivative returned (zero for position alone)</param>
      <returns>Array of derivative vectors -- [0] is position, [1] is first derivative, etc.</returns>
    </member>
    <member name="P:Snap.NX.Edge.EndPoint">
      <summary>The end point of the edge</summary>
    </member>
    <member name="P:Snap.NX.Edge.Faces">
      <summary>The faces adjacent to the edge</summary>
    </member>
    <member name="P:Snap.NX.Edge.Fins">
      <summary>The fins of the edge</summary>
    </member>
    <member name="P:Snap.NX.Edge.IsClosed">
      <summary>The closed state of edge</summary>
    </member>
    <member name="P:Snap.NX.Edge.MaxU">
      <summary>The upper u-value -- the parameter value at the end-point of the edge</summary>
    </member>
    <member name="P:Snap.NX.Edge.MinU">
      <summary>The lower u-value -- the parameter value at the start-point of the edge</summary>
    </member>
    <member name="M:Snap.NX.Edge.Normal(System.Double)">
      <summary>Calculates unit normal at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Unit normal vector</returns>
    </member>
    <member name="P:Snap.NX.Edge.NXOpenDisplayableObject">
      <summary>The associated NXOpen.DisplayableObject of this NX.Edge</summary>
    </member>
    <member name="P:Snap.NX.Edge.NXOpenEdge">
      <summary>The enclosed NXOpen.Edge object</summary>
    </member>
    <member name="P:Snap.NX.Edge.NXOpenICurve">
      <summary>The enclosed NXOpen.ICurve object</summary>
    </member>
    <member name="P:Snap.NX.Edge.NXOpenTag">
      <summary>Get the NXOpen.Tag from this NX.Edge</summary>
    </member>
    <member name="P:Snap.NX.Edge.ObjectSubType">
      <summary>The subtype of the edge</summary>
    </member>
    <member name="P:Snap.NX.Edge.ObjectType">
      <summary>The type of the object</summary>
    </member>
    <member name="M:Snap.NX.Edge.Parameter(Snap.Position)">
      <summary>Calculates the parameter value at a point on the edge</summary>
      <param name="point">The point</param>
      <returns>Parameter value at the point</returns>
    </member>
    <member name="M:Snap.NX.Edge.Parameter(System.Double)">
      <summary>Calculates the parameter value at a fractional arclength value along an edge</summary>
      <param name="arclengthFraction">Fractional arclength along the edge</param>
      <returns>Parameter value</returns>
    </member>
    <member name="M:Snap.NX.Edge.Parameter(System.Double,System.Double)">
      <summary>Calculates the parameter value defined by an arclength step along an edge</summary>
      <param name="baseParameter">The curve parameter value at the starting location</param>
      <param name="arclength">The arclength increment along the edge (the length of our step)</param>
      <returns>The curve parameter value at the far end of the step</returns>
    </member>
    <member name="P:Snap.NX.Edge.Plane">
      <summary>A plane containing the given edge</summary>
    </member>
    <member name="M:Snap.NX.Edge.Position(System.Double)">
      <summary>Calculates a point on the edge at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Point corresponding to the given parameter value</returns>
    </member>
    <member name="M:Snap.NX.Edge.PositionArray(System.Double)">
      <summary>Calculates an array of positions on an edge corresponding to a given chord-height tolerance</summary>
      <param name="chordalTolerance">The chord-height tolerance</param>
      <returns>An array of positions on the edge</returns>
    </member>
    <member name="M:Snap.NX.Edge.PositionArray(System.Double,System.Double,System.Double)">
      <summary>Calculates an array of positions on an edge corresponding to given tolerances</summary>
      <param name="chordalTolerance">The chord-height tolerance</param>
      <param name="angularTolerance">The angular tolerance (in degrees)</param>
      <param name="stepTolerance">The chord-length tolerance</param>
      <returns>An array of positions on the edge</returns>
    </member>
    <member name="M:Snap.NX.Edge.PositionArray(System.Int32)">
      <summary>Calculates an arrays of positions at equal arclengths on an edge</summary>
      <param name="pointCount">The number of positions to be calculated on the edge</param>
      <returns>An array of positions on the edge</returns>
    </member>
    <member name="P:Snap.NX.Edge.Prototype">
      <summary>
            Returns the prototype edge of this edge (if it has one)
            </summary>
    </member>
    <member name="P:Snap.NX.Edge.Shell">
      <summary>The shell that the edge belongs to</summary>
    </member>
    <member name="P:Snap.NX.Edge.StartPoint">
      <summary>The start point of the edge</summary>
    </member>
    <member name="M:Snap.NX.Edge.Tangent(System.Double)">
      <summary>Calculates the unit tangent vector at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Unit tangent vector</returns>
    </member>
    <member name="M:Snap.NX.Edge.ToCurve">
      <summary>Creates a curve that replicates the edge</summary>
      <returns>A <see cref="T:Snap.NX.Curve">Snap.NX.Curve</see> object</returns>
    </member>
    <member name="M:Snap.NX.Edge.ToSpline">
      <summary>Creates a spline that replicates the edge</summary>
      <returns>A <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> object</returns>
    </member>
    <member name="P:Snap.NX.Edge.Vertices">
      <summary>Gets the vertices of the edge</summary>
    </member>
    <member name="M:Snap.NX.Edge.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Edge tag to a Snap.NX.Edge</summary>
      <param name="nxopenEdgeTag">The tag of an NXOpen.Edge object to be converted</param>
      <returns>The Snap.NX.Edge object formed by wrapping the NXOpen.Edge having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Edge object</exception>
    </member>
    <member name="T:Snap.NX.Edge.Arc">
      <summary>Represents a Snap.NX.Edge.Arc object</summary>
    </member>
    <member name="P:Snap.NX.Edge.Arc.Geometry">
      <summary>Geometry data of the edge</summary>
    </member>
    <member name="M:Snap.NX.Edge.Arc.ToArc">
      <summary>
            Creates an arc that replicates the edge
            </summary>
      <returns>A <see cref="T:Snap.NX.Arc">Snap.NX.Arc</see> object</returns>
    </member>
    <member name="T:Snap.NX.Edge.Ellipse">
      <summary>Represents a Snap.NX.Edge.Ellipse object</summary>
    </member>
    <member name="P:Snap.NX.Edge.Ellipse.Geometry">
      <summary>Geometry data of the edge</summary>
    </member>
    <member name="M:Snap.NX.Edge.Ellipse.ToEllipse">
      <summary>
            Creates an ellipse that replicates the edge
            </summary>
      <returns>A <see cref="T:Snap.NX.Ellipse">Snap.NX.Ellipse</see> object</returns>
    </member>
    <member name="T:Snap.NX.Edge.Line">
      <summary>Represents a Snap.NX.Edge.Line object</summary>
    </member>
    <member name="P:Snap.NX.Edge.Line.Geometry">
      <summary>Geometry data of the edge</summary>
    </member>
    <member name="M:Snap.NX.Edge.Line.ToLine">
      <summary>
            Creates a line that replicates the edge
            </summary>
      <returns>A <see cref="T:Snap.NX.Line">Snap.NX.Line</see> object</returns>
    </member>
    <member name="T:Snap.NX.Edge.Spline">
      <summary>Represents a Snap.NX.Edge.Spline object</summary>
    </member>
    <member name="P:Snap.NX.Edge.Spline.Geometry">
      <summary>Geometry data of the edge</summary>
    </member>
    <member name="T:Snap.NX.EdgeBlend">
      <summary>
            Represents a Snap.NX.EdgeBlend feature (interchangeable with <see cref="T:NXOpen.Features.EdgeBlend">NXOpen.Features.EdgeBlend</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.EdgeBlend.EdgeBlendBuilder">
      <summary>The NXOpen.Features.EdgeBlendBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.EdgeBlend.NXOpenDisplayableObjects">
      <summary>The associated NXOpen.DisplayableObjects array of this NX.Feature.EdgeBlend</summary>
    </member>
    <member name="P:Snap.NX.EdgeBlend.NXOpenEdgeBlend">
      <summary>The enclosed <see cref="T:NXOpen.Features.EdgeBlend">NXOpen.Features.EdgeBlend</see> object</summary>
    </member>
    <member name="P:Snap.NX.EdgeBlend.Radius">
      <summary>The radius of the blend</summary>
    </member>
    <member name="M:Snap.NX.EdgeBlend.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.EdgeBlend tag to a Snap.NX.EdgeBlend</summary>
      <param name="nxopenEdgeBlendTag">The tag of an NXOpen.Features.EdgeBlend object to be converted</param>
      <returns>The Snap.NX.EdgeBlend object formed by wrapping the NXOpen.Features.EdgeBlend having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.EdgeBlend object</exception>
    </member>
    <member name="T:Snap.NX.EdgeConvexity">
      <summary>Describes the convexity across an edge (the angle between the faces that meet at the edge)</summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.Convex">
      <summary>The edge is not smooth, and the material surrounding it spans less than 180 degrees.</summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.Concave">
      <summary>The edge is not smooth, and the material surrounding it spans more than 180 degrees.</summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.SmoothFlat">
      <summary>The edge is smooth, and the adjacent faces have zero curvature along the edge.</summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.SmoothConvex">
      <summary>The edge is smooth, and the adjacent faces are both convex along the edge.</summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.SmoothConcave">
      <summary>The edge is smooth, and the adjacent faces are both concave along the edge.</summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.SmoothInflection">
      <summary>The edge is smooth, and the adjacent faces have opposite convexity along the edge 
            (one is convex and the other is concave).</summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.SmoothVariable">
      <summary>The edge is smooth, and the adjacent faces have different convexity properties at
            different points along the edge. </summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.KnifeConvex">
      <summary>The surface normals are anti-parallel and the sum of the curvatures is non-negative.</summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.KnifeConcave">
      <summary>The surface normals are anti-parallel and the sum of the curvatures is non-positive.</summary>
    </member>
    <member name="F:Snap.NX.EdgeConvexity.Variable">
      <summary>The convexity/concavity  varies along the edge. </summary>
    </member>
    <member name="T:Snap.NX.Ellipse">
      <summary>
            Represents a Snap.NX.Ellipse object (interchangeable with <see cref="T:NXOpen.Ellipse">NXOpen.Ellipse</see>)   
            </summary>
    </member>
    <member name="P:Snap.NX.Ellipse.AxisX">
      <summary>A unit vector along the X-axis of the ellipse (where angle = 0)</summary>
    </member>
    <member name="P:Snap.NX.Ellipse.AxisY">
      <summary>A unit vector along the Y-axis of the ellipse (where angle = 90)</summary>
    </member>
    <member name="P:Snap.NX.Ellipse.AxisZ">
      <summary>A unit vector along the Z-axis of the ellipse (normal to the plane of the ellipse)</summary>
    </member>
    <member name="P:Snap.NX.Ellipse.Center">
      <summary> Center of ellipse (in absolute coordinates)</summary>
    </member>
    <member name="M:Snap.NX.Ellipse.Copy">
      <summary>Copies an NX.Ellipse (with a null transform)</summary>
      <returns>A copy of the input ellipse</returns>
    </member>
    <member name="M:Snap.NX.Ellipse.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an NX.Ellipse</summary>
      <param name="xform">Transform to be applied</param>
      <returns>A transformed copy of NX.Ellipse</returns>
      <exception cref="T:System.ArgumentException">The transform would convert the ellipse to an arc. Please use Curve.Copy instead</exception>
    </member>
    <member name="M:Snap.NX.Ellipse.Copy(Snap.Geom.Transform,Snap.NX.Ellipse[])">
      <summary>Transforms/copies an array of NX.Ellipse objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.Ellipse array</param>
      <returns>A copy of the input ellipses</returns>
      <exception cref="T:System.ArgumentException">The transform would convert the ellipse to an arc. Please use Curve.Copy instead</exception>
    </member>
    <member name="M:Snap.NX.Ellipse.Copy(Snap.NX.Ellipse[])">
      <summary>Copies an array of NX.Ellipse (with no transform)</summary>
      <param name="original">Original NX.Ellipse array</param>
      <returns>A copy of the input ellipses</returns>
    </member>
    <member name="M:Snap.NX.Ellipse.Divide(Snap.Geom.Surface.Plane,Snap.Position)">
      <summary>Divide an ellipse at an intersection with a given plane</summary>
      <param name="geomPlane">A plane to be used to divide the given ellipse</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Ellipse">Snap.NX.Ellipse</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Ellipse.Divide(Snap.NX.Face,Snap.Position)">
      <summary>Divide an ellipse at an intersection with a given face</summary>
      <param name="face">A face to be used to divide the given ellipse</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Ellipse">Snap.NX.Ellipse</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Ellipse.Divide(Snap.NX.ICurve,Snap.Position)">
      <summary>Divide an ellipse at an intersection with another curve</summary>
      <param name="boundingCurve">Bounding curve to be used to divide the given ellipse</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Ellipse">Snap.NX.Ellipse</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Ellipse.Divide(System.Double[])">
      <summary>Divide an ellipse at an array of parameter values</summary>
      <param name="parameters">The parameter values at which the ellipse should be divided</param>
      <returns>An array of <see cref="T:Snap.NX.Ellipse">Snap.NX.Ellipse</see> objects</returns>
    </member>
    <member name="P:Snap.NX.Ellipse.EndAngle">
      <summary>End angle (in degrees) </summary>
    </member>
    <member name="P:Snap.NX.Ellipse.Matrix">
      <summary>The Matrix of the ellipse (a reference to an NX.Matrix object)</summary>
    </member>
    <member name="P:Snap.NX.Ellipse.NXOpenEllipse">
      <summary>The enclosed NXOpen.Ellipse object</summary>
    </member>
    <member name="P:Snap.NX.Ellipse.ObjectSubType">
      <summary>Subtypes of NX Ellipse</summary>
    </member>
    <member name="P:Snap.NX.Ellipse.Orientation">
      <summary>The orientation of the ellipse</summary>
    </member>
    <member name="P:Snap.NX.Ellipse.Prototype">
      <summary>
            Returns the prototype ellipse of this one (if it has one)
            </summary>
    </member>
    <member name="P:Snap.NX.Ellipse.RadiusX">
      <summary>The half-width of the ellipse in its X-direction</summary>
    </member>
    <member name="P:Snap.NX.Ellipse.RadiusY">
      <summary>The half-width of the ellipse in its Y-direction</summary>
    </member>
    <member name="P:Snap.NX.Ellipse.StartAngle">
      <summary>Start angle (in degrees) </summary>
    </member>
    <member name="M:Snap.NX.Ellipse.Trim(System.Double,System.Double)">
      <summary>Trim an ellipse to a parameter interval</summary>
      <param name="lowerParam">The lower-limit parameter value</param>
      <param name="upperParam">The upper-limit parameter value</param>
    </member>
    <member name="M:Snap.NX.Ellipse.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Ellipse tag to a Snap.NX.Ellipse</summary>
      <param name="nxopenEllipseTag">The tag of an NXOpen.Ellipse object to be converted</param>
      <returns>The Snap.NX.Ellipse object formed by wrapping the NXOpen.Ellipse having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Ellipse object</exception>
    </member>
    <member name="T:Snap.NX.Expression">
      <summary>
            Represents an expression object (interchangeable with <see cref="T:NXOpen.Expression">NXOpen.Expression</see>)   
            </summary>
    </member>
    <member name="P:Snap.NX.Expression.Comment">
      <summary>The comment of the expression (the portion after "//")</summary>
    </member>
    <member name="M:Snap.NX.Expression.Delete">
      <summary>Delete this expression</summary>
    </member>
    <member name="P:Snap.NX.Expression.Descriptor">
      <summary>The descriptor for the expression, or <c>Nothing</c> if there is no descriptor</summary>
    </member>
    <member name="P:Snap.NX.Expression.Equation">
      <summary>The entire expression, including name, right-hand-side, and comment</summary>
    </member>
    <member name="P:Snap.NX.Expression.IsGeometricExpression">
      <summary>If True, indicates that the expression is a geometric expression</summary>
    </member>
    <member name="P:Snap.NX.Expression.IsMeasurementExpression">
      <summary>If True, indicates that the expression is owned by a measurement</summary>
    </member>
    <member name="P:Snap.NX.Expression.IsUserLocked">
      <summary>If True, indicates that the expression is user locked</summary>
    </member>
    <member name="P:Snap.NX.Expression.Name">
      <summary>The name of the expression (the portion before the equals sign)</summary>
    </member>
    <member name="P:Snap.NX.Expression.NXOpenExpression">
      <summary>The enclosed NXOpen.Expression object</summary>
    </member>
    <member name="P:Snap.NX.Expression.NXOpenTag">
      <summary>The NXOpen.Tag of the enclosed NXOpen.Expression object</summary>
    </member>
    <member name="P:Snap.NX.Expression.OwningFeature">
      <summary>The feature that created the expression</summary>
    </member>
    <member name="P:Snap.NX.Expression.RightHandSide">
      <summary>The right hand side of the expression</summary>
    </member>
    <member name="P:Snap.NX.Expression.Type">
      <summary>The type of the expression</summary>
    </member>
    <member name="P:Snap.NX.Expression.UsingFeatures">
      <summary>The array of features that use the expression</summary>
      <returns>Array of features, or empty array</returns>
    </member>
    <member name="M:Snap.NX.Expression.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Expression tag to a Snap.NX.Expression</summary>
      <param name="nxopenExpressionTag">The tag of an NXOpen.Expression object to be converted</param>
      <returns>The Snap.NX.Expression object formed by wrapping the NXOpen.Expression having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Expression object</exception>
    </member>
    <member name="T:Snap.NX.Expression.ExpressionType">
      <summary>The type of the expression</summary>
    </member>
    <member name="F:Snap.NX.Expression.ExpressionType.Boolean">
      <summary>Boolean-valued expression</summary>
    </member>
    <member name="F:Snap.NX.Expression.ExpressionType.Integer">
      <summary>Integer-valued expression</summary>
    </member>
    <member name="F:Snap.NX.Expression.ExpressionType.Point">
      <summary>Point-valued expression</summary>
    </member>
    <member name="F:Snap.NX.Expression.ExpressionType.String">
      <summary>String-valued expression</summary>
    </member>
    <member name="F:Snap.NX.Expression.ExpressionType.Vector">
      <summary>Vector-valued expression</summary>
    </member>
    <member name="F:Snap.NX.Expression.ExpressionType.Number">
      <summary>Number-valued (floating point) expression</summary>
    </member>
    <member name="T:Snap.NX.ExpressionBoolean">
      <summary>Boolean type of expression (one whose value is either True or False)</summary>
    </member>
    <member name="P:Snap.NX.ExpressionBoolean.Value">
      <summary>The boolean value of the expression</summary>
    </member>
    <member name="T:Snap.NX.ExpressionInteger">
      <summary>Integer type of expression</summary>
    </member>
    <member name="P:Snap.NX.ExpressionInteger.Value">
      <summary>The integer value of the expression</summary>
    </member>
    <member name="T:Snap.NX.ExpressionNumber">
      <summary>Number type of expression (one whose value is a floating-point number)</summary>
    </member>
    <member name="P:Snap.NX.ExpressionNumber.Value">
      <summary>The value of the expression in base units</summary>
    </member>
    <member name="T:Snap.NX.ExpressionPoint">
      <summary>Point type of expression</summary>
    </member>
    <member name="P:Snap.NX.ExpressionPoint.Value">
      <summary>The point value of the expression</summary>
    </member>
    <member name="T:Snap.NX.ExpressionString">
      <summary>String type of expression</summary>
    </member>
    <member name="P:Snap.NX.ExpressionString.Value">
      <summary>The string value of the expression</summary>
    </member>
    <member name="T:Snap.NX.ExpressionVector">
      <summary>Vector type of expression</summary>
    </member>
    <member name="P:Snap.NX.ExpressionVector.Value">
      <summary>The vector value of the expression</summary>
    </member>
    <member name="T:Snap.NX.ExtractFace">
      <summary>
            Represents a Snap.NX.ExtractFace feature (interchangeable with <see cref="T:NXOpen.Features.ExtractFace">NXOpen.Features.ExtractFace</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.ExtractFace.ExtractFaceBuilder">
      <summary>The NXOpen.Features.ExtractFaceBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.ExtractFace.NXOpenExtractFace">
      <summary>Returns the NXOpen.Features.ExtractFace of the object</summary>
    </member>
    <member name="M:Snap.NX.ExtractFace.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.ExtractFace tag to a Snap.NX.ExtractFace</summary>
      <param name="nxopenExtractFaceTag">The tag of an NXOpen.Features.ExtractFace object to be converted</param>
      <returns>The Snap.NX.ExtractFace object formed by wrapping the NXOpen.Features.ExtractFace having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.ExtractFace object</exception>
    </member>
    <member name="T:Snap.NX.Extrude">
      <summary>
            Represents a Snap.NX.Extrude feature (interchangeable with <see cref="T:NXOpen.Features.Extrude">NXOpen.Features.Extrude</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Extrude.Direction">
      <summary>Extrude direction</summary>
    </member>
    <member name="P:Snap.NX.Extrude.ExtrudeBuilder">
      <summary>The NXOpen.Features.ExtrudeBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.Extrude.NXOpenExtrude">
      <summary>The enclosed NXOpen.Features.Extrude object</summary>
    </member>
    <member name="M:Snap.NX.Extrude.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Extrude tag to a Snap.NX.Extrude</summary>
      <param name="nxopenExtrudeTag">The tag of an NXOpen.Features.Extrude object to be converted</param>
      <returns>The Snap.NX.Extrude object formed by wrapping the NXOpen.Features.Extrude having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Extrude object</exception>
    </member>
    <member name="T:Snap.NX.Face">
      <summary>
            Represents a Snap.NX.Face object (interchangeable with <see cref="T:NXOpen.Face">NXOpen.Face</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Face.Area">
      <summary>The surface area of the face </summary>
    </member>
    <member name="P:Snap.NX.Face.Body">
      <summary>The body on which the face lies</summary>
    </member>
    <member name="P:Snap.NX.Face.Box">
      <summary>The 3D box that the encloses the face</summary>
    </member>
    <member name="P:Snap.NX.Face.BoxUV">
      <summary>The box that encloses the face in the UV parameter space of the surface</summary>
    </member>
    <member name="M:Snap.NX.Face.ContainsPoint(System.Double[])">
      <summary>Determine whether a point with given (u,v) parameters lies inside the face</summary>
      <param name="uv">The (u,v) parameter values of the point to be tested </param>
      <returns>True if the given point lies inside (or on an edge) of the face</returns>
    </member>
    <member name="M:Snap.NX.Face.DerivDu(System.Double[])">
      <summary>Evaluates partial derivative wrt u at given (u,v) parameter values</summary>
      <param name="uv">The (u,v) parameter values -- not normalized to the range [0,1]</param>
      <returns>Partial derivative with respect to u at the given (u,v) parameter values</returns>
      <exception cref="T:System.ArgumentException">
            The (u,v) parameter array has the wrong length. You must input
            two separate values, or an array of length 2.
            </exception>
    </member>
    <member name="M:Snap.NX.Face.DerivDuDv(System.Double[])">
      <summary>Evaluates mixed partial derivative at given (u,v) parameter values</summary>
      <param name="uv">The (u,v) parameter values -- not normalized to the range [0,1]</param>
      <returns>Mixed partial derivative dS/dudv at the given (u,v) parameter values</returns>
      <exception cref="T:System.ArgumentException">
            The (u,v) parameter array has the wrong length. You must input
            two separate values, or an array of length 2.
            </exception>
    </member>
    <member name="M:Snap.NX.Face.DerivDv(System.Double[])">
      <summary>Evaluates partial derivative wrt v at given (u,v) parameter values</summary>
      <param name="uv">The (u,v) parameter values -- not normalized to the range [0,1]</param>
      <returns>Partial derivative with respect to v at the given (u,v) parameter values</returns>
      <exception cref="T:System.ArgumentException">
            The (u,v) parameter array has the wrong length. You must input
            two separate values, or an array of length 2.
            </exception>
    </member>
    <member name="P:Snap.NX.Face.EdgeCurves">
      <summary>Gets the edge curves of the given face</summary>
      <returns>An array of edge curves (NX.Curve objects)</returns>
    </member>
    <member name="P:Snap.NX.Face.Edges">
      <summary>The array of edges in the face</summary>
    </member>
    <member name="P:Snap.NX.Face.Loops">
      <summary>The array of loops in the face</summary>
    </member>
    <member name="M:Snap.NX.Face.Normal(System.Double[])">
      <summary>Evaluates the face normal at given (u,v) parameter values</summary>
      <param name="uv">The (u,v) parameter values -- not normalized to the range [0,1]</param>
      <returns>Face normal at the given (u,v) parameter values (a unit vector)</returns>
      <exception cref="T:System.ArgumentException">
            The (u,v) parameter array has the wrong length. You must input
            two separate values, or an array of length 2.
            </exception>
    </member>
    <member name="P:Snap.NX.Face.NXOpenFace">
      <summary>The enclosed NXOpen.Face object</summary>
    </member>
    <member name="P:Snap.NX.Face.ObjectSubType">
      <summary>The subtype of the face</summary>
    </member>
    <member name="P:Snap.NX.Face.ObjectType">
      <summary>The type of the object</summary>
    </member>
    <member name="P:Snap.NX.Face.OuterLoop">
      <summary>The outer loop of the face (if it has one)</summary>
    </member>
    <member name="M:Snap.NX.Face.Parameters(Snap.Position)">
      <summary>Finds surface (u,v) parameters at (or nearest to) a given point</summary>
      <param name="point">The given point (which should be on or near to the surface)</param>
      <returns>Surface (u,v) parameters at (or near to) the given point</returns>
    </member>
    <member name="M:Snap.NX.Face.Position(System.Double[])">
      <summary>Evaluates a point on the face at given (u,v) parameter values</summary>
      <param name="uv">The (u,v) parameter values -- not normalized to the range [0,1]</param>
      <returns>Point on face at the given (u,v) parameter values</returns>
      <exception cref="T:System.ArgumentException">
            The (u,v) parameter array has the wrong length. You must input
            two separate values, or an array of length 2.
            </exception>
    </member>
    <member name="M:Snap.NX.Face.PositionArray(Snap.Geom.Box2d,System.Int32,System.Int32)">
      <summary>Evaluates a rectangular array of points (positions) on the face</summary>
      <param name="boxUV">The uv-box over which the points should be distributed</param>
      <param name="numU">Number of points in the u-direction</param>
      <param name="numV">Number of points in the v-direction</param>
      <returns>A rectangular array of numU x numV equally-spaced points</returns>
    </member>
    <member name="M:Snap.NX.Face.PositionArray(System.Double[],System.Double[])">
      <summary>Evaluates a rectangular array of points (positions) on the face</summary>
      <param name="paramsU">The u-parameter values for the array of positions</param>
      <param name="paramsV">The v-parameter values for the array of positions</param>
      <returns>A rectangular array of positions</returns>
    </member>
    <member name="P:Snap.NX.Face.Prototype">
      <summary>
            Returns the prototype face of this face (if it has one)
            </summary>
    </member>
    <member name="P:Snap.NX.Face.Sense">
      <summary>The sense of the outward face normal</summary>
    </member>
    <member name="P:Snap.NX.Face.Shell">
      <summary>The shell that the face belongs to</summary>
    </member>
    <member name="P:Snap.NX.Face.Vertices">
      <summary>The array of vertices in the face</summary>
    </member>
    <member name="M:Snap.NX.Face.Wrap(NXOpen.Tag)">
      <summary>Converts an NXOpen.Face tag to a Snap.NX.Face</summary>
      <param name="nxopenFaceTag">The tag of an NXOpen.Face object to be converted</param>
      <returns>The Snap.NX.Face object formed by wrapping the NXOpen.Face having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag doesn't belong to an NXOpen.Face object</exception>
    </member>
    <member name="T:Snap.NX.Face.Blend">
      <summary>Represents a Snap.NX.Face.Blend object</summary>
    </member>
    <member name="P:Snap.NX.Face.Blend.Geometry">
      <summary>The geometry of blending face</summary>
    </member>
    <member name="M:Snap.NX.Face.Blend.IsoCurveU(System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are arcs)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <returns>An array of arcs corresponding to u = constantU</returns>
    </member>
    <member name="T:Snap.NX.Face.Bsurface">
      <summary>Represents a Snap.NX.Face.Bsurface object</summary>
    </member>
    <member name="P:Snap.NX.Face.Bsurface.Geometry">
      <summary>Geometry data of the bsurface face</summary>
    </member>
    <member name="M:Snap.NX.Face.Bsurface.IsoCurveU(System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are splines)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <returns>An array of splines corresponding to u = constantU</returns>
    </member>
    <member name="M:Snap.NX.Face.Bsurface.IsoCurveV(System.Double)">
      <summary>Creates isoparametric curves of the form v = constant (which are splines)</summary>
      <param name="constantV">The v value defining the isoparametric curves</param>
      <returns>An array of splines corresponding to v = constantV</returns>
    </member>
    <member name="T:Snap.NX.Face.Cone">
      <summary>Represents a Snap.NX.Face.Cone object</summary>
    </member>
    <member name="P:Snap.NX.Face.Cone.Geometry">
      <summary>Geometry data of the conic face</summary>
    </member>
    <member name="M:Snap.NX.Face.Cone.IsoCurveU(System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are lines)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <returns>An array of lines corresponding to u = constantU</returns>
    </member>
    <member name="M:Snap.NX.Face.Cone.IsoCurveV(System.Double)">
      <summary>Creates isoparametric curves of the form v = constant (which are arcs)</summary>
      <param name="constantV">The v value defining the isoparametric curves</param>
      <returns>An array of arcs corresponding to v = constantV</returns>
    </member>
    <member name="T:Snap.NX.Face.Cylinder">
      <summary>Represents a Snap.NX.Face.Cylinder object</summary>
    </member>
    <member name="P:Snap.NX.Face.Cylinder.Geometry">
      <summary>Geometry data of the cylindrical face</summary>
    </member>
    <member name="M:Snap.NX.Face.Cylinder.IsoCurveU(System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are lines)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <returns>An array of lines corresponding to u = constantU</returns>
    </member>
    <member name="M:Snap.NX.Face.Cylinder.IsoCurveV(System.Double)">
      <summary>Creates isoparametric curves of the form v = constant (which are arcs)</summary>
      <param name="constantV">The v value defining the isoparametric curves</param>
      <returns>An array of arcs corresponding to v = constantV</returns>
    </member>
    <member name="T:Snap.NX.Face.Extruded">
      <summary>Represents a Snap.NX.Face.Extruded object</summary>
    </member>
    <member name="P:Snap.NX.Face.Extruded.Geometry">
      <summary>Geometry data of the extruded face</summary>
    </member>
    <member name="M:Snap.NX.Face.Extruded.IsoCurveU(System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are lines)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <returns>An array of lines corresponding to u = constantU</returns>
    </member>
    <member name="M:Snap.NX.Face.Extruded.IsoCurveV(System.Double)">
      <summary>Creates isoparametric curves of the form v = constant (which are splines)</summary>
      <param name="constantV">The v value defining the isoparametric curves</param>
      <returns>An array of splines corresponding to v = constantV</returns>
    </member>
    <member name="T:Snap.NX.Face.Offset">
      <summary>Represents a Snap.NX.Face.Offset object</summary>
    </member>
    <member name="P:Snap.NX.Face.Offset.Geometry">
      <summary>Geometry data of the offset face</summary>
    </member>
    <member name="M:Snap.NX.Face.Offset.IsoCurveU(System.Double,System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are splines)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <param name="tolerance">Tolerance value, explained below. Optional. Default = 0.0254</param>
      <returns>An array of splines corresponding to u = constantU</returns>
    </member>
    <member name="M:Snap.NX.Face.Offset.IsoCurveV(System.Double,System.Double)">
      <summary>Creates isoparametric curves of the form v = constant (which are splines)</summary>
      <param name="constantV">The v value defining the isoparametric curves</param>
      <param name="tolerance">Tolerance value, explained below. Optional. Default = 0.0254</param>
      <returns>An array of splines corresponding to v = constantV</returns>
    </member>
    <member name="T:Snap.NX.Face.Plane">
      <summary>Represents a Snap.NX.Face.Plane object</summary>
    </member>
    <member name="P:Snap.NX.Face.Plane.Geometry">
      <summary>Geometry data of the planar face</summary>
    </member>
    <member name="M:Snap.NX.Face.Plane.IsoCurveU(System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are lines)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <returns>An array of lines corresponding to u = constantU</returns>
    </member>
    <member name="M:Snap.NX.Face.Plane.IsoCurveV(System.Double)">
      <summary>Creates isoparametric curves of the form v = constant (which are lines)</summary>
      <param name="constantV">The v value defining the isoparametric curves</param>
      <returns>An array of lines corresponding to v = constantV</returns>
    </member>
    <member name="T:Snap.NX.Face.Revolved">
      <summary>Represents a Snap.NX.Face.Revolved object</summary>
    </member>
    <member name="P:Snap.NX.Face.Revolved.Geometry">
      <summary>Geometry data of the revolved face</summary>
    </member>
    <member name="M:Snap.NX.Face.Revolved.IsoCurveU(System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are arcs)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <returns>An array of arcs corresponding to u = constantU</returns>
    </member>
    <member name="M:Snap.NX.Face.Revolved.IsoCurveV(System.Double)">
      <summary>Creates isoparametric curves of the form v = constant (which are splines)</summary>
      <param name="constantV">The v value defining the isoparametric curves</param>
      <returns>An array of splines corresponding to v = constantV</returns>
    </member>
    <member name="T:Snap.NX.Face.Sphere">
      <summary>Represents a Snap.NX.Face.Sphere object</summary>
    </member>
    <member name="P:Snap.NX.Face.Sphere.Geometry">
      <summary>Geometry data of the spherical face</summary>
    </member>
    <member name="M:Snap.NX.Face.Sphere.IsoCurveU(System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are arcs)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <returns>An array of arcs corresponding to u = constantU</returns>
    </member>
    <member name="M:Snap.NX.Face.Sphere.IsoCurveV(System.Double)">
      <summary>Creates isoparametric curves of the form v = constant (which are arcs)</summary>
      <param name="constantV">The v value defining the isoparametric curves</param>
      <returns>An array of arcs corresponding to v = constantV</returns>
    </member>
    <member name="T:Snap.NX.Face.Torus">
      <summary>Represents a Snap.NX.Face.Torus object</summary>
    </member>
    <member name="P:Snap.NX.Face.Torus.Geometry">
      <summary>Geometry data of the toroidal face</summary>
    </member>
    <member name="M:Snap.NX.Face.Torus.IsoCurveU(System.Double)">
      <summary>Creates isoparametric curves of the form u = constant (which are arcs)</summary>
      <param name="constantU">The u value defining the isoparametric curves</param>
      <returns>An array of arcs corresponding to u = constantU</returns>
    </member>
    <member name="M:Snap.NX.Face.Torus.IsoCurveV(System.Double)">
      <summary>Creates isoparametric curves of the form v = constant (which are arcs)</summary>
      <param name="constantV">The v value defining the isoparametric curves</param>
      <returns>An array of arcs corresponding to v = constantV</returns>
    </member>
    <member name="T:Snap.NX.FaceBlend">
      <summary>
            Represents a Snap.NX.FaceBlend feature (interchangeable with <see cref="T:NXOpen.Features.FaceBlend">NXOpen.Features.FaceBlend</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.FaceBlend.FaceBlendBuilder">
      <summary>The NXOpen.Features.FaceBlendBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.FaceBlend.NXOpenFaceBlend">
      <summary>The enclosed <see cref="T:NXOpen.Features.FaceBlend">NXOpen.Features.FaceBlend</see> object</summary>
    </member>
    <member name="P:Snap.NX.FaceBlend.Radius">
      <summary>The radius of the face blend</summary>
    </member>
    <member name="M:Snap.NX.FaceBlend.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.FaceBlend tag to a Snap.NX.FaceBlend</summary>
      <param name="nxopenFaceBlendTag">The tag of an NXOpen.Features.FaceBlend object to be converted</param>
      <returns>The Snap.NX.FaceBlend object formed by wrapping the NXOpen.Features.FaceBlend having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.FaceBlend object</exception>
    </member>
    <member name="T:Snap.NX.Feature">
      <summary>
            Represents a Snap.NX.Feature object (interchangeable with <see cref="T:NXOpen.Features.Feature">NXOpen.Features.Feature</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Feature.Bodies">
      <summary>The associated bodies (NX.Body objects)</summary>
    </member>
    <member name="P:Snap.NX.Feature.Body">
      <summary>The associated body (an NX.Body object)</summary>
      <exception cref="T:System.InvalidOperationException">There is more than one body associated with this feature.</exception>
    </member>
    <member name="P:Snap.NX.Feature.Box">
      <summary>The 3D box that the encloses the feature</summary>
      <exception cref="T:System.ArgumentException">The input object is not of a type that can be boxed</exception>
    </member>
    <member name="P:Snap.NX.Feature.Edges">
      <summary>The associated edges (NX.Edge objects)</summary>
    </member>
    <member name="P:Snap.NX.Feature.Faces">
      <summary>The associated faces (NX.Face objects)</summary>
    </member>
    <member name="P:Snap.NX.Feature.IsSuppressed">
      <summary>The suppression status of the feature</summary>
    </member>
    <member name="P:Snap.NX.Feature.NameLocation">
      <summary>The position at which the name of the feature is displayed</summary>
    </member>
    <member name="P:Snap.NX.Feature.NXOpenDisplayableObject">
      <summary>The associated NXOpen.DisplayableObject of this NX.Feature</summary>
    </member>
    <member name="P:Snap.NX.Feature.NXOpenDisplayableObjects">
      <summary>The associated NXOpen.DisplayableObjects array of this NX.Feature</summary>
    </member>
    <member name="P:Snap.NX.Feature.NXOpenFeature">
      <summary>The enclosed NXOpen.Features.Feature object</summary>
    </member>
    <member name="M:Snap.NX.Feature.Orphan">
      <summary>Remove parameters of this features</summary>
    </member>
    <member name="M:Snap.NX.Feature.Orphan(Snap.NX.Feature[])">
      <summary>Remove the parameters of features</summary>
      <param name="features">Features whose parameters are to be removed</param>
    </member>
    <member name="P:Snap.NX.Feature.Parents">
      <summary>The immediate parent features</summary>
    </member>
    <member name="M:Snap.NX.Feature.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Feature tag to a Snap.NX.Feature</summary>
      <param name="nxopenFeatureTag">The tag of an NXOpen.Features.Feature object to be converted</param>
      <returns>The Snap.NX.Feature object formed by wrapping the NXOpen.Features.Feature having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Feature object</exception>
    </member>
    <member name="T:Snap.NX.ICurve">
      <summary>Represents a Snap.NX.ICurve object -- either a curve or an edge.</summary>
    </member>
    <member name="P:Snap.NX.ICurve.ArcLength">
      <summary>Arclength of the icurve</summary>
    </member>
    <member name="M:Snap.NX.ICurve.Binormal(System.Double)">
      <summary>Calculates the unit binormal at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Unit binormal</returns>
    </member>
    <member name="P:Snap.NX.ICurve.Box">
      <summary>The 3D bounding box of the icurve</summary>
    </member>
    <member name="M:Snap.NX.ICurve.Curvature(System.Double)">
      <summary>Calculates curvature at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Curvature value (always non-negative)</returns>
    </member>
    <member name="M:Snap.NX.ICurve.Derivative(System.Double)">
      <summary>Calculates the first derivative vector on the icurve at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>First derivative vector (not unitized)</returns>
    </member>
    <member name="M:Snap.NX.ICurve.Derivatives(System.Double,System.Int32)">
      <summary>Calculates icurve derivatives (and position) at a given parameter value</summary>
      <param name="value">Parameter at which to evaluate</param>
      <param name="order">Order of highest derivative returned (zero for position alone)</param>
      <returns>Array of derivative vectors -- [0] is position, [1] is first derivative, etc.</returns>
    </member>
    <member name="P:Snap.NX.ICurve.EndPoint">
      <summary>End point of the icurve</summary>
    </member>
    <member name="P:Snap.NX.ICurve.IsClosed">
      <summary>Periodic property of the icurve</summary>
    </member>
    <member name="P:Snap.NX.ICurve.MaxU">
      <summary>The upper u-value (at the end point of the curve)</summary>
    </member>
    <member name="P:Snap.NX.ICurve.MinU">
      <summary>The lower u-value (at the start point of the curve)</summary>
    </member>
    <member name="M:Snap.NX.ICurve.Normal(System.Double)">
      <summary>Calculates unit normal at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Unit normal vector</returns>
    </member>
    <member name="P:Snap.NX.ICurve.NXOpenDisplayableObject">
      <summary>The associated NXOpen.DisplayableObject of this NX.ICurve</summary>
    </member>
    <member name="P:Snap.NX.ICurve.NXOpenICurve">
      <summary>Returns the NXOpen.ICurve of the object</summary>
    </member>
    <member name="P:Snap.NX.ICurve.NXOpenTag">
      <summary>The NXOpen.Tag of this NX.ICurve</summary>
    </member>
    <member name="P:Snap.NX.ICurve.NXOpenTaggedObject">
      <summary>The enclosed NXOpen.TaggedObject of this NX.ICurve</summary>
    </member>
    <member name="P:Snap.NX.ICurve.ObjectSubType">
      <summary>The subtype of the icurve</summary>
    </member>
    <member name="P:Snap.NX.ICurve.ObjectType">
      <summary>The type of the icurve</summary>
    </member>
    <member name="M:Snap.NX.ICurve.Parameter(Snap.Position)">
      <summary>Calculates the parameter value at a point on the icurve</summary>
      <param name="point">The point</param>
      <returns>Parameter value at the point</returns>
    </member>
    <member name="M:Snap.NX.ICurve.Parameter(System.Double)">
      <summary>Calculates the parameter value at a fractional arclength value along an icurve</summary>
      <param name="arclengthPercent">Percentage arclength along the icurve</param>
      <returns>Parameter value</returns>
    </member>
    <member name="M:Snap.NX.ICurve.Parameter(System.Double,System.Double)">
      <summary>Calculates the parameter value defined by an arclength step along an icurve</summary>
      <param name="baseParameter">The curve parameter value at the starting location</param>
      <param name="arclength">The arclength increment along the icurve (the length of our step)</param>
      <returns>The curve parameter value at the far end of the step</returns>
    </member>
    <member name="M:Snap.NX.ICurve.Position(System.Double)">
      <summary>Calculates a point on the icurve at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Point</returns>
    </member>
    <member name="M:Snap.NX.ICurve.PositionArray(System.Double)">
      <summary>Calculates an array of positions on a curve corresponding to a given chord-height tolerance</summary>
      <param name="chordalTolerance">The chord-height tolerance</param>
      <returns>An array of positions on the curve</returns>
    </member>
    <member name="M:Snap.NX.ICurve.PositionArray(System.Double,System.Double,System.Double)">
      <summary>Calculates an array of positions on a curve corresponding to given tolerances</summary>
      <param name="chordalTolerance">The chord-height tolerance</param>
      <param name="angularTolerance">The angular tolerance (in degrees)</param>
      <param name="stepTolerance">The chord-length tolerance</param>
      <returns>An array of positions on the curve</returns>
    </member>
    <member name="M:Snap.NX.ICurve.PositionArray(System.Int32)">
      <summary>Calculates an arrays of positions at equal arclengths on a curve or edge</summary>
      <param name="pointCount">The number of positions to be calculated on the curve</param>
      <returns>An array of positions on the curve</returns>
    </member>
    <member name="P:Snap.NX.ICurve.StartPoint">
      <summary>Start point of the icurve</summary>
    </member>
    <member name="M:Snap.NX.ICurve.Tangent(System.Double)">
      <summary>Calculates unit tangent vector at a given parameter value</summary>
      <param name="value">Parameter value</param>
      <returns>Unit tangent vector</returns>
    </member>
    <member name="T:Snap.NX.Line">
      <summary>
            Represents a Snap.NX.Line object (interchangeable with <see cref="T:NXOpen.Line">NXOpen.Line</see>)
            </summary>
    </member>
    <member name="M:Snap.NX.Line.Copy">
      <summary>Copies an NX.Line object (with a null transform)</summary>
      <returns>A copy of the input line</returns>
    </member>
    <member name="M:Snap.NX.Line.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an NX.Arc</summary>
      <param name="xform">Transform to be applied</param>
      <returns>A transformed copy of NX.Arc</returns>
    </member>
    <member name="M:Snap.NX.Line.Copy(Snap.Geom.Transform,Snap.NX.Line[])">
      <summary>Transforms/copies an array of NX.Line objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.Line array</param>
      <returns>A copy of the input lines</returns>
    </member>
    <member name="M:Snap.NX.Line.Copy(Snap.NX.Line[])">
      <summary>Copies an array of NX.Line (with no transform)</summary>
      <param name="original">Original NX.Line array</param>
      <returns>A copy of the input lines</returns>
    </member>
    <member name="P:Snap.NX.Line.Direction">
      <summary>A unit vector in the direction of the line</summary>
    </member>
    <member name="M:Snap.NX.Line.Divide(Snap.Geom.Surface.Plane,Snap.Position)">
      <summary>Divide a line at an intersection with a given plane</summary>
      <param name="geomPlane">A plane to be used to divide the given line</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of <see cref="T:Snap.NX.Line">Snap.NX.Line</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Line.Divide(Snap.NX.Face,Snap.Position)">
      <summary>Divide a line at an intersection with a given face</summary>
      <param name="face">A face to be used to divide the given line</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of <see cref="T:Snap.NX.Line">Snap.NX.Line</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Line.Divide(Snap.NX.ICurve,Snap.Position)">
      <summary>Divide a line at an intersection with another curve</summary>
      <param name="boundingCurve">Bounding curve to be used to divide the given line</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Line">Snap.NX.Line</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Line.Divide(System.Double[])">
      <summary>Divide a line at an array of parameter values</summary>
      <param name="parameters">The parameter values at which the line should be divided</param>
      <returns>An array of <see cref="T:Snap.NX.Line">Snap.NX.Line</see> objects</returns>
    </member>
    <member name="P:Snap.NX.Line.EndPoint">
      <summary>The end point of the line</summary>
    </member>
    <member name="P:Snap.NX.Line.NXOpenLine">
      <summary>The enclosed NXOpen.Line object</summary>
    </member>
    <member name="P:Snap.NX.Line.ObjectSubType">
      <summary>Subtypes of NX Line</summary>
    </member>
    <member name="P:Snap.NX.Line.Prototype">
      <summary>
            Returns the prototype line of this one (if it has one)
            </summary>
    </member>
    <member name="P:Snap.NX.Line.StartPoint">
      <summary>The start point of the line</summary>
    </member>
    <member name="M:Snap.NX.Line.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Line tag to a Snap.NX.Line</summary>
      <param name="nxopenLineTag">The tag of an NXOpen.Line object to be converted</param>
      <returns>The Snap.NX.Line object formed by wrapping the NXOpen.Line having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Line object</exception>
    </member>
    <member name="T:Snap.NX.Matrix">
      <summary>
            Represents a Snap.NX.Matrix object (interchangeable with <see cref="T:NXOpen.NXMatrix">NXOpen.NXMatrix</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Matrix.AxisX">
      <summary>X-axis of rotated frame</summary>
    </member>
    <member name="P:Snap.NX.Matrix.AxisY">
      <summary>Y-axis of rotated frame</summary>
    </member>
    <member name="P:Snap.NX.Matrix.AxisZ">
      <summary>Z-axis of rotated frame</summary>
    </member>
    <member name="P:Snap.NX.Matrix.NXOpenMatrix">
      <summary>The enclosed NXOpen.NXMatrix object</summary>
    </member>
    <member name="P:Snap.NX.Matrix.NXOpenTag">
      <summary>Get the NXOpen.Tag from this NX.Matrix</summary>
    </member>
    <member name="P:Snap.NX.Matrix.Orientation">
      <summary>Orientation of matrix</summary>
    </member>
    <member name="M:Snap.NX.Matrix.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.NXMatrix tag to a Snap.NX.Matrix</summary>
      <param name="nxopenMatrixTag">The tag of an NXOpen.NXMatrix object to be converted</param>
      <returns>The Snap.NX.Matrix object formed by wrapping the NXOpen.NXMatrix having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.NXMatrix object</exception>
    </member>
    <member name="T:Snap.NX.Note">
      <summary>
            Represents a Snap.NX.Note (interchangeable with <see cref="T:NXOpen.Annotations.PmiNote">NXOpen.Annotations.PmiNote</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Note.AlignmentPosition">
      <summary>One of nine "sites" used to locate the text</summary>
    </member>
    <member name="P:Snap.NX.Note.AspectRatio">
      <summary>A multiplier used to adjust the shapes of characters. Values greater than 1 will make characters wider than normal. </summary>
    </member>
    <member name="P:Snap.NX.Note.CharSpaceFactor">
      <summary>A multiplier used to adjust the spacing between characters</summary>
    </member>
    <member name="P:Snap.NX.Note.Color">
      <summary>The color of the note (as a System.Drawing.Color)</summary>
    </member>
    <member name="M:Snap.NX.Note.Copy">
      <summary>Copies an NX.Note (with a null transform)</summary>
      <returns>A copy of the input Note</returns>
    </member>
    <member name="M:Snap.NX.Note.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an NX.Note</summary>
      <param name="xform">Transform to be applied</param>
      <returns>A transformed copy of NX.Note</returns>
    </member>
    <member name="M:Snap.NX.Note.Copy(Snap.Geom.Transform,Snap.NX.Note[])">
      <summary>Transforms/copies an array of NX.Note objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.Note array</param>
      <returns>A copy of the input notes</returns>
    </member>
    <member name="M:Snap.NX.Note.Copy(Snap.NX.Note[])">
      <summary>Copies an array of NX.Note (with no transform)</summary>
      <param name="original">Original NX.Note array</param>
      <returns>A copy of the input notes</returns>
    </member>
    <member name="P:Snap.NX.Note.FontIndex">
      <summary>The index of the note's font within the part file's font table</summary>
    </member>
    <member name="P:Snap.NX.Note.FontName">
      <summary>The name of the primary font used within the note</summary>
    </member>
    <member name="P:Snap.NX.Note.FontSize">
      <summary>The font size (in points)</summary>
    </member>
    <member name="P:Snap.NX.Note.HorizontalTextJustification">
      <summary>The horizontal justification of the text (left, center, or right)</summary>
    </member>
    <member name="P:Snap.NX.Note.IsVertical">
      <summary>If true, indicates that the text will be oriented vertically, not horizontally</summary>
    </member>
    <member name="P:Snap.NX.Note.LineAngle">
      <summary>The angle between the baseline of the text and the horizontal</summary>
    </member>
    <member name="P:Snap.NX.Note.LineSpaceFactor">
      <summary>A multiplier used to adjust the spacing between lines of text</summary>
    </member>
    <member name="P:Snap.NX.Note.NoteBuilder">
      <summary>The NXOpen.Annotations.PmiNoteBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.Note.NXOpenNote">
      <summary>The enclosed NXOpen.Annotations.BaseNote object</summary>
    </member>
    <member name="P:Snap.NX.Note.Orientation">
      <summary>The orientation of the note</summary>
    </member>
    <member name="P:Snap.NX.Note.Origin">
      <summary>The position of the origin of the note</summary>
    </member>
    <member name="M:Snap.NX.Note.SetFont(System.String,Snap.NX.TextStyle.FontType)">
      <summary>Sets the primary font to be used in the note</summary>
      <param name="fontName">The name of the font to be used</param>
      <param name="fontType">The type of font (either a standard system font or an NX font)</param>
    </member>
    <member name="P:Snap.NX.Note.StrokeWidth">
      <summary>The width (thickness) of the strokes used to draw the font</summary>
    </member>
    <member name="P:Snap.NX.Note.Text">
      <summary>The text of the note -- an array of lines of text</summary>
    </member>
    <member name="M:Snap.NX.Note.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Annotations.PmiNote tag to a Snap.NX.Note</summary>
      <param name="nxopenNoteTag">The tag of an NXOpen.Annotations.PmiNote object to be converted</param>
      <returns>The Snap.NX.Note object formed by wrapping the NXOpen.Annotations.PmiNote having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Annotations.PmiNote object</exception>
    </member>
    <member name="T:Snap.NX.NXObject">
      <summary>
            Represents a Snap.NX.NXObject object (interchangeable with <see cref="T:NXOpen.TaggedObject">NXOpen.NxObject</see>)
            </summary>
    </member>
    <member name="M:Snap.NX.NXObject.#ctor(NXOpen.NXObject)">
      <summary>Construct an NXObject, given an NXOpen.NXObject object</summary>
      <param name="nxopenObject">An NXOpen.NXObject</param>
    </member>
    <member name="M:Snap.NX.NXObject.#ctor(NXOpen.Tag)">
      <summary>Construct an NXObject, given an NXOpen.Tag</summary>
      <param name="objectTag">An NXOpen.Tag</param>
    </member>
    <member name="P:Snap.NX.NXObject.Box">
      <summary>The bounding box of the object</summary>
      <exception cref="T:System.ArgumentException">The input object is not of a type that can be boxed</exception>
    </member>
    <member name="P:Snap.NX.NXObject.Color">
      <summary>The color of the object (as a System.Drawing.Color)</summary>
      <exception cref="T:System.ArgumentException">This object is of a type that has no display properties.</exception>
    </member>
    <member name="M:Snap.NX.NXObject.Copy">
      <summary>Copies an NX.NXObject (with no transform)</summary>
      <returns>A copy of the input object</returns>
      <exception cref="T:System.ArgumentException">The object is an edge. Edges cannot be copied.</exception>
      <exception cref="T:System.ArgumentException">The object is a face. Faces cannot be copied.</exception>
      <exception cref="T:System.ArgumentException">A feature cannot be copied unless all of its ancestors are copied too.</exception>
    </member>
    <member name="M:Snap.NX.NXObject.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an object</summary>
      <param name="xform">Transform to be applied</param>
      <returns>Output object</returns>
      <exception cref="T:System.ArgumentException">The object is an edge. Edges cannot be copied.</exception>
      <exception cref="T:System.ArgumentException">The object is a face. Faces cannot be copied.</exception>
      <exception cref="T:System.ArgumentException">A feature cannot be copied unless all of its ancestors are copied too.</exception>
      <exception cref="T:System.ArgumentException">A transform that does not preserve angles cannot be applied to a coordinate system.</exception>
    </member>
    <member name="M:Snap.NX.NXObject.Copy(Snap.Geom.Transform,Snap.NX.NXObject[])">
      <summary>Transforms/copies an array of NX objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.NXObject array</param>
      <returns>A copy of the input objects</returns>
      <exception cref="T:System.ArgumentException">One of the input objects is an edge. Edges cannot be copied.</exception>
      <exception cref="T:System.ArgumentException">One of the input objects is a face. Faces cannot be copied.</exception>
      <exception cref="T:System.ArgumentException">A feature cannot be copied unless all of its ancestors are copied too.</exception>
      <exception cref="T:System.ArgumentException">A transform that does not preserve angles cannot be applied to a coordinate system.</exception>
    </member>
    <member name="M:Snap.NX.NXObject.Copy(Snap.NX.NXObject[])">
      <summary>Copies an array of NX.NXObject (with no transform)</summary>
      <param name="original">Original NX.NXObject array</param>
      <returns>A copy of the input objects</returns>
      <exception cref="T:System.ArgumentException">One of the input objects is an edge. Edges cannot be copied.</exception>
      <exception cref="T:System.ArgumentException">One of the input objects is a face. Faces cannot be copied.</exception>
      <exception cref="T:System.ArgumentException">A feature cannot be copied unless all of its ancestors are copied too.</exception>
    </member>
    <member name="M:Snap.NX.NXObject.CopyToLayer(System.Int32,Snap.NX.NXObject[])">
      <summary>Copies objects to the specified layer</summary>
      <param name="newLayer">The layer to copy the objects to</param>
      <param name="nxobjectArray">The objects to be copied</param>
    </member>
    <member name="M:Snap.NX.NXObject.Delete">
      <summary>Deletes an NX.NXObject</summary>
    </member>
    <member name="M:Snap.NX.NXObject.Delete(Snap.NX.NXObject[])">
      <summary>Deletes an array of NXObject objects</summary>
      <param name="nxObjects">The objects to delete</param>
    </member>
    <member name="M:Snap.NX.NXObject.DeleteAttributes(Snap.NX.NXObject.AttributeType)">
      <summary>Deletes all attributes of a given type</summary>
      <param name="type">The attribute type -- see remarks below</param>
    </member>
    <member name="M:Snap.NX.NXObject.DeleteAttributes(Snap.NX.NXObject.AttributeType,System.String)">
      <summary>Deletes an attribute with a given type and title</summary>
      <param name="type">The type of the attribute that is to be deleted</param>
      <param name="title">The title of the attribute that is to be deleted</param>
    </member>
    <member name="M:Snap.NX.NXObject.FindAllByName(System.String)">
      <summary>Find all the objects in the work part that have a given name</summary>
      <param name="name">Name of the objects</param>
      <returns>An array of NX.NXObject objects having the given name</returns>
    </member>
    <member name="M:Snap.NX.NXObject.FindByName(System.String)">
      <summary>Find the first object in the work part that has a given name</summary>
      <param name="name">Name of the object</param>
      <returns>An NX.NXObject object having the given name</returns>
    </member>
    <member name="M:Snap.NX.NXObject.GetAttributeInfo">
      <summary>Returns an array of AttributeInformation structures (type + title)</summary>
      <returns>An array of attribute AttributeInformation structures</returns>
    </member>
    <member name="M:Snap.NX.NXObject.GetAttributeStrings">
      <summary>Get the object's attributes as strings</summary>
      <returns>An array of strings representing the object's attributes</returns>
    </member>
    <member name="M:Snap.NX.NXObject.GetBooleanAttribute(System.String)">
      <summary>Returns the value of an attribute of type "Boolean"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (a bool)</returns>
    </member>
    <member name="M:Snap.NX.NXObject.GetDateTimeAttribute(System.String)">
      <summary>Returns the value of an attribute of type "Time"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (a System.DateTime object)</returns>
    </member>
    <member name="M:Snap.NX.NXObject.GetIntegerAttribute(System.String)">
      <summary>Returns the value of an attribute of type "Integer"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (an integer)</returns>
    </member>
    <member name="M:Snap.NX.NXObject.GetRealAttribute(System.String)">
      <summary>Returns the value of an attribute of type "Real"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (a "double" number)</returns>
    </member>
    <member name="M:Snap.NX.NXObject.GetStringAttribute(System.String)">
      <summary>Returns the value of an attribute of type "String"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (a string)</returns>
    </member>
    <member name="P:Snap.NX.NXObject.HasDisplayProperties">
      <summary>If true, indicates (roughly) that this object is displayable</summary>
    </member>
    <member name="M:Snap.NX.NXObject.Hide(Snap.NX.NXObject[])">
      <summary>Hides (Blanks) an array of NXObject objects</summary>
      <param name="nxObjectArray">The objects to hide</param>
    </member>
    <member name="P:Snap.NX.NXObject.IsHidden">
      <summary>If true, indicates that the object is hidden (blanked)</summary>
      <exception cref="T:System.ArgumentException">This object is of a type that has no display properties.</exception>
    </member>
    <member name="P:Snap.NX.NXObject.IsHighlighted">
      <summary>If true, indicates that the displayable object is highlighted</summary>
      <exception cref="T:System.ArgumentException">This object is of a type that has no display properties.</exception>
    </member>
    <member name="P:Snap.NX.NXObject.IsOccurrence">
      <summary>
            If true, indicates that this object is an occurrence.
            </summary>
    </member>
    <member name="P:Snap.NX.NXObject.Layer">
      <summary>The layer on which the object resides</summary>
      <exception cref="T:System.ArgumentException">This object is of a type that has no display properties.</exception>
    </member>
    <member name="P:Snap.NX.NXObject.LineFont">
      <summary>The line font used to draw the object (solid, dashed, etc.)</summary>
      <exception cref="T:System.ArgumentException">This object is of a type that has no display properties.</exception>
    </member>
    <member name="P:Snap.NX.NXObject.LineWidth">
      <summary>The line width used to draw the object (thin, medium, or thick)</summary>
      <exception cref="T:System.ArgumentException">This object is of a type that has no display properties.</exception>
    </member>
    <member name="M:Snap.NX.NXObject.Move(Snap.Geom.Transform)">
      <summary>Transform/Move an object</summary>
      <param name="xform">Transform to be applied</param>
      <exception cref="T:System.ArgumentException">The object is an edge. Edges cannot be moved.</exception>
      <exception cref="T:System.ArgumentException">The object is a face. Faces cannot be moved.</exception>
      <exception cref="T:System.ArgumentException">A feature cannot be moved, because its position is controlled by its parents.</exception>
    </member>
    <member name="M:Snap.NX.NXObject.Move(Snap.Geom.Transform,Snap.NX.NXObject[])">
      <summary>Transform/Move an array of objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.NXObject array</param>
      <exception cref="T:System.ArgumentException">One of the input objects is an edge. Edges cannot be moved.</exception>
      <exception cref="T:System.ArgumentException">One of the input objects is a face. Faces cannot be moved.</exception>
      <exception cref="T:System.ArgumentException">A feature cannot be moved, because its position is controlled by its parents.</exception>
    </member>
    <member name="M:Snap.NX.NXObject.MoveToLayer(System.Int32,Snap.NX.NXObject[])">
      <summary>Moves displayable objects to the specified layer.</summary>
      <param name="newLayer">The layer to move the objects to</param>
      <param name="nxobjectArray">The objects to be moved</param>
    </member>
    <member name="P:Snap.NX.NXObject.Name">
      <summary>The name of the object (also called "custom name")</summary>
    </member>
    <member name="P:Snap.NX.NXObject.NameLocation">
      <summary>The position at which the name of the object is displayed</summary>
    </member>
    <member name="P:Snap.NX.NXObject.NXOpenDisplayableObject">
      <summary>The associated NXOpen.DisplayableObject of this NX.NXObject</summary>
    </member>
    <member name="P:Snap.NX.NXObject.NXOpenDisplayableObjects">
      <summary>The associated NXOpen.DisplayableObjects of this NX.NXObject</summary>
    </member>
    <member name="P:Snap.NX.NXObject.NXOpenTag">
      <summary>Get the NXOpen.Tag from this NX.NXObject</summary>
    </member>
    <member name="P:Snap.NX.NXObject.NXOpenTaggedObject">
      <summary>The enclosed NXOpen.TaggedObject of this NX.NXObject</summary>
    </member>
    <member name="P:Snap.NX.NXObject.ObjectSubType">
      <summary>The subtype of the object</summary>
    </member>
    <member name="P:Snap.NX.NXObject.ObjectType">
      <summary>The type of the object</summary>
    </member>
    <member name="P:Snap.NX.NXObject.OwningComponent">
      <summary>
            Returns the owning component of this object (if it has one)
            </summary>
    </member>
    <member name="P:Snap.NX.NXObject.Prototype">
      <summary>
            Returns the prototype object of this object (if it has one)
            </summary>
    </member>
    <member name="M:Snap.NX.NXObject.SetBooleanAttribute(System.String,System.Boolean)">
      <summary>Creates and/or sets the value of an attribute of type "Boolean"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
    </member>
    <member name="M:Snap.NX.NXObject.SetDateTimeAttribute(System.String,System.DateTime)">
      <summary>Creates and/or sets the value of an attribute of type "Time"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
      <exception cref="T:System.ArgumentException">The input date is before December 29th 1969</exception>
    </member>
    <member name="M:Snap.NX.NXObject.SetIntegerAttribute(System.String,System.Int32)">
      <summary>Creates and/or sets the value of an attribute of type "Integer"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
    </member>
    <member name="M:Snap.NX.NXObject.SetNullAttribute(System.String)">
      <summary>Creates an attribute of type "Null"</summary>
      <param name="title">The title of the attribute</param>
    </member>
    <member name="M:Snap.NX.NXObject.SetRealAttribute(System.String,System.Double)">
      <summary>Creates and/or sets the value of an attribute of type "Real"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
    </member>
    <member name="M:Snap.NX.NXObject.SetStringAttribute(System.String,System.String)">
      <summary>Creates and/or sets the value of an attribute of type "String"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
    </member>
    <member name="M:Snap.NX.NXObject.Show(Snap.NX.NXObject[])">
      <summary>Shows (Unblanks) an array of NXObject objects</summary>
      <param name="nxObjectArray">The objects to show</param>
    </member>
    <member name="M:Snap.NX.NXObject.ToString">
      <summary>
            Returns a string representation of the object
            </summary>
      <returns>A string containing the object type and its NXOpen tag</returns>
    </member>
    <member name="P:Snap.NX.NXObject.Translucency">
      <summary>The translucency of the object</summary>
      <exception cref="T:System.ArgumentException">This object is of a type that has no display properties.</exception>
    </member>
    <member name="M:Snap.NX.NXObject.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.NXObject tag to a Snap.NX.NXObject</summary>
      <param name="nxopenNXObjectTag">The tag of an NXOpen.NXObject object to be converted</param>
      <returns>The Snap.NX.NXObject object formed by wrapping the NXOpen.NXObject having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.NXObject object</exception>
    </member>
    <member name="T:Snap.NX.NXObject.AttributeInformation">
      <summary>Contains attribute information (title and type)</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeInformation.Title">
      <summary>Attribute title</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeInformation.Type">
      <summary>Attribute type</summary>
    </member>
    <member name="T:Snap.NX.NXObject.AttributeType">
      <summary>Enumeration of different attribute types (Integer, Real, String, etc.)</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeType.Null">
      <summary>Null</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeType.Bool">
      <summary>Bool</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeType.Integer">
      <summary>Integer</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeType.Real">
      <summary>Real</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeType.String">
      <summary>String</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeType.Time">
      <summary>Time and Date</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeType.Reference">
      <summary>Reference</summary>
    </member>
    <member name="F:Snap.NX.NXObject.AttributeType.Any">
      <summary>All types</summary>
    </member>
    <member name="T:Snap.NX.ObjectTypes">
      <summary>Contains enumerations representing NX object types and subtypes</summary>
    </member>
    <member name="P:Snap.NX.ObjectTypes.AllCurves">
      <summary>Returns an array containing all the NX curve types</summary>
    </member>
    <member name="T:Snap.NX.ObjectTypes.SubType">
      <summary>Subtypes of NX objects</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.BodyGeneral">
      <summary>Body subtype: General (either a sheet body or a solid body)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.BodySolid">
      <summary>Body subtype: Solid</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.BodySheet">
      <summary>Body subtype: Sheet</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ComponentGeneral">
      <summary>Component subtype: General</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.PartOccurrenceGeneral">
      <summary>Component subtype: Occurrence General</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.PartOccurrenceShadow">
      <summary>Component subtype: Occurrence Shadow</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ConicEllipse">
      <summary>Conic subtype: Ellipse (NXOpen.UF.UFConstants.UF_conic_ellipse_subtype)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ConicParabola">
      <summary>Conic subtype: Parabola (NXOpen.UF.UFConstants.UF_conic_parabola_subtype)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ConicHyperbola">
      <summary>Conic subtype: Hyperbola (NXOpen.UF.UFConstants.UF_conic_hyperbola_subtype)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.CsysGeneral">
      <summary>CoordinateSystem subtype: General</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.CsysWcs">
      <summary>CoordinateSystem subtype: Wcs</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.CsysCylindrical">
      <summary>CoordinateSystem subtype: Cylindrical</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.CsysSpherical">
      <summary>CoordinateSystem subtype: Spherical</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionHorizontal">
      <summary>Dimension subtype: Horizontal</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionVertical">
      <summary>Dimension subtype: Vertical</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionParallel">
      <summary>Dimension subtype: Parallel</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionCylindrical">
      <summary>Dimension subtype: Cylindrical</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionPerpendicular">
      <summary>Dimension subtype: Perpendicular</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionAngularMinor">
      <summary>Dimension subtype: Angular Minor</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionAngularMajor">
      <summary>Dimension subtype: Angular Major</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionArclength">
      <summary>Dimension subtype: Arc Length</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionRadius">
      <summary>Dimension subtype: Radius</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionDiameter">
      <summary>Dimension subtype: Diameter</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionHole">
      <summary>Dimension subtype: Hole</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionConcCircle">
      <summary>Dimension subtype: Concentric Circles</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionOrdinateHoriz">
      <summary>Dimension subtype: Ordinate Horizontal</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionOrdinateVert">
      <summary>Dimension subtype: Ordinate Vertical</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DimensionAssortedParts">
      <summary>Dimension subtype: Assorted Parts</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DraftingEntityNote">
      <summary>Drafting Entity subtype: Note</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DraftingEntityLabel">
      <summary>Drafting Entity subtype: Label</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DraftingEntityIdSymbol">
      <summary>Drafting Entity subtype: Id Symbol</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DraftingEntityFpt">
      <summary>Drafting Entity subtype: Fpt</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DraftingEntityCenterline">
      <summary>Drafting Entity subtype: Centerline</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DraftingEntityCrosshatch">
      <summary>Drafting Entity subtype: Crosshatch</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.DraftingEntityAssortedParts">
      <summary>Drafting Entity subtype: Assorted Parts</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.EdgeLine">
      <summary>Edge subtype: Line</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.EdgeArc">
      <summary>Edge subtype: Arc (or circle)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.EdgeCircle">
      <summary>Edge subtype: Arc (or circle)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.EdgeEllipse">
      <summary>Edge subtype: Ellipse</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.EdgeIntersection">
      <summary>Edge subtype: Intersection curve</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.EdgeSpline">
      <summary>Edge subtype: Spline</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.EdgeSpCurve">
      <summary>Edge subtype: SpCurve (parameter space curve)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.EdgeIsoCurve">
      <summary>Edge subtype: IsoCurve (isoparametric curve)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.EdgeUnknown">
      <summary>Edge subtype: Unknown</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FacePlane">
      <summary>Face subtype: Plane</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceCylinder">
      <summary>Face subtype: Cylinder</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceCone">
      <summary>Face subtype: Cone</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceSphere">
      <summary>Face subtype: Sphere</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceTorus">
      <summary>Face subtype: Torus</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceBsurface">
      <summary>Face subtype: Bsurface</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceBlend">
      <summary>Face subtype: Blend</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceOffset">
      <summary>Face subtype: Offset</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceExtruded">
      <summary>Face subtype: Extruded</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceRevolved">
      <summary>Face subtype: Revolved</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.FaceUnknown">
      <summary>Face subtype: Unknown</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.LayoutGeneral">
      <summary>Layout subtype: General</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.LayoutCanned">
      <summary>Layout subtype: Canned</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.LineGeneral">
      <summary>Line subtype: General</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.LineInfinite">
      <summary>Line subtype: Infinite</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.PatternGeneral">
      <summary>Pattern subtype: General</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.PatternPoint">
      <summary>Pattern subtype: Point</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.PartAttributeGeneral">
      <summary>Part Attribute subtype: General</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.PartAttributeCache">
      <summary>Part Attribute subtype: Cache</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ReferenceDesign">
      <summary>ReferenceSet subtype: Design</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ViewSection">
      <summary>View Subtype : Section</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ViewInstance">
      <summary>View Subtype : Instance</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ViewImported">
      <summary>View Subtype : Imported</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ViewBaseMember">
      <summary>View Subtype : Base Member</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ViewOrthographic">
      <summary>View Subtype : Orthographic</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ViewAuxiliary">
      <summary>View Subtype : Auxiliary</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ViewDetail">
      <summary>View Subtype : Detail</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.SubType.ViewModeling">
      <summary>View Subtype : Modeling</summary>
    </member>
    <member name="T:Snap.NX.ObjectTypes.Type">
      <summary>Types of NX objects</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Arc">
      <summary>Arc/circle type (NXOpen.UF.UFConstants.UF_circle_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Body">
      <summary>Body type. Note: *any* body, solid or sheet (NXOpen.UF.UFConstants.UF_solid_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Camera">
      <summary>Camera type</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Circle">
      <summary>Arc/circle type (NXOpen.UF.UFConstants.UF_circle_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Component">
      <summary>Component type (NXOpen.UF.UFConstants.UF_component_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Conic">
      <summary>Conic type (NXOpen.UF.UFConstants.UF_conic_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Constraint">
      <summary>Constraint type (NXOpen.UF.UFConstants.UF_constraint_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.CoordinateSystem">
      <summary>CoordinateSystem type (NXOpen.UF.UFConstants.UF_coordinate_system_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.DatumAxis">
      <summary>    DatumAxis type (not equal to NXOpen.UF.UFConstants.UF_datum_axis_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.DatumPlane">
      <summary>    DatumPlane type (not equal to NXOpen.UF.UFConstants.UF_datum_plane_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Dimension">
      <summary>Dimension type (NXOpen.UF.UFConstants.UF_dimension_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.DraftingEntity">
      <summary>DraftingEntity type (NXOpen.UF.UFConstants.UF_drafting_entity_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Drawing">
      <summary>Drawing type (NXOpen.UF.UFConstants.UF_drawing_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Edge">
      <summary>Face type (no corresponding code in NXOpen.UF.UFConstants)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Face">
      <summary>Face type (no corresponding code in NXOpen.UF.UFConstants)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.FacettedModel">
      <summary>FacettedModel type (NXOpen.UF.UFConstants.UF_faceted_model_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Feature">
      <summary>Feature type. (NXOpen.UF.UFConstants.UF_feature_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Group">
      <summary>Group type (NXOpen.UF.UFConstants.UF_group_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.LayerCategory">
      <summary>LayerCategory type (NXOpen.UF.UFConstants.UF_layer_category_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Layout">
      <summary>Layout type (NXOpen.UF.UFConstants.UF_layout_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Line">
      <summary>Line type (NXOpen.UF.UFConstants.UF_line_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.LightSource">
      <summary>Light source type (NXOpen.UF.UFConstants.UF_line_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Matrix">
      <summary>Matrix type (NXOpen.UF.UFConstants.UF_matrix_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.ParameterObject">
      <summary>Parameter object, used for global data (NXOpen.UF.UFConstants.UF_parameter_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.PartAttribute">
      <summary>PartAttribute type (NXOpen.UF.UFConstants.UF_part_attribute_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Pattern">
      <summary>Pattern type (NXOpen.UF.UFConstants.UF_pattern_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Plane">
      <summary>Plane type (NXOpen.UF.UFConstants.UF_plane_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Point">
      <summary>Point type (NXOpen.UF.UFConstants.UF_point_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.ReferenceSet">
      <summary>ReferenceSet type (NXOpen.UF.UFConstants.UF_reference_set_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Skeleton">
      <summary>Skeleton object, used for grids, borders, etc. (NXOpen.UF.UFConstants.UF_skeleton_ent_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Spline">
      <summary>Spline type (NXOpen.UF.UFConstants.UF_spline_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.TraceLine">
      <summary>TraceLine type (NXOpen.UF.UFConstants.UF_traceline_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.View">
      <summary>View type (NXOpen.UF.UFConstants.UF_view_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Scalar">
      <summary>Scalar type (NXOpen.UF.UFConstants.UF_scalar_type)</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.Type.Direction">
      <summary>Direction type (NXOpen.UF.UFConstants.UF_direction_type)</summary>
    </member>
    <member name="T:Snap.NX.ObjectTypes.TypeCombo">
      <summary>A combination of a type and a subtype</summary>
    </member>
    <member name="M:Snap.NX.ObjectTypes.TypeCombo.#ctor(Snap.NX.ObjectTypes.Type)">
      <summary>Constructs a new TypeCombo from a given type</summary>
      <param name="type">The object type (subtype is set to zero)</param>
    </member>
    <member name="M:Snap.NX.ObjectTypes.TypeCombo.#ctor(Snap.NX.ObjectTypes.Type,Snap.NX.ObjectTypes.SubType)">
      <summary>Constructs a new TypeCombo from a given type and subtype</summary>
      <param name="type">The object type</param>
      <param name="subtype">The object subtype</param>
    </member>
    <member name="F:Snap.NX.ObjectTypes.TypeCombo.SubType">
      <summary>Object subtype (e.g. "ellipse")</summary>
    </member>
    <member name="F:Snap.NX.ObjectTypes.TypeCombo.Type">
      <summary>Object type (e.g. "conic")</summary>
    </member>
    <member name="T:Snap.NX.OffsetCurve">
      <summary>
            Represents a Snap.NX.OffsetCurve feature (interchangeable with <see cref="T:NXOpen.Features.OffsetCurve">NXOpen.Features.OffsetCurve</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.OffsetCurve.Curves">
      <summary>The offset curves</summary>
    </member>
    <member name="P:Snap.NX.OffsetCurve.NXOpenOffsetCurve">
      <summary>The enclosed NXOpen.Features.OffsetCurve object</summary>
    </member>
    <member name="P:Snap.NX.OffsetCurve.OffsetCurveBuilder">
      <summary>The NXOpen.Features.OffsetCurveBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.OffsetCurve.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.OffsetCurve tag to a Snap.NX.OffsetCurve</summary>
      <param name="nxopenOffsetCurveTag">The tag of an NXOpen.Features.OffsetCurve object to be converted</param>
      <returns>The Snap.NX.OffsetCurve object formed by wrapping the NXOpen.Features.OffsetCurve having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.OffsetCurve object</exception>
    </member>
    <member name="T:Snap.NX.OffsetFace">
      <summary>
            Represents a Snap.NX.OffsetFace feature (interchangeable with <see cref="T:NXOpen.Features.OffsetFace">NXOpen.Features.OffsetFace</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.OffsetFace.Distance">
      <summary>Offset Distance</summary>
    </member>
    <member name="P:Snap.NX.OffsetFace.NXOpenDisplayableObjects">
      <summary>The associated NXOpen.DisplayableObjects array of this NX.Feature.OffsetFace</summary>
    </member>
    <member name="P:Snap.NX.OffsetFace.NXOpenOffsetFace">
      <summary>The enclosed NXOpen.Features.OffsetFace object</summary>
    </member>
    <member name="P:Snap.NX.OffsetFace.OffsetFaceBuilder">
      <summary>The NXOpen.Features.OffsetFaceBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.OffsetFace.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.OffsetFace tag to a Snap.NX.OffsetFace</summary>
      <param name="nxopenOffsetFaceTag">The tag of an NXOpen.Features.OffsetFace object to be converted</param>
      <returns>The Snap.NX.OffsetFace object formed by wrapping the NXOpen.Features.OffsetFace having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.OffsetFace object</exception>
    </member>
    <member name="T:Snap.NX.Part">
      <summary>
            Represents an NX.Part object (interchangeable with <see cref="T:NXOpen.Part">NXOpen.Part</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Part.Arcs">
      <summary>An array containing all the <see cref="T:Snap.NX.Arc">NX.Arc</see> objects in this part</summary>
    </member>
    <member name="P:Snap.NX.Part.Bodies">
      <summary>An array containing all the <see cref="T:Snap.NX.Body">NX.Body</see> objects in this part</summary>
    </member>
    <member name="P:Snap.NX.Part.Categories">
      <summary>An array containing all the <see cref="T:Snap.NX.Category">NX.Category</see> objects in this part</summary>
    </member>
    <member name="M:Snap.NX.Part.Close(System.Boolean,System.Boolean)">
      <summary>Close the part</summary>
      <param name="CloseWholeTree">Indicates which parts in subassemblies should be closed</param>
      <param name="CloseModified">Indicates whether modified parts should be closed</param>
    </member>
    <member name="P:Snap.NX.Part.CoordinateSystems">
      <summary>An array containing all the <see cref="T:Snap.NX.CoordinateSystem">NX.CoordinateSystem</see> objects in this part</summary>
    </member>
    <member name="P:Snap.NX.Part.Curves">
      <summary>An array containing all the <see cref="T:Snap.NX.Curve">NX.Curve</see> objects in this part</summary>
    </member>
    <member name="M:Snap.NX.Part.DeleteAttributes(NXOpen.NXObject.AttributeType)">
      <summary>Deletes all attributes of a given type</summary>
      <param name="type">The attribute type -- see remarks below</param>
    </member>
    <member name="M:Snap.NX.Part.DeleteAttributes(NXOpen.NXObject.AttributeType,System.String)">
      <summary>Deletes an attribute with a given type and title</summary>
      <param name="type">The type of the attribute that is to be deleted -- see remarks below</param>
      <param name="title">The title of the attribute that is to be deleted</param>
    </member>
    <member name="P:Snap.NX.Part.Ellipses">
      <summary>An array containing all the <see cref="T:Snap.NX.Ellipse">NX.Ellipse</see> objects in this part</summary>
    </member>
    <member name="P:Snap.NX.Part.Expressions">
      <summary>An array containing all the <see cref="T:Snap.NX.Expression">NX.Expression</see> objects in this part</summary>
    </member>
    <member name="P:Snap.NX.Part.Features">
      <summary>An array containing all the <see cref="T:Snap.NX.Feature">NX.Feature</see> objects in this part</summary>
    </member>
    <member name="M:Snap.NX.Part.FindByName(System.String)">
      <summary>Finds a part (from among those open in the session), given its name</summary>
      <param name="pathName">The name or pathname of the part</param>
      <returns>An NX.Part object, or <c>Nothing</c> if the part was not found in the session</returns>
    </member>
    <member name="P:Snap.NX.Part.FullPath">
      <summary>
            Full pathname of the part, including extension
            </summary>
    </member>
    <member name="M:Snap.NX.Part.GetAttributeInfo">
      <summary>Returns an array of AttributeInformation structures (type + title)</summary>
      <returns>An array of attribute AttributeInformation structures</returns>
    </member>
    <member name="M:Snap.NX.Part.GetAttributeStrings">
      <summary>Get the object's attributes as strings</summary>
      <returns>An array of strings representing the object's attributes</returns>
    </member>
    <member name="M:Snap.NX.Part.GetBooleanAttribute(System.String)">
      <summary>Returns the value of an attribute of type "Boolean"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (a bool)</returns>
    </member>
    <member name="M:Snap.NX.Part.GetDateTimeAttribute(System.String)">
      <summary>Returns the value of an attribute of type "Time"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (a System.DateTime object)</returns>
    </member>
    <member name="M:Snap.NX.Part.GetIntegerAttribute(System.String)">
      <summary>Returns the value of an attribute of type "Integer"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (an integer)</returns>
    </member>
    <member name="M:Snap.NX.Part.GetRealAttribute(System.String)">
      <summary>Returns the value of an attribute of type "Real"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (a "double" number)</returns>
    </member>
    <member name="M:Snap.NX.Part.GetStringAttribute(System.String)">
      <summary>Returns the value of an attribute of type "String"</summary>
      <param name="title">The title of the attribute</param>
      <returns>The value of the attribute (a string)</returns>
    </member>
    <member name="P:Snap.NX.Part.IsFullyLoaded">
      <summary>If true, indicates that the part is fully loaded</summary>
    </member>
    <member name="P:Snap.NX.Part.Lines">
      <summary>An array containing all the <see cref="T:Snap.NX.Line">NX.Line</see> objects in this part</summary>
    </member>
    <member name="M:Snap.NX.Part.LoadFully">
      <summary>Load the part fully</summary>
    </member>
    <member name="P:Snap.NX.Part.Name">
      <summary>The name of the part</summary>
    </member>
    <member name="P:Snap.NX.Part.Notes">
      <summary>An array containing all the <see cref="T:Snap.NX.Note">NX.Note</see> objects in this part</summary>
    </member>
    <member name="P:Snap.NX.Part.NXOpenPart">
      <summary>The enclosed NXOpen.Part object</summary>
    </member>
    <member name="P:Snap.NX.Part.NXOpenTag">
      <summary>The NXOpen.Tag of the enclosed NXOpen.Part object</summary>
    </member>
    <member name="P:Snap.NX.Part.Objects">
      <summary>An array containing all the <see cref="T:Snap.NX.NXObject">NX.NXObject</see> objects in this part</summary>
    </member>
    <member name="M:Snap.NX.Part.OpenPart(System.String)">
      <summary>Opens an existing .prt part, but does not set it to be the displayed part</summary>
      <param name="pathName">The full pathname of the part</param>
      <returns>An NX.Part object</returns>
    </member>
    <member name="P:Snap.NX.Part.Points">
      <summary>An array containing all the <see cref="T:Snap.NX.Point">NX.Point</see> objects in this part</summary>
    </member>
    <member name="P:Snap.NX.Part.RootComponent">
      <summary>
            The root component, or <c>Nothing</c> if this part is not an assembly
            </summary>
    </member>
    <member name="M:Snap.NX.Part.Save">
      <summary>Save the part</summary>
      <returns>An NXOpen.PartSaveStatus object</returns>
    </member>
    <member name="M:Snap.NX.Part.SaveAs(System.String)">
      <summary>Save the part to a given location</summary>
      <param name="pathName">The full pathname of the location where the part is to be saved</param>
      <returns>An NXOpen.PartSaveStatus object</returns>
    </member>
    <member name="M:Snap.NX.Part.SetBooleanAttribute(System.String,System.Boolean)">
      <summary>Creates and/or sets the value of an attribute of type "Boolean"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
    </member>
    <member name="M:Snap.NX.Part.SetDateTimeAttribute(System.String,System.DateTime)">
      <summary>Creates and/or sets the value of an attribute of type "Time"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
    </member>
    <member name="M:Snap.NX.Part.SetIntegerAttribute(System.String,System.Int32)">
      <summary>Creates and/or sets the value of an attribute of type "Integer"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
    </member>
    <member name="M:Snap.NX.Part.SetNullAttribute(System.String)">
      <summary>Creates an attribute of type "Null"</summary>
      <param name="title">The title of the attribute</param>
    </member>
    <member name="M:Snap.NX.Part.SetRealAttribute(System.String,System.Double)">
      <summary>Creates and/or sets the value of an attribute of type "Real"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
    </member>
    <member name="M:Snap.NX.Part.SetStringAttribute(System.String,System.String)">
      <summary>Creates and/or sets the value of an attribute of type "String"</summary>
      <param name="title">The title of the attribute</param>
      <param name="value">The value to assign</param>
    </member>
    <member name="P:Snap.NX.Part.Splines">
      <summary>An array containing all the <see cref="T:Snap.NX.Spline">NX.Spline</see> objects in this part</summary>
    </member>
    <member name="M:Snap.NX.Part.ToString">
      <summary>
            Returns a string representation of the part
            </summary>
      <returns>A string containing the object type (Part) and its NXOpen tag</returns>
    </member>
    <member name="M:Snap.NX.Part.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Part tag to a Snap.NX.Part</summary>
      <param name="nxopenPartTag">The tag of an NXOpen.Part object to be converted</param>
      <returns>The Snap.NX.Part object formed by wrapping the NXOpen.Part having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Part object</exception>
    </member>
    <member name="T:Snap.NX.Part.AttributeInformation">
      <summary>Contains attribute information.</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeInformation.Title">
      <summary>Attribute title</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeInformation.Type">
      <summary>Attribute type</summary>
    </member>
    <member name="T:Snap.NX.Part.AttributeType">
      <summary>Specifies attribute type</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeType.Null">
      <summary>Null</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeType.Bool">
      <summary>Bool</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeType.Integer">
      <summary>Integer</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeType.Real">
      <summary>Real</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeType.String">
      <summary>String</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeType.Time">
      <summary>Time and Date</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeType.Reference">
      <summary>Reference</summary>
    </member>
    <member name="F:Snap.NX.Part.AttributeType.Any">
      <summary>All types</summary>
    </member>
    <member name="T:Snap.NX.Part.Templates">
      <summary>Template types that can be used when creating a new part</summary>
    </member>
    <member name="F:Snap.NX.Part.Templates.Modeling">
      <summary>A Part Modeling template, with a datum CSYS</summary>
    </member>
    <member name="F:Snap.NX.Part.Templates.Assembly">
      <summary>An Assembly Modeling template</summary>
    </member>
    <member name="F:Snap.NX.Part.Templates.ShapeStudio">
      <summary>A Shape Studio template, with perspective and grid</summary>
    </member>
    <member name="F:Snap.NX.Part.Templates.NXSheetMetal">
      <summary>A sheet metal template</summary>
    </member>
    <member name="F:Snap.NX.Part.Templates.AeroSheetMetal">
      <summary>An aerospace sheet metal template</summary>
    </member>
    <member name="F:Snap.NX.Part.Templates.RoutingLogical">
      <summary>A Logical Routing template</summary>
    </member>
    <member name="F:Snap.NX.Part.Templates.RoutingMechanical">
      <summary>A Mechanical Routing template</summary>
    </member>
    <member name="F:Snap.NX.Part.Templates.RoutingElectrical">
      <summary>An Electrical Routing template</summary>
    </member>
    <member name="F:Snap.NX.Part.Templates.Blank">
      <summary>A template that creates a blank part file</summary>
    </member>
    <member name="T:Snap.NX.Part.Units">
      <summary>Part units</summary>
    </member>
    <member name="F:Snap.NX.Part.Units.MilliMeters">
      <summary>Abbreviation : mm</summary>
    </member>
    <member name="F:Snap.NX.Part.Units.Inches">
      <summary>Abbreviation : in</summary>
    </member>
    <member name="T:Snap.NX.Point">
      <summary>
            Represents a Snap.NX.Point object (interchangeable with <see cref="T:NXOpen.Point">NXOpen.Point</see>)
            </summary>
    </member>
    <member name="M:Snap.NX.Point.Copy">
      <summary>Copies an NX.Point (with a null transform)</summary>
      <returns>A copy of the input point</returns>
    </member>
    <member name="M:Snap.NX.Point.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an NX.Point</summary>
      <param name="xform">Transform to be applied</param>
      <returns>A transformed copy of NX.Point</returns>
    </member>
    <member name="M:Snap.NX.Point.Copy(Snap.Geom.Transform,Snap.NX.Point[])">
      <summary>Transforms/copies an array of NX.Point objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.Point array</param>
      <returns>A copy of the input points</returns>
    </member>
    <member name="M:Snap.NX.Point.Copy(Snap.NX.Point[])">
      <summary>Copies an array of NX.Point (with no transform)</summary>
      <param name="original">Original NX.Point array</param>
      <returns>A copy of the input points</returns>
    </member>
    <member name="P:Snap.NX.Point.NXOpenPoint">
      <summary>The enclosed NXOpen.Point object (actually a "Smart Point")</summary>
    </member>
    <member name="P:Snap.NX.Point.Position">
      <summary>The position of the point</summary>
    </member>
    <member name="P:Snap.NX.Point.Prototype">
      <summary>
            Returns the prototype point of this point (if it has one)
            </summary>
    </member>
    <member name="M:Snap.NX.Point.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Point tag to a Snap.NX.Point</summary>
      <param name="nxopenPointTag">The tag of an NXOpen.Point object to be converted</param>
      <returns>The Snap.NX.Point object formed by wrapping the NXOpen.Point having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Point object</exception>
    </member>
    <member name="P:Snap.NX.Point.X">
      <summary>The x-coordinate of the point</summary>
    </member>
    <member name="P:Snap.NX.Point.Y">
      <summary>The y-coordinate of the point</summary>
    </member>
    <member name="P:Snap.NX.Point.Z">
      <summary>The z-coordinate of the point</summary>
    </member>
    <member name="T:Snap.NX.ProjectCurve">
      <summary>
            Represents a Snap.NX.ProjectCurve feature (interchangeable with <see cref="T:NXOpen.Features.ProjectCurve">NXOpen.Features.ProjectCurve</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.ProjectCurve.Curves">
      <summary>The curves generated by projecting curves</summary>
    </member>
    <member name="P:Snap.NX.ProjectCurve.NXOpenProjectCurve">
      <summary>The enclosed <see cref="T:NXOpen.Features.ProjectCurve">NXOpen.Features.ProjectCurve</see> object</summary>
    </member>
    <member name="P:Snap.NX.ProjectCurve.Points">
      <summary>The points generated by projecting points</summary>
    </member>
    <member name="P:Snap.NX.ProjectCurve.ProjectCurveBuilder">
      <summary>The NXOpen.Features.ProjectCurveBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.ProjectCurve.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.ProjectCurve tag to a Snap.NX.ProjectCurve</summary>
      <param name="nxopenProjectCurveTag">The tag of an NXOpen.Features.ProjectCurve object to be converted</param>
      <returns>The Snap.NX.ProjectCurve object formed by wrapping the NXOpen.Features.ProjectCurve having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.ProjectCurve object</exception>
    </member>
    <member name="T:Snap.NX.Revolve">
      <summary>
            Represents a Snap.NX.Revolve feature (interchangeable with <see cref="T:NXOpen.Features.Revolve">NXOpen.Features.Revolve</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Revolve.AxisPoint">
      <summary>The axis point of the revolve</summary>
    </member>
    <member name="P:Snap.NX.Revolve.AxisVector">
      <summary>The axis vector of the revolve</summary>
    </member>
    <member name="P:Snap.NX.Revolve.Extents">
      <summary>The extents of the revolve</summary>
    </member>
    <member name="P:Snap.NX.Revolve.ICurves">
      <summary>The icurves used to revolve</summary>
    </member>
    <member name="P:Snap.NX.Revolve.NXOpenRevolve">
      <summary>The enclosed NXOpen.Features.Revolve object</summary>
    </member>
    <member name="P:Snap.NX.Revolve.Offsets">
      <summary>The offsets of the revolve</summary>
    </member>
    <member name="P:Snap.NX.Revolve.RevolveBuilder">
      <summary>The NXOpen.Features.RevolveBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.Revolve.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Revolve tag to a Snap.NX.Revolve</summary>
      <param name="nxopenRevolveTag">The tag of an NXOpen.Features.Revolve object to be converted</param>
      <returns>The Snap.NX.Revolve object formed by wrapping the NXOpen.Features.Revolve having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Revolve object</exception>
    </member>
    <member name="T:Snap.NX.Ruled">
      <summary>
            Represents a Snap.NX.Ruled feature (interchangeable with <see cref="T:NXOpen.Features.Ruled">NXOpen.Features.Ruled</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Ruled.FirstCurve">
      <summary>First curve (along u=0)</summary>
    </member>
    <member name="P:Snap.NX.Ruled.NXOpenRuled">
      <summary>The enclosed NXOpen.Features.Ruled object</summary>
    </member>
    <member name="P:Snap.NX.Ruled.RuledBuilder">
      <summary>The NXOpen.Features.RuledBuilder object.</summary>
    </member>
    <member name="P:Snap.NX.Ruled.SecondCurve">
      <summary>Second curve (along u=1)</summary>
    </member>
    <member name="M:Snap.NX.Ruled.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Ruled tag to a Snap.NX.Ruled</summary>
      <param name="nxopenRuledTag">The tag of an NXOpen.Features.Ruled object to be converted</param>
      <returns>The Snap.NX.Ruled object formed by wrapping the NXOpen.Features.Ruled having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Ruled object</exception>
    </member>
    <member name="T:Snap.NX.Sew">
      <summary>
            Represents a Snap.NX.Sew feature (interchangeable with <see cref="T:NXOpen.Features.Sew">NXOpen.Features.Sew</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Sew.NXOpenSew">
      <summary>The enclosed NXOpen.Features.Sew object</summary>
    </member>
    <member name="P:Snap.NX.Sew.SewBuilder">
      <summary>The enclosed NXOpen.Features.SewBuilder object</summary>
    </member>
    <member name="M:Snap.NX.Sew.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Sew tag to a Snap.NX.Sew</summary>
      <param name="nxopenSewTag">The tag of an NXOpen.Features.Sew object to be converted</param>
      <returns>The Snap.NX.Sew object formed by wrapping the NXOpen.Features.Sew having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Sew object</exception>
    </member>
    <member name="T:Snap.NX.Sphere">
      <summary>
            Represents a Snap.NX.Sphere feature (interchangeable with <see cref="T:NXOpen.Features.Sphere">NXOpen.Features.Sphere</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Sphere.Center">
      <summary>The position of the center of the sphere</summary>
    </member>
    <member name="P:Snap.NX.Sphere.Diameter">
      <summary>The diameter of sphere</summary>
    </member>
    <member name="P:Snap.NX.Sphere.NXOpenSphere">
      <summary>The enclosed NXOpen.Features.Sphere object</summary>
    </member>
    <member name="P:Snap.NX.Sphere.SphereBuilder">
      <summary>The NXOpen.Features.SphereBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.Sphere.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Sphere tag to a Snap.NX.Sphere</summary>
      <param name="nxopenSphereTag">The tag of an NXOpen.Features.Sphere object to be converted</param>
      <returns>The Snap.NX.Sphere object formed by wrapping the NXOpen.Features.Sphere having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Sphere object</exception>
    </member>
    <member name="T:Snap.NX.Spline">
      <summary>
            Represents a Snap.NX.Spline object (interchangeable with <see cref="T:NXOpen.Spline">NXOpen.Spline</see>)
            </summary>
    </member>
    <member name="M:Snap.NX.Spline.Copy">
      <summary>Copies an NX.Spline (with a null transform)</summary>
      <returns>A copy of the input point</returns>
    </member>
    <member name="M:Snap.NX.Spline.Copy(Snap.Geom.Transform)">
      <summary>Transforms/copies an NX.Spline</summary>
      <param name="xform">Transform to be applied</param>
      <returns>A transformed copy of NX.Spline</returns>
    </member>
    <member name="M:Snap.NX.Spline.Copy(Snap.Geom.Transform,Snap.NX.Spline[])">
      <summary>Transforms/copies an array of NX.Spline objects</summary>
      <param name="xform">Transform to be applied</param>
      <param name="original">Original NX.Spline array</param>
      <returns>A copy of the input splines</returns>
    </member>
    <member name="M:Snap.NX.Spline.Copy(Snap.NX.Spline[])">
      <summary>Copies an array of NX.Spline (with no transform)</summary>
      <param name="original">Original NX.Spline array</param>
      <returns>A copy of the input splines</returns>
    </member>
    <member name="P:Snap.NX.Spline.Degree">
      <summary>The degree of the spline, m (equal to order - 1)</summary>
    </member>
    <member name="M:Snap.NX.Spline.Divide">
      <summary>Divide a spline into segments at its knots</summary>
      <returns>An array of <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Spline.Divide(Snap.Geom.Surface.Plane,Snap.Position)">
      <summary>Divide a spline at an intersection with a given plane</summary>
      <param name="geomPlane">A plane to be used to divide the given spline</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Spline.Divide(Snap.NX.Face,Snap.Position)">
      <summary>Divide a spline at an intersection with a given face</summary>
      <param name="face">A face to be used to divide the given spline</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Spline.Divide(Snap.NX.ICurve,Snap.Position)">
      <summary>Divide a spline at an intersection with another curve</summary>
      <param name="boundingCurve">Bounding curve to be used to divide the given spline</param>
      <param name="helpPoint">A point near the desired dividing point</param>
      <returns>An array of two <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> objects</returns>
    </member>
    <member name="M:Snap.NX.Spline.Divide(System.Double[])">
      <summary>Divide a spline at an array of parameter values</summary>
      <param name="parameters">The parameter values at which the spline should be divided</param>
      <returns>An array of <see cref="T:Snap.NX.Spline">Snap.NX.Spline</see> objects</returns>
    </member>
    <member name="P:Snap.NX.Spline.Geometry">
      <summary>The geometric data of the spline curve</summary>
    </member>
    <member name="P:Snap.NX.Spline.Knots">
      <summary>Array of knot values </summary>
    </member>
    <member name="P:Snap.NX.Spline.NXOpenSpline">
      <summary>The enclosed NXOpen.Spline object</summary>
    </member>
    <member name="P:Snap.NX.Spline.Order">
      <summary>The order of the spline, k (equal to degree + 1)</summary>
    </member>
    <member name="P:Snap.NX.Spline.Poles">
      <summary> Array of 3D positions representing poles (control points)</summary>
    </member>
    <member name="P:Snap.NX.Spline.Prototype">
      <summary>
            Returns the prototype spline of this one (if it has one)
            </summary>
    </member>
    <member name="P:Snap.NX.Spline.Weights">
      <summary> Array of values representing weights</summary>
    </member>
    <member name="M:Snap.NX.Spline.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Spline tag to a Snap.NX.Spline</summary>
      <param name="nxopenSplineTag">The tag of an NXOpen.Spline object to be converted</param>
      <returns>The Snap.NX.Spline object formed by wrapping the NXOpen.Spline having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Spline object</exception>
    </member>
    <member name="T:Snap.NX.SplitBody">
      <summary>
            Represents a Snap.NX.SplitBody feature (interchangeable with <see cref="T:NXOpen.Features.SplitBody">NXOpen.Features.SplitBody</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.SplitBody.NXOpenSplitBody">
      <summary>The enclosed NXOpen.Features.SplitBody object</summary>
    </member>
    <member name="P:Snap.NX.SplitBody.SplitBodyBuilder">
      <summary>The NXOpen.Features.SplitBodyBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.SplitBody.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.SplitBody tag to a Snap.NX.SplitBody</summary>
      <param name="nxopenSplitBodyTag">The tag of an NXOpen.Features.SplitBody object to be converted</param>
      <returns>The Snap.NX.SplitBody object formed by wrapping the NXOpen.Features.SplitBody having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.SplitBody object</exception>
    </member>
    <member name="T:Snap.NX.TextStyle">
      <summary>An object describing the style (font, color, etc.) of text</summary>
    </member>
    <member name="M:Snap.NX.TextStyle.#ctor">
      <summary>Construct a text style</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.AlignmentPosition">
      <summary>One of nine "sites" used to locate the text</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.AspectRatio">
      <summary>A multiplier used to adjust the shapes of characters. Values greater than 1 will make characters wider than normal. </summary>
    </member>
    <member name="P:Snap.NX.TextStyle.CharSpaceFactor">
      <summary>A multiplier used to adjust the spacing between characters</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.Color">
      <summary>The color of the text</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.FontIndex">
      <summary>The index of the font within the part file's font table</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.FontName">
      <summary>The name of the primary font</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.FontSize">
      <summary>The font size (in points)</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.FontStyle">
      <summary>The style of the text (bold, italic, etc.)</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.HorizontalTextJustification">
      <summary>The horizontal  justification of the text (left, center, or right)</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.IsVertical">
      <summary>If true, indicates that the text will be oriented vertically, not horizontally</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.LineAngle">
      <summary>The angle between the baseline of the text and the horizontal</summary>
    </member>
    <member name="P:Snap.NX.TextStyle.LineSpaceFactor">
      <summary>A multiplier used to adjust the spacing between lines of text</summary>
    </member>
    <member name="M:Snap.NX.TextStyle.SetFont(System.String,Snap.NX.TextStyle.FontType)">
      <summary>Sets the primary font for text</summary>
      <param name="fontName">The name of the font to be used</param>
      <param name="fontType">The type of font (either a standard system font or an NX font)</param>
    </member>
    <member name="P:Snap.NX.TextStyle.StrokeWidth">
      <summary>The width (thickness) of the strokes used to draw the font</summary>
    </member>
    <member name="T:Snap.NX.TextStyle.AlignmentPositions">
      <summary>Specifies the site location in the text box which can be used to locate a drafting object</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.AlignmentPositions.TopLeft">
      <summary>Top left of the bounding rectangle</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.AlignmentPositions.TopCenter">
      <summary>Top center of the bounding rectangle</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.AlignmentPositions.TopRight">
      <summary>Top right of the bounding rectangle</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.AlignmentPositions.MidLeft">
      <summary>Mid left of the bounding rectangle</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.AlignmentPositions.MidCenter">
      <summary>Mid center of the bounding rectangle</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.AlignmentPositions.MidRight">
      <summary>Mid right of the bounding rectangle</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.AlignmentPositions.BottomLeft">
      <summary>Bottom left of the bounding rectangle</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.AlignmentPositions.BottomCenter">
      <summary>Bottom center of the bounding rectangle</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.AlignmentPositions.BottomRight">
      <summary>Bottom right of the bounding rectangle</summary>
    </member>
    <member name="T:Snap.NX.TextStyle.FontType">
      <summary>Specifies the type of font</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.FontType.NX">
      <summary>NX font</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.FontType.Standard">
      <summary>Standard system font</summary>
    </member>
    <member name="T:Snap.NX.TextStyle.TextJustification">
      <summary> Represents the horizontal text justification</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.TextJustification.Center">
      <summary>Center</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.TextJustification.Left">
      <summary>Left</summary>
    </member>
    <member name="F:Snap.NX.TextStyle.TextJustification.Right">
      <summary>Right</summary>
    </member>
    <member name="T:Snap.NX.Thicken">
      <summary>
            Represents a Snap.NX.Thicken feature (interchangeable with <see cref="T:NXOpen.Features.Thicken">NXOpen.Features.Thicken</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Thicken.NXOpenThicken">
      <summary>The enclosed NXOpen.Features.Thicken object</summary>
    </member>
    <member name="P:Snap.NX.Thicken.Offset1">
      <summary>The first offset distance</summary>
    </member>
    <member name="P:Snap.NX.Thicken.Offset2">
      <summary>The second offset distance</summary>
    </member>
    <member name="P:Snap.NX.Thicken.ThickenBuilder">
      <summary>The NXOpen.Features.ThickenBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.Thicken.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Thicken tag to a Snap.NX.Thicken</summary>
      <param name="nxopenThickenTag">The tag of an NXOpen.Features.Thicken object to be converted</param>
      <returns>The Snap.NX.Thicken object formed by wrapping the NXOpen.Features.Thicken having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Thicken object</exception>
    </member>
    <member name="T:Snap.NX.ThroughCurveMesh">
      <summary>
            Represents a Snap.NX.ThroughCurveMesh feature (interchangeable with <see cref="T:NXOpen.Features.ThroughCurveMesh">NXOpen.Features.ThroughCurveMesh</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.ThroughCurveMesh.NXOpenThroughCurveMesh">
      <summary>The enclosed NXOpen.Features.ThroughCurveMesh object</summary>
    </member>
    <member name="P:Snap.NX.ThroughCurveMesh.ThroughCurveMeshBuilder">
      <summary>The NXOpen.Features.ThroughCurveMeshBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.ThroughCurveMesh.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.ThroughCurveMesh tag to a Snap.NX.ThroughCurveMesh</summary>
      <param name="nxopenThroughCurveMeshTag">The tag of an NXOpen.Features.ThroughCurveMesh object to be converted</param>
      <returns>The Snap.NX.ThroughCurveMesh object formed by wrapping the NXOpen.Features.ThroughCurveMesh having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.ThroughCurveMesh object</exception>
    </member>
    <member name="T:Snap.NX.ThroughCurves">
      <summary>
            Represents a Snap.NX.ThroughCurves feature (interchangeable with <see cref="T:NXOpen.Features.ThroughCurves">NXOpen.Features.ThroughCurves</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.ThroughCurves.ICurves">
      <summary>The ICurves which are associated with the through curves object</summary>
    </member>
    <member name="P:Snap.NX.ThroughCurves.NXOpenThroughCurves">
      <summary>The enclosed NXOpen.Features.ThroughCurves object</summary>
    </member>
    <member name="P:Snap.NX.ThroughCurves.ThroughCurvesBuilder">
      <summary>The NXOpen.Features.ThroughCurvesBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.ThroughCurves.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.ThroughCurves tag to a Snap.NX.ThroughCurves</summary>
      <param name="nxopenThroughCurvesTag">The tag of an NXOpen.Features.ThroughCurves object to be converted</param>
      <returns>The Snap.NX.ThroughCurves object formed by wrapping the NXOpen.Features.ThroughCurves having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.ThroughCurves object</exception>
    </member>
    <member name="T:Snap.NX.Torus">
      <summary>
            Represents a Snap.NX.Torus object (a special kind of NX.Revolved object) (interchangeable with <see cref="T:NXOpen.Features.Revolve">NXOpen.Features.Revolve</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Torus.AxisPoint">
      <summary>Axis point</summary>
    </member>
    <member name="P:Snap.NX.Torus.AxisVector">
      <summary>Axis vector</summary>
    </member>
    <member name="P:Snap.NX.Torus.MajorRadius">
      <summary>Major radius. The radius of the "spine" circle, which can be either positive or negative</summary>
    </member>
    <member name="P:Snap.NX.Torus.MinorRadius">
      <summary>Minor radius. The radius of the "section" circle, which must be positive.</summary>
    </member>
    <member name="T:Snap.NX.TrimBody">
      <summary>
            Represents a Snap.NX.TrimBody feature (interchangeable with <see cref="T:NXOpen.Features.TrimBody2">NXOpen.Features.TrimBody2</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.TrimBody.NXOpenTrimBody">
      <summary>The enclosed NXOpen.Features.TrimBody2 object</summary>
    </member>
    <member name="P:Snap.NX.TrimBody.TrimBodyBuilder">
      <summary>The NXOpen.Features.TrimBody2Builder object.</summary>
    </member>
    <member name="M:Snap.NX.TrimBody.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.TrimBody2 tag to a Snap.NX.TrimBody</summary>
      <param name="nxopenTrimBodyTag">The tag of an NXOpen.Features.TrimBody2 object to be converted</param>
      <returns>The Snap.NX.TrimBody object formed by wrapping the NXOpen.Features.TrimBody2 having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.TrimBody2 object</exception>
    </member>
    <member name="T:Snap.NX.Tube">
      <summary>
            Represents a Snap.NX.Tube feature (interchangeable with <see cref="T:NXOpen.Features.Tube">NXOpen.Features.Tube</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Tube.InnerDiameter">
      <summary>The inner diameter of the tube</summary>
    </member>
    <member name="P:Snap.NX.Tube.NXOpenTube">
      <summary>The enclosed NXOpen.Features.Tube object</summary>
    </member>
    <member name="P:Snap.NX.Tube.OuterDiameter">
      <summary>The outer diameter of the tube</summary>
    </member>
    <member name="P:Snap.NX.Tube.Spine">
      <summary>Curve used in creation -- the centerline of the tube</summary>
    </member>
    <member name="P:Snap.NX.Tube.TubeBuilder">
      <summary>The NXOpen.Features.TubeBuilder object.</summary>
    </member>
    <member name="M:Snap.NX.Tube.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Features.Tube tag to a Snap.NX.Tube</summary>
      <param name="nxopenTubeTag">The tag of an NXOpen.Features.Tube object to be converted</param>
      <returns>The Snap.NX.Tube object formed by wrapping the NXOpen.Features.Tube having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Features.Tube object</exception>
    </member>
    <member name="T:Snap.NX.Unit">
      <summary>
            Represents a Snap.NX.Unit object (interchangeable with <see cref="T:NXOpen.Unit">NXOpen.Unit</see>)
            </summary>
    </member>
    <member name="P:Snap.NX.Unit.Abbreviation">
      <summary>The abbreviated name of the unit</summary>
    </member>
    <member name="F:Snap.NX.Unit.Degree">
      <summary>A Snap.NX.Unit object representing "Degrees"</summary>
    </member>
    <member name="F:Snap.NX.Unit.Inch">
      <summary>A Snap.NX.Unit object representing "Inches"</summary>
    </member>
    <member name="F:Snap.NX.Unit.Millimeter">
      <summary>A Snap.NX.Unit object representing "Millimeters"</summary>
    </member>
    <member name="P:Snap.NX.Unit.Name">
      <summary>The name of the unit</summary>
    </member>
    <member name="P:Snap.NX.Unit.NXOpenUnit">
      <summary>The enclosed NXOpen.Unit object</summary>
    </member>
    <member name="F:Snap.NX.Unit.Radian">
      <summary>A Snap.NX.Unit object representing "Radians"</summary>
    </member>
    <member name="M:Snap.NX.Unit.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.Unit tag to a Snap.NX.Unit</summary>
      <param name="nxopenUnitTag">The tag of an NXOpen.Unit object to be converted</param>
      <returns>The Snap.NX.Unit object formed by wrapping the NXOpen.Unit having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.Unit object</exception>
    </member>
    <member name="T:Snap.NX.View">
      <summary>Represents a View object (interchangeable with <see cref="T:NXOpen.View">NXOpen.View</see>)
            </summary>
    </member>
    <member name="M:Snap.NX.View.FindByName(System.String)">
      <summary>Find the view in the work part that has a given name</summary>
      <param name="name">Name of the view</param>
      <returns>The NX.View object having the given name, or <c>Nothing</c></returns>
    </member>
    <member name="P:Snap.NX.View.Name">
      <summary>The name of the view</summary>
    </member>
    <member name="P:Snap.NX.View.NXOpenTag">
      <summary>Get the NXOpen.Tag from this NX.View</summary>
    </member>
    <member name="P:Snap.NX.View.NXOpenView">
      <summary>The enclosed NXOpen.View object</summary>
    </member>
    <member name="M:Snap.NX.View.ToString">
      <summary>
            Returns a string representation of the view
            </summary>
      <returns>A string containing the object type (view) and its NXOpen tag</returns>
    </member>
    <member name="M:Snap.NX.View.Wrap(NXOpen.Tag)">
      <summary>Convert an NXOpen.View tag to a Snap.NX.View</summary>
      <param name="nxopenViewTag">The tag of an NXOpen.View object to be converted</param>
      <returns>The Snap.NX.View object formed by wrapping the NXOpen.View having the given tag</returns>
      <exception cref="T:System.ArgumentException">The input tag is NXOpen.Tag.Null, or it doesn't belong to an NXOpen.View object</exception>
    </member>
    <member name="T:Snap.NX.View.Standard">
      <summary>A class containing standard or "canned" views (top, front, right, etc.)</summary>
    </member>
    <member name="P:Snap.NX.View.Standard.Back">
      <summary>The standard or "canned" back view</summary>
    </member>
    <member name="P:Snap.NX.View.Standard.Bottom">
      <summary>The standard or "canned" bottom view</summary>
    </member>
    <member name="P:Snap.NX.View.Standard.Front">
      <summary>The standard or "canned" front view</summary>
    </member>
    <member name="P:Snap.NX.View.Standard.Isometric">
      <summary>The standard or "canned" isometric view</summary>
    </member>
    <member name="P:Snap.NX.View.Standard.Left">
      <summary>The standard or "canned" left side view</summary>
    </member>
    <member name="P:Snap.NX.View.Standard.Right">
      <summary>The standard or "canned" right side view</summary>
    </member>
    <member name="P:Snap.NX.View.Standard.Top">
      <summary>The standard or "canned" top view</summary>
    </member>
    <member name="P:Snap.NX.View.Standard.Trimetric">
      <summary>The standard or "canned" trimetric view</summary>
    </member>
    <member name="T:Snap.Topology.Fin">
      <summary>A fin is "half" of an edge -- an oriented use of an edge by a loop</summary>
    </member>
    <member name="P:Snap.Topology.Fin.Body">
      <summary>The body on which this fin lies</summary>
    </member>
    <member name="P:Snap.Topology.Fin.Edge">
      <summary>The edge to which this fin belongs</summary>
    </member>
    <member name="P:Snap.Topology.Fin.EndVertex">
      <summary>The end vertex of the fin</summary>
    </member>
    <member name="P:Snap.Topology.Fin.Face">
      <summary>The face to which this fin belongs</summary>
    </member>
    <member name="P:Snap.Topology.Fin.Loop">
      <summary>The loop to which this fin belongs</summary>
    </member>
    <member name="P:Snap.Topology.Fin.Next">
      <summary>The next fin in the loop</summary>
    </member>
    <member name="P:Snap.Topology.Fin.Previous">
      <summary>The previous fin in the loop</summary>
    </member>
    <member name="P:Snap.Topology.Fin.Sense">
      <summary>The sense of the fin with respect to its owning edge</summary>
    </member>
    <member name="P:Snap.Topology.Fin.StartVertex">
      <summary>The end vertex of the fin</summary>
    </member>
    <member name="M:Snap.Topology.Fin.ToString">
      <summary>
            Returns a string representation of the fin
            </summary>
      <returns>A string containing the object type and its Parasolid tag</returns>
    </member>
    <member name="T:Snap.Topology.Loop">
      <summary>A loop is a connected sequence of fins that form part of the boundary of a face</summary>
    </member>
    <member name="P:Snap.Topology.Loop.Body">
      <summary>The body on which this loop lies</summary>
    </member>
    <member name="P:Snap.Topology.Loop.Edges">
      <summary>The array of edges in the loop</summary>
    </member>
    <member name="P:Snap.Topology.Loop.Face">
      <summary>The face on which this loop lies</summary>
    </member>
    <member name="P:Snap.Topology.Loop.Fins">
      <summary>The array of fins in the loop</summary>
    </member>
    <member name="M:Snap.Topology.Loop.ToString">
      <summary>
            Returns a string representation of the loop
            </summary>
      <returns>A string containing the object type and its Parasolid tag</returns>
    </member>
    <member name="P:Snap.Topology.Loop.Type">
      <summary>The type of the loop (peripheral, hole, etc.)</summary>
    </member>
    <member name="P:Snap.Topology.Loop.Vertices">
      <summary>The array of vertices in the loop</summary>
    </member>
    <member name="T:Snap.Topology.LoopType">
      <summary>
            The type of a 
            <see cref="T:Snap.Topology.Loop">Loop</see> object.
            </summary>
    </member>
    <member name="F:Snap.Topology.LoopType.Outer">
      <summary>A simple peripheral loop</summary>
    </member>
    <member name="F:Snap.Topology.LoopType.Inner">
      <summary>A simple hole loop</summary>
    </member>
    <member name="F:Snap.Topology.LoopType.Winding">
      <summary>A winding loop on a periodic surface e.g. a circle on a cylinder or doughnut</summary>
    </member>
    <member name="F:Snap.Topology.LoopType.InnerSingular">
      <summary>A hole loop around a surface singularity, e.g. chopping the top off a cone</summary>
    </member>
    <member name="F:Snap.Topology.LoopType.LikelyOuter">
      <summary>An apparently peripheral loop on a doubly closed surface</summary>
    </member>
    <member name="F:Snap.Topology.LoopType.LikelyInner">
      <summary>An apparent hole in a doubly closed surface</summary>
    </member>
    <member name="F:Snap.Topology.LoopType.Unknown">
      <summary>Unknown    loop type </summary>
    </member>
    <member name="T:Snap.Topology.Sense">
      <summary>
            A plus/minus value used to indicate the sense of a
            <see cref="T:Snap.NX.Face">Face</see>,
            <see cref="T:Snap.NX.Edge">Edge</see>, or
            <see cref="T:Snap.Topology.Fin">Fin</see>.
            </summary>
    </member>
    <member name="F:Snap.Topology.Sense.Positive">
      <summary>The items are aligned (they have the same sense)</summary>
    </member>
    <member name="F:Snap.Topology.Sense.Negative">
      <summary>The items are anti-aligned (they have opposite senses)</summary>
    </member>
    <member name="T:Snap.Topology.Shell">
      <summary>A shell is a connected set of faces forming part of the boundary of a body</summary>
    </member>
    <member name="P:Snap.Topology.Shell.Body">
      <summary>The body that contains this shell</summary>
    </member>
    <member name="P:Snap.Topology.Shell.Faces">
      <summary>The array of <see cref="T:Snap.NX.Face">faces</see> in the shell</summary>
    </member>
    <member name="M:Snap.Topology.Shell.ToString">
      <summary>
            Returns a string representation of the shell
            </summary>
      <returns>A string containing the object type and its Parasolid tag</returns>
    </member>
    <member name="P:Snap.Topology.Shell.Type">
      <summary>The type of the shell (Outer, Inner, or Open)</summary>
    </member>
    <member name="T:Snap.Topology.ShellType">
      <summary>
            The type of a 
            <see cref="T:Snap.Topology.Shell">Shell</see> object.
            </summary>
    </member>
    <member name="F:Snap.Topology.ShellType.Outer">
      <summary>The shell represents the exterior surface of a solid body</summary>
    </member>
    <member name="F:Snap.Topology.ShellType.Inner">
      <summary>The shell represents a void inside a solid body</summary>
    </member>
    <member name="F:Snap.Topology.ShellType.Open">
      <summary>The shell represents a sheet body</summary>
    </member>
    <member name="T:Snap.Topology.Topo">
      <summary>An abstract class representing any topology object</summary>
    </member>
    <member name="M:Snap.Topology.Topo.ToString">
      <summary>
            Returns a string representation of the object
            </summary>
      <returns>A string containing the object type and its Parasolid tag</returns>
    </member>
    <member name="T:Snap.Topology.Vertex">
      <summary>A vertex is a place where several edges meet</summary>
    </member>
    <member name="P:Snap.Topology.Vertex.Body">
      <summary>The body on which this vertex lies</summary>
    </member>
    <member name="P:Snap.Topology.Vertex.Edges">
      <summary>The edges on which the vertex lies</summary>
    </member>
    <member name="P:Snap.Topology.Vertex.Faces">
      <summary>The faces on which the vertex lies</summary>
    </member>
    <member name="P:Snap.Topology.Vertex.Position">
      <summary>The position of the vertex</summary>
    </member>
    <member name="P:Snap.Topology.Vertex.Shell">
      <summary>The shell that the vertex belongs to</summary>
    </member>
    <member name="M:Snap.Topology.Vertex.ToString">
      <summary>
            Returns a string representation of the vertex
            </summary>
      <returns>A string containing the object type and its Parasolid tag</returns>
    </member>
    <member name="T:Snap.UI.BlockDialog">
      <summary>The SNAP class representing an NX Block-Based Dialog</summary>
    </member>
    <member name="M:Snap.UI.BlockDialog.#ctor(System.String)">
      <summary>Creates a Snap.UI.BlockDialog from a given dlx file</summary>
      <param name="dlxPathName">The path name of the dlx file to be used to create the dialog</param>
    </member>
    <member name="P:Snap.UI.BlockDialog.Cue">
      <summary>The message to be displayed in the Cue line</summary>
    </member>
    <member name="M:Snap.UI.BlockDialog.Dispose">
      <summary>Releases memory and other resources used by the dialog</summary>
    </member>
    <member name="F:Snap.UI.BlockDialog.NXOpenBlockDialog">
      <summary>The NXOpen.BlockStyler.BlockDialog object encapsulated by this dialog</summary>
    </member>
    <member name="M:Snap.UI.BlockDialog.Show">
      <summary>Displays the dialog</summary>
      <returns>Response</returns>
    </member>
    <member name="M:Snap.UI.BlockDialog.Show(Snap.UI.DialogMode)">
      <summary>Displays the dialog</summary>
      <param name="mode">Display mode (create or edit)</param>
      <returns>Response</returns>
    </member>
    <member name="P:Snap.UI.BlockDialog.Title">
      <summary>The text to be displayed in the title bar of the dialog </summary>
    </member>
    <member name="T:Snap.UI.BlockForm">
      <summary>Represents a Snap.UI.BlockForm (a type of block-based dialog)</summary>
    </member>
    <member name="M:Snap.UI.BlockForm.#ctor">
      <summary>Creates a new BlockForm</summary>
    </member>
    <member name="M:Snap.UI.BlockForm.#ctor(System.String)">
      <summary>Creates a new BlockForm with a given title</summary>
      <param name="title">Text shown in the title bar of the dialog window</param>
    </member>
    <member name="M:Snap.UI.BlockForm.#ctor(System.String,System.String)">
      <summary>Creates a new BlockForm with a given cue and title</summary>
      <param name="cue">Message to be shown in the Cue line when the dialog is displayed</param>
      <param name="title">Text shown in the title bar of the dialog window</param>
    </member>
    <member name="M:Snap.UI.BlockForm.AddBlocks(Snap.UI.Block.General[])">
      <summary>Add blocks to a BlockForm</summary>
      <param name="blocks">The array of blocks to be added</param>
    </member>
    <member name="P:Snap.UI.BlockForm.Cue">
      <summary>The message to be displayed in the Cue line</summary>
    </member>
    <member name="M:Snap.UI.BlockForm.OnApply">
      <summary>The BlockForm's callback function for the "Apply" event</summary>
    </member>
    <member name="M:Snap.UI.BlockForm.OnCancel">
      <summary>The BlockForm's callback function for the "Cancel" event</summary>
    </member>
    <member name="M:Snap.UI.BlockForm.OnOK">
      <summary>The BlockForm's callback function for the "OK" event</summary>
    </member>
    <member name="M:Snap.UI.BlockForm.OnShow">
      <summary>The BlockForm's callback function for the "Show" event</summary>
    </member>
    <member name="M:Snap.UI.BlockForm.OnUpdate(Snap.UI.Block.General)">
      <summary>Update callback function</summary>
      <param name="changedBlock">The block in which the user made a change</param>
    </member>
    <member name="M:Snap.UI.BlockForm.Show">
      <summary>Displays the BlockForm</summary>
      <returns>Response</returns>
      <exception cref="T:System.InvalidOperationException">The BlockForm does not contain any blocks.</exception>
    </member>
    <member name="M:Snap.UI.BlockForm.Show(Snap.UI.DialogMode)">
      <summary>Displays the BlockForm</summary>
      <param name="mode">Display mode (create or edit)</param>
      <returns>Response</returns>
      <exception cref="T:System.InvalidOperationException">The BlockForm does not contain any blocks.</exception>
    </member>
    <member name="P:Snap.UI.BlockForm.Title">
      <summary>The text to be displayed in the title bar of the form </summary>
    </member>
    <member name="T:Snap.UI.DialogMode">
      <summary>The options of showing the dialog</summary>
    </member>
    <member name="F:Snap.UI.DialogMode.Create">
      <summary>
            When the user presses OK or Apply on the dialog, the user's inputs are saved
            in dialog memory and the next time that the dialog is shown in Create mode,
            the dialog is initialized using the user's previous inputs.
            </summary>
    </member>
    <member name="F:Snap.UI.DialogMode.Edit">
      <summary>
            The Apply button is not shown. The user's inputs are not saved in dialog
            memory and the dialog is not initialized with the user's previous inputs.
            </summary>
    </member>
    <member name="T:Snap.UI.Input">
      <summary>Functions to support simple input of information (numbers, positions, vectors, etc.)</summary>
    </member>
    <member name="M:Snap.UI.Input.GetChoice(System.String[],System.String,System.String,System.String,Snap.UI.Block.EnumPresentationStyle)">
      <summary>Display a simple dialog allowing the user to choose one from a set of items</summary>
      <param name="cue">Message to be shown in the Cue line when the dialog is displayed</param>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="label">Label displayed next to the list of choices</param>
      <param name="items">The array of items to choose from</param>
      <param name="style">Presentation style. Optional. Default = Snap.UI.Block.EnumPresentationStyle.RadioBox</param>
      <returns>The index of the chosen item in the array (zero based)</returns>
    </member>
    <member name="M:Snap.UI.Input.GetChoices(System.String[],System.String,System.String,System.String)">
      <summary>Display a simple dialog allowing the user to choose (one or more) items from a list</summary>
      <param name="cue">Message to be shown in the Cue line when the dialog is displayed</param>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="label">Label displayed above the list of choices</param>
      <param name="items">The array of items to choose from</param>
      <returns>The indices of the chosen items in the array (zero-based)</returns>
    </member>
    <member name="M:Snap.UI.Input.GetDouble(System.String,System.String,System.String,System.Double)">
      <summary>Display a simple dialog allowing the user to input a floating point number</summary>
      <param name="cue">Message to be shown in the Cue line when the dialog is displayed</param>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="label">Label displayed to the left of the numerical entry field</param>
      <param name="initialValue">The initial value to be displayed in the numerical entry field.  Optional. Default = 0.0</param>
      <returns>The number the user entered</returns>
    </member>
    <member name="M:Snap.UI.Input.GetDoubles(System.String,System.String[],System.Double[])">
      <summary>Display a simple dialog allowing the user to input floating point numbers</summary>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="labels">Labels displayed to the left of the numerical entry fields</param>
      <param name="initialValues">The initial values to be displayed in the numerical entry fields</param>
      <returns>The numbers the user entered</returns>
    </member>
    <member name="M:Snap.UI.Input.GetInteger(System.String,System.String,System.String,System.Int32)">
      <summary>Display a simple dialog allowing the user to input an integer number</summary>
      <param name="cue">Message to be shown in the Cue line when the dialog is displayed</param>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="label">Label displayed to the left of the numerical entry field</param>
      <param name="initialValue">The initial value to be shown in the numerical entry field. Optional. Default = 0</param>
      <returns>The integer the user entered</returns>
    </member>
    <member name="M:Snap.UI.Input.GetIntegers(System.String,System.String[],System.Int32[])">
      <summary>Display a simple dialog allowing the user to input integer numbers</summary>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="labels">Labels displayed to the left of the numerical entry fields</param>
      <param name="initialValues">The initial values to be displayed in the numerical entry fields</param>
      <returns>The integer numbers the user entered</returns>
    </member>
    <member name="M:Snap.UI.Input.GetPlane(System.String,System.String)">
      <summary>Display a simple dialog allowing the user to specify a plane</summary>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="label">Label displayed to the left of the plane specified field</param>
      <returns>Structure containing the specified plane</returns>
    </member>
    <member name="M:Snap.UI.Input.GetPosition(System.String,System.String)">
      <summary>Display a simple dialog allowing the user to specify a position</summary>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="label">Label displayed to the left of the position specified field</param>
      <returns>Structure containing the specified position</returns>
    </member>
    <member name="M:Snap.UI.Input.GetString(System.String,System.String,System.String,System.String)">
      <summary>Display a simple dialog allowing the user to input a string</summary>
      <param name="cue">Message to be shown in the Cue line when the dialog is displayed</param>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="label">Label displayed to the left of the string entry field</param>
      <param name="initialValue">The initial value to be displayed in the input field</param>
      <returns>The string the user entered</returns>
    </member>
    <member name="M:Snap.UI.Input.GetStrings(System.String,System.String[],System.String[])">
      <summary>Display a simple dialog allowing the user to input a string array</summary>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="labels">Labels displayed to the left of the string entry fields</param>
      <param name="initialValues">The initial value to be displayed in the input fields</param>
      <returns>The string array the user entered</returns>
    </member>
    <member name="M:Snap.UI.Input.GetVector(System.String,System.String)">
      <summary>Display a simple dialog allowing the user to specify a vector</summary>
      <param name="title">Text shown in the title bar of the dialog window</param>
      <param name="label">Label displayed to the left of the vector specified field</param>
      <returns>Structure containing the specified vector</returns>
    </member>
    <member name="T:Snap.UI.Input.PlaneResult">
      <summary>Represents the result returned when the user specifies a plane</summary>
    </member>
    <member name="P:Snap.UI.Input.PlaneResult.Plane">
      <summary>The plane the user specified</summary>
    </member>
    <member name="P:Snap.UI.Input.PlaneResult.Response">
      <summary>The response</summary>
    </member>
    <member name="T:Snap.UI.Input.PositionResult">
      <summary>Represents the result returned when the user species a point (position)</summary>
    </member>
    <member name="P:Snap.UI.Input.PositionResult.Position">
      <summary>The position specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Input.PositionResult.Response">
      <summary>The response</summary>
    </member>
    <member name="T:Snap.UI.Input.VectorResult">
      <summary>Represents the result returned when the user species a vector</summary>
    </member>
    <member name="P:Snap.UI.Input.VectorResult.Direction">
      <summary>The direction of the vector the user specified</summary>
    </member>
    <member name="P:Snap.UI.Input.VectorResult.Point">
      <summary>The origin point of the vector the user specified</summary>
    </member>
    <member name="P:Snap.UI.Input.VectorResult.Response">
      <summary>The response</summary>
    </member>
    <member name="T:Snap.UI.Response">
      <summary>The user response for the selection operation.</summary>
    </member>
    <member name="F:Snap.UI.Response.Back">
      <summary>User clicked Back button</summary>
    </member>
    <member name="F:Snap.UI.Response.Cancel">
      <summary>User clicked Cancel button</summary>
    </member>
    <member name="F:Snap.UI.Response.Ok">
      <summary>User clicked Ok button</summary>
    </member>
    <member name="T:Snap.UI.Selection">
      <summary> Provides tools related to selection of NX objects </summary>
    </member>
    <member name="M:Snap.UI.Selection.SelectFace(System.String)">
      <summary>Creates a selection dialog that allows selection of a single face (of any type)</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectFace(System.String,Snap.NX.ObjectTypes.SubType[])">
      <summary>Creates a selection dialog that allows selection of a single face of a specified type</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <param name="faceTypes">Array of face types that are to be eligible for selection</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectICurve(System.String)">
      <summary>Creates a selection dialog that allows selection of a single ICurve (curve or edge)</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectICurve(System.String,Snap.NX.ObjectTypes.Type[])">
      <summary>Creates a selection dialog that allows selection of a single ICurve (curve or edge)</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <param name="types">Array of edge/curve types that are to be eligible for selection</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectObject(System.String)">
      <summary>Creates a selection dialog</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectObject(System.String,Snap.NX.ObjectTypes.Type,Snap.NX.ObjectTypes.SubType)">
      <summary>Creates a selection dialog that allows selection of a single object</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <param name="type">Object type that is to be eligible for selection</param>
      <param name="subtype">Object subtype that is to be eligible for selection</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectObject(System.String,Snap.NX.ObjectTypes.Type[])">
      <summary>Creates a selection dialog that allows selection of a single object</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <param name="types">Array of object types that are to be eligible for selection</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectObject(System.String,Snap.NX.ObjectTypes.TypeCombo[])">
      <summary>Creates a selection dialog that allows selection of a single object</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <param name="combos">Array of TypeCombos indicating which types of objects are eligible for selection</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectObjects(System.String)">
      <summary>Creates a selection dialog that allows selection of multiple objects of any type</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectObjects(System.String,Snap.NX.ObjectTypes.Type,Snap.NX.ObjectTypes.SubType)">
      <summary>Creates a selection dialog that allows selection of multiple objects of specified types</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <param name="type">Object type that is to be eligible for selection</param>
      <param name="subtype">Object subtype that is to be eligible for selection</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectObjects(System.String,Snap.NX.ObjectTypes.Type[])">
      <summary>Creates a selection dialog that allows selection of multiple objects of specified types</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <param name="types">Array of object types that are to be eligible for selection</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="M:Snap.UI.Selection.SelectObjects(System.String,Snap.NX.ObjectTypes.TypeCombo[])">
      <summary>Creates a selection dialog that allows selection of multiple objects of specified types</summary>
      <param name="cue">Prompt to be displayed in Cue line</param>
      <param name="combos">Array of TypeCombos indicating which types of objects are eligible for selection</param>
      <returns>The selection dialog</returns>
    </member>
    <member name="T:Snap.UI.Selection.Dialog">
      <summary> Represents a selection dialog, which can be displayed to allow the user to select objects </summary>
    </member>
    <member name="P:Snap.UI.Selection.Dialog.AllowMultiple">
      <summary>If true, selection of multiple objects will be allowed</summary>
    </member>
    <member name="P:Snap.UI.Selection.Dialog.Cue">
      <summary>Message to be displayed in the Cue line during selection</summary>
    </member>
    <member name="P:Snap.UI.Selection.Dialog.IncludeFeatures">
      <summary>If true, features will be eligible for selection</summary>
    </member>
    <member name="P:Snap.UI.Selection.Dialog.KeepHighlighted">
      <summary>If true, the selected objects are kept highlighted after selection</summary>
    </member>
    <member name="P:Snap.UI.Selection.Dialog.Result">
      <summary>The result, after displaying the dialog and getting user input</summary>
    </member>
    <member name="P:Snap.UI.Selection.Dialog.Scope">
      <summary> The scope of the selection (work part, or assembly, etc.)</summary>
    </member>
    <member name="M:Snap.UI.Selection.Dialog.SetCurveFilter">
      <summary>Sets the filter to allow selection of curves or edges</summary>
    </member>
    <member name="M:Snap.UI.Selection.Dialog.SetCurveFilter(Snap.NX.ObjectTypes.Type[])">
      <summary>Sets the selection filter using an array of edge/curve types</summary>
      <param name="types">Array of edge/curve types that are to be eligible for selection</param>
    </member>
    <member name="M:Snap.UI.Selection.Dialog.SetFaceFilter">
      <summary>Sets the filter to allow selection of faces (of any type)</summary>
    </member>
    <member name="M:Snap.UI.Selection.Dialog.SetFaceFilter(Snap.NX.ObjectTypes.SubType[])">
      <summary>Sets the selection filter using an array of face types</summary>
      <param name="faceTypes">Face types that are to be eligible for selection</param>
    </member>
    <member name="M:Snap.UI.Selection.Dialog.SetFilter(Snap.NX.ObjectTypes.Type,Snap.NX.ObjectTypes.SubType)">
      <summary>Sets the selection filter using a given type and subtype</summary>
      <param name="type">Object type that is to be eligible for selection</param>
      <param name="subtype">Object subtype that is to be eligible for selection</param>
    </member>
    <member name="M:Snap.UI.Selection.Dialog.SetFilter(Snap.NX.ObjectTypes.Type[])">
      <summary>Sets the selection filter using given object types</summary>
      <param name="types">Object types that are to be eligible for selection</param>
    </member>
    <member name="M:Snap.UI.Selection.Dialog.SetFilter(Snap.NX.ObjectTypes.TypeCombo[])">
      <summary>Sets the selection filter using TypeCombo objects</summary>
      <param name="combos">TypeCombos indicating which types of objects are eligible for selection</param>
    </member>
    <member name="M:Snap.UI.Selection.Dialog.Show">
      <summary>Displays the dialog and gets a result</summary>
      <returns>The Selection.Result</returns>
    </member>
    <member name="P:Snap.UI.Selection.Dialog.Title">
      <summary> Title to be displayed on the selection dialog</summary>
    </member>
    <member name="T:Snap.UI.Selection.Dialog.SelectionScope">
      <summary>Indicates the scope for selecting objects.</summary>
    </member>
    <member name="F:Snap.UI.Selection.Dialog.SelectionScope.UseDefault">
      <summary>Use the default selection scope</summary>
    </member>
    <member name="F:Snap.UI.Selection.Dialog.SelectionScope.WorkPart">
      <summary>Use the work part</summary>
    </member>
    <member name="F:Snap.UI.Selection.Dialog.SelectionScope.AnyInAssembly">
      <summary>Use any occurrence in the assembly</summary>
    </member>
    <member name="F:Snap.UI.Selection.Dialog.SelectionScope.WorkPartAndOccurrence">
      <summary>Use the work part or any occurrence</summary>
    </member>
    <member name="T:Snap.UI.Selection.Result">
      <summary>The result returned from showing a selection dialog</summary>
    </member>
    <member name="P:Snap.UI.Selection.Result.CursorRay">
      <summary>The cursor ray</summary>
    </member>
    <member name="P:Snap.UI.Selection.Result.Object">
      <summary>The first selected object. Always equal to Objects[0]</summary>
    </member>
    <member name="P:Snap.UI.Selection.Result.Objects">
      <summary>The selected objects (possibly zero or one)</summary>
    </member>
    <member name="P:Snap.UI.Selection.Result.PickPoint">
      <summary>The cursor position at selected object</summary>
    </member>
    <member name="P:Snap.UI.Selection.Result.Response">
      <summary>The user's response</summary>
    </member>
    <member name="T:Snap.UI.WinForm">
      <summary>A Windows form for use in NX/Open applications</summary>
    </member>
    <member name="M:Snap.UI.WinForm.#ctor">
      <summary>Constructs a new NX WinForm</summary>
    </member>
    <member name="M:Snap.UI.WinForm.ReparentForm(System.Windows.Forms.Form)">
      <summary>Set the parent for the form window of the SNAP application.</summary>
      <param name="form">A form object with type System.Windows.Forms.Form</param>
    </member>
    <member name="M:Snap.UI.WinForm.SetApplicationIcon(System.Windows.Forms.Form)">
      <summary>Sets the icon for the supplied form the same as the icon used by NX</summary>
      <param name="form">A form object with type System.Windows.Forms.Form</param>
    </member>
    <member name="T:Snap.UI.Block.AngularDimension">
      <summary>Allows the user to specify an Angular Dimension</summary>
    </member>
    <member name="M:Snap.UI.Block.AngularDimension.#ctor">
      <summary>Construct an AngularDimension block</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.ExpressionObject">
      <summary>The Expression object associated with the block.</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.Formula">
      <summary>Textual representation of the formula for the expression. e.g. "4 + sin(30)"</summary>
    </member>
    <member name="M:Snap.UI.Block.AngularDimension.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type AngularDimension in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The AngularDimension block object</returns>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.HandleAxisX">
      <summary>The "3 o'clock" vector of the handle (from which angles are measured)</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.HandleAxisZ">
      <summary>The normal of the plane in which the handle lies</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.HandleOrigin">
      <summary>The center point of the handle</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.HandleRadius">
      <summary>The radius of the handle</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.ShowFocusHandle">
      <summary>If true, indicates that the GWIF should be displayed even when the focus is not on this block</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.ShowHandle">
      <summary>If true, indicates that a graphical handle should be displayed for dragging</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.Units">
      <summary>The type of units used</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.Value">
      <summary>The value shown in the block, to be edited by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.AngularDimension.WithScale">
      <summary>If true, indicates that a scale (a slider bar) should be displayed</summary>
    </member>
    <member name="T:Snap.UI.Block.BalloonTooltipLayout">
      <summary>The location of text with respect to the image in the balloon tooltip. This is applicable only when both text and image are specified.</summary>
    </member>
    <member name="F:Snap.UI.Block.BalloonTooltipLayout.Horizontal">
      <summary>Horizontal -- This is the default value. The text is placed to the right of the image.</summary>
    </member>
    <member name="F:Snap.UI.Block.BalloonTooltipLayout.Vertical">
      <summary>Vertical -- The text is placed below the image.</summary>
    </member>
    <member name="T:Snap.UI.Block.Button">
      <summary>Provides a button that the user can click to cause an action</summary>
    </member>
    <member name="M:Snap.UI.Block.Button.#ctor">
      <summary>Construct a Button block</summary>
    </member>
    <member name="M:Snap.UI.Block.Button.#ctor(System.String)">
      <summary>Construct a Button block</summary>
      <param name="label">Label displayed at the center of the button</param>
    </member>
    <member name="P:Snap.UI.Block.Button.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Button.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Button.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Button.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Button.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Button.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Button.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.Button.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type Button in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The Button block object</returns>
    </member>
    <member name="P:Snap.UI.Block.Button.HighQualityBitmap">
      <summary>If true, indicates that a high-quality (24-bit) version of the Bitmap should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Button.Label">
      <summary>The text to display on the button</summary>
    </member>
    <member name="P:Snap.UI.Block.Button.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.Button.ToolTip">
      <summary>The tooltip text to be displayed when the user hovers the mouse pointer over the block</summary>
    </member>
    <member name="T:Snap.UI.Block.ColorPicker">
      <summary>Allows the user to specify colors (color indices, actually)</summary>
    </member>
    <member name="M:Snap.UI.Block.ColorPicker.#ctor">
      <summary>Construct a ColorPicker block</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.ColorIndex">
      <summary>The index of the selected color (when only one is selected)</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.ColorIndices">
      <summary>The indices of the selected colors</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.ColorPicker.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type ColorPicker in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The ColorPicker block object</returns>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.NumberSelectable">
      <summary>The number of colors the user will be allowed to select</summary>
    </member>
    <member name="P:Snap.UI.Block.ColorPicker.RetainValue">
      <summary>If true, indicates that the values in the block should be retained from one use of the dialog to the next</summary>
    </member>
    <member name="T:Snap.UI.Block.CurveCollector">
      <summary>Allows the user to select a collection of curves via Selection Intent</summary>
    </member>
    <member name="M:Snap.UI.Block.CurveCollector.#ctor">
      <summary>Construct a CurveCollector block</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.AllowMultiple">
      <summary>If true, indicates selection of multiple objects is allowed</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.AutomaticProgression">
      <summary>If true, indicates that focus should automatically progress to the next block</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.CreateInterpartLink">
      <summary>The state of the "Create Interpart Link" toggle on the Selection Bar</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.Cue">
      <summary>Text to be displayed in the cue line. Accepts any text string.</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.CurveRules">
      <summary>A bit-mask indicating which Selection Intent options should be shown on the Selection Bar.</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.DefaultCurveRules">
      <summary>The Selection Intent option that will be pre-selected</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.EntityType">
      <summary>Specifies the entity type(s) that will be allowed for selection</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.CurveCollector.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type CurveCollector in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The CurveCollector block object</returns>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.InterpartSelection">
      <summary>Specifies the behavior of the block when selecting geometry outside of the work part</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.LabelString">
      <summary>Text displayed before the object count on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.SelectedObjects">
      <summary>Array of NX objects selected by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="P:Snap.UI.Block.CurveCollector.ToolTip">
      <summary>The tooltip text to be displayed when the user hovers the mouse pointer over the block</summary>
    </member>
    <member name="T:Snap.UI.Block.DimensionalityType">
      <summary>The dimensionality type of an expression</summary>
    </member>
    <member name="F:Snap.UI.Block.DimensionalityType.None">
      <summary>Dimensionality of type None</summary>
    </member>
    <member name="F:Snap.UI.Block.DimensionalityType.Length">
      <summary>Dimensionality of type Length</summary>
    </member>
    <member name="F:Snap.UI.Block.DimensionalityType.Area">
      <summary>Dimensionality of type Area</summary>
    </member>
    <member name="F:Snap.UI.Block.DimensionalityType.Volume">
      <summary>Dimensionality of type Volume</summary>
    </member>
    <member name="F:Snap.UI.Block.DimensionalityType.Mass">
      <summary>Dimensionality of type Mass</summary>
    </member>
    <member name="F:Snap.UI.Block.DimensionalityType.Angle">
      <summary>Dimensionality of type Angle</summary>
    </member>
    <member name="F:Snap.UI.Block.DimensionalityType.Force">
      <summary>Dimensionality of type Force</summary>
    </member>
    <member name="T:Snap.UI.Block.Double">
      <summary>Allows the user to enter a "double" (floating point number)</summary>
    </member>
    <member name="M:Snap.UI.Block.Double.#ctor">
      <summary>Construct a Double block</summary>
    </member>
    <member name="M:Snap.UI.Block.Double.#ctor(System.String,System.Double)">
      <summary>Construct a Double block</summary>
      <param name="label">Label displayed to the left of the numerical entry field</param>
      <param name="initialValue">The initial value to be displayed in the numerical entry field.  Optional. Default = 0.0</param>
    </member>
    <member name="P:Snap.UI.Block.Double.AdaptiveScaleLimits">
      <summary>If true, indicates that the scale should be adaptive</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.Double.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type Double in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The Double block object</returns>
    </member>
    <member name="P:Snap.UI.Block.Double.Increment">
      <summary>The increment/decrement when the user clicks the up/down arrow buttons on the spin control</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.LabelVisibility">
      <summary>If true, indicates that the label of the block should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.LineIncrement">
      <summary>The increment/decrement when the user presses the arrow keys on the keyboard</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.MaximumValue">
      <summary>The maximum allowed double value</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.MaxInclusive">
      <summary>If true, indicates that a value equal to MaximumValue should be accepted as valid input</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.MinimumValue">
      <summary>The minimum allowed double value</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.MinInclusive">
      <summary>If true, indicates that a value equal to MinimumValue should be accepted as valid input</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.PageIncrement">
      <summary>The increment/decrement when the user presses the Page Up or Page Down keys on the keyboard</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.PresentationStyle">
      <summary>The presentation style of the block (how it is displayed)</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.ReadOnly">
      <summary>If true, indicates that the value shown in the block is not editable</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.RetainValue">
      <summary>If true, indicates that the values in the block should be retained from one use of the dialog to the next</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.ScaleLimits">
      <summary>If true, indicates that the scale max and min labels should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.ScaleMaxLimitLabel">
      <summary>The label indicating the maximum scale limit</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.ScaleMinLimitLabel">
      <summary>The label indicating the minimum scale limit</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.ShowScaleValue">
      <summary>If true, indicates the value determined by the scale (slider) should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.Value">
      <summary>The value shown in the block, to be edited by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.Double.WrapSpin">
      <summary>
            If true, indicates that the values shown in the block
            should "wrap" when passing beyond the minimum or maximum values.
            </summary>
    </member>
    <member name="T:Snap.UI.Block.DoubleTable">
      <summary>Allows the user to enter/edit a table of double (floating point) values</summary>
    </member>
    <member name="M:Snap.UI.Block.DoubleTable.#ctor">
      <summary>Construct a DoubleTable block</summary>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.CellWidth">
      <summary>Width of each table cell, in characters</summary>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.ColumnTitles">
      <summary>The column titles</summary>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.DoubleTable.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type DoubleTable in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The DoubleTable block object</returns>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.MaximumValues">
      <summary>Array of the maximum allowed values in each table cell</summary>
      <exception cref="T:System.ArgumentException">The input array has a dimension that is zero</exception>
      <exception cref="T:System.ArgumentNullException">The input array is null (<c>Nothing</c>)</exception>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.MinimumValues">
      <summary>Array of the minimum allowed values in each table cell</summary>
      <exception cref="T:System.ArgumentException">The input array has a dimension that is zero</exception>
      <exception cref="T:System.ArgumentNullException">The input array is null (<c>Nothing</c>)</exception>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.RowTitles">
      <summary>The row titles</summary>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.Spin">
      <summary>If true, indicates that a Spin control should be displayed on each cell</summary>
    </member>
    <member name="P:Snap.UI.Block.DoubleTable.Values">
      <summary>The double values to be displayed/edited</summary>
      <exception cref="T:System.ArgumentException">The input array has a dimension that is zero</exception>
      <exception cref="T:System.ArgumentNullException">The input array is null (<c>Nothing</c>)</exception>
    </member>
    <member name="T:Snap.UI.Block.DrawingArea">
      <summary>Provides a drawing area on the dialog in which images/objects can be displayed</summary>
    </member>
    <member name="M:Snap.UI.Block.DrawingArea.#ctor">
      <summary>Construct a DrawingArea block</summary>
    </member>
    <member name="P:Snap.UI.Block.DrawingArea.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.DrawingArea.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.DrawingArea.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.DrawingArea.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type DrawingArea in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The DrawingArea block object</returns>
    </member>
    <member name="P:Snap.UI.Block.DrawingArea.Height">
      <summary>The height of the area in which the image will be displayed, in pixels</summary>
    </member>
    <member name="P:Snap.UI.Block.DrawingArea.Image">
      <summary>The pathname of the image to be shown (a JPG, BMP, PNG, GIF or TIF file).</summary>
    </member>
    <member name="P:Snap.UI.Block.DrawingArea.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.DrawingArea.Width">
      <summary>The width of the area in which the image will be displayed, in pixels</summary>
    </member>
    <member name="T:Snap.UI.Block.Enumeration">
      <summary>Allows the user to choose from an enumerated set of options</summary>
    </member>
    <member name="M:Snap.UI.Block.Enumeration.#ctor">
      <summary>Construct an Enumeration block</summary>
    </member>
    <member name="M:Snap.UI.Block.Enumeration.#ctor(System.String,Snap.UI.Block.EnumPresentationStyle)">
      <summary>Construct an Enumeration block</summary>
      <param name="label">Label displayed next to the list of choices</param>
      <param name="style">Presentation style. Optional. Default = Snap.UI.Block.EnumPresentationStyle.OptionMenu</param>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.AllowShortcuts">
      <summary>If true, indicates that the enumeration options can be displayed as shortcuts</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.Bitmaps">
      <summary>Names of bitmap images used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.BorderVisibility">
      <summary>If true, indicates that the border of the Radio Box will be visible</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.Enumeration.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type Enumeration in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The Enumeration block object</returns>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.HighQualityBitmap">
      <summary>If true, indicates that a high-quality (24-bit) version of the Bitmap should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.IconsOnly">
      <summary>If true, indicates that the enumeration options should be displayed as icons only</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.InitialShortcuts">
      <summary>The set of shortcuts that are displayed when the dialog is initially displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.Items">
      <summary>The list of items the user chooses from (as strings)</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.LabelVisibility">
      <summary>If true, indicates that the Label string should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.Layout">
      <summary>Indicates whether Radio Box choices should be arranged horizontally or vertically</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.NumberOfColumns">
      <summary>The number of columns used in the layout of the block.</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.PresentationStyle">
      <summary>The presentation style: drop down option menu or radio buttons</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.RetainValue">
      <summary>If true, indicates that the values in the block should be retained from one use of the dialog to the next</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.SelectedIndex">
      <summary>The index of the selected item (zero-based) -- same as "Value"</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.SelectedItem">
      <summary>The selected item (as a string)</summary>
    </member>
    <member name="P:Snap.UI.Block.Enumeration.Value">
      <summary>The index of the selected item (zero-based) -- same as "SelectedIndex"</summary>
    </member>
    <member name="T:Snap.UI.Block.EnumPresentationStyle">
      <summary>Controls the presentation style (display) of an Enumeration block</summary>
    </member>
    <member name="F:Snap.UI.Block.EnumPresentationStyle.OptionMenu">
      <summary>Values will be shown in drop down option menu</summary>
    </member>
    <member name="F:Snap.UI.Block.EnumPresentationStyle.RadioBox">
      <summary>Values will be shown in a box with radio buttons</summary>
    </member>
    <member name="T:Snap.UI.Block.Expression">
      <summary>Allows the user to enter/edit an Expression</summary>
    </member>
    <member name="M:Snap.UI.Block.Expression.#ctor">
      <summary>Construct an Expression block</summary>
    </member>
    <member name="M:Snap.UI.Block.Expression.#ctor(System.String)">
      <summary>Construct an Expression block</summary>
      <param name="label">Label displayed to the left of the numerical entry field</param>
    </member>
    <member name="P:Snap.UI.Block.Expression.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.Dimensionality">
      <summary>The dimensionality of the expression (e.g. Length, Angle, Mass)</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.ExpressionObject">
      <summary>The Expression object associated with the block.</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.Formula">
      <summary>Textual representation of the right-hand-side of the expression</summary>
    </member>
    <member name="M:Snap.UI.Block.Expression.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type Expression in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The Expression block object</returns>
    </member>
    <member name="P:Snap.UI.Block.Expression.HasUnitsMenu">
      <summary>If true, indicates that a menu will be displayed allowing the user to change units</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.Units">
      <summary>The type of units used</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.Value">
      <summary>The value shown in the block, to be edited by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.Expression.WithScale">
      <summary>If true, indicates that a scale (a slider bar) should be displayed</summary>
    </member>
    <member name="T:Snap.UI.Block.ExpressionSortOrder">
      <summary>Controls how expressions are sorted when displayed in a list</summary>
    </member>
    <member name="F:Snap.UI.Block.ExpressionSortOrder.Alphanumeric">
      <summary>Alphanumeric sorting order</summary>
    </member>
    <member name="F:Snap.UI.Block.ExpressionSortOrder.TimeStampOrder">
      <summary>Timestamp sorting order</summary>
    </member>
    <member name="F:Snap.UI.Block.ExpressionSortOrder.ReverseTimeStampOrder">
      <summary>Reverse timestamp sorting order</summary>
    </member>
    <member name="T:Snap.UI.Block.ExpressionType">
      <summary>The data type of an expression</summary>
    </member>
    <member name="F:Snap.UI.Block.ExpressionType.Number">
      <summary>Expression of type Number</summary>
    </member>
    <member name="F:Snap.UI.Block.ExpressionType.String">
      <summary>Expression of type String</summary>
    </member>
    <member name="F:Snap.UI.Block.ExpressionType.Boolean">
      <summary>Expression of type Boolean</summary>
    </member>
    <member name="F:Snap.UI.Block.ExpressionType.Integer">
      <summary>Expression of type Integer</summary>
    </member>
    <member name="F:Snap.UI.Block.ExpressionType.Point">
      <summary>Expression of type Point</summary>
    </member>
    <member name="F:Snap.UI.Block.ExpressionType.Vector">
      <summary>Expression of type Vector</summary>
    </member>
    <member name="T:Snap.UI.Block.FaceCollector">
      <summary>Allows the user to select a collection of faces via Selection Intent</summary>
    </member>
    <member name="M:Snap.UI.Block.FaceCollector.#ctor">
      <summary>Construct a FaceCollector block</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.AllowMultiple">
      <summary>If true, indicates selection of multiple objects is allowed</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.AutomaticProgression">
      <summary>If true, indicates that focus should automatically progress to the next block</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.CreateInterpartLink">
      <summary>The state of the "Create Interpart Link" toggle on the Selection Bar</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.Cue">
      <summary>Text to be displayed in the cue line. Accepts any text string.</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.DefaultFaceRules">
      <summary>The Selection Intent option that will be pre-selected</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.EntityType">
      <summary>Specifies the entity type(s) that will be allowed for selection</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.FaceRules">
      <summary>A bit-mask indicating which Selection Intent options should be shown on the Selection Bar.</summary>
    </member>
    <member name="M:Snap.UI.Block.FaceCollector.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type FaceCollector in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The FaceCollector block object</returns>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.InterpartSelection">
      <summary>Specifies the behavior of the block when selecting geometry outside of the work part</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.LabelString">
      <summary>Text displayed before the object count on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.SelectedObjects">
      <summary>Array of NX objects selected by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="P:Snap.UI.Block.FaceCollector.ToolTip">
      <summary>The tooltip text to be displayed when the user hovers the mouse pointer over the block</summary>
    </member>
    <member name="T:Snap.UI.Block.General">
      <summary>
            Abstract class to serve as the base class for other block (interchangeable with <see cref="T:NXOpen.BlockStyler.UIBlock">NXOpen.BlockStyler.UIBlock</see>)
            </summary>
    </member>
    <member name="M:Snap.UI.Block.General.Equals(System.Object)">
      <summary>Determines whether the specified System.Object is equal to the current System.Object.</summary>
      <param name="obj">The System.Object to compare with the current System.Object.</param>
      <returns>True if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
    </member>
    <member name="M:Snap.UI.Block.General.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type General in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="blockName">The name (Block ID) assigned to the General block</param>
      <returns>The Toggle object</returns>
    </member>
    <member name="M:Snap.UI.Block.General.GetHashCode">
      <summary>Returns the hash code for block name</summary>
      <returns>A signed integer hash code</returns>
    </member>
    <member name="P:Snap.UI.Block.General.Name">
      <summary>The name of the block. Sometimes called the "Block ID".</summary>
    </member>
    <member name="P:Snap.UI.Block.General.NXOpenBlock">
      <summary>The corresponding NXOpen.BlockStyler.NXOpenBlock object</summary>
    </member>
    <member name="M:Snap.UI.Block.General.op_Equality(Snap.UI.Block.General,Snap.UI.Block.General)">
      <summary>If true, indicates that the given two block are the same block</summary>
      <param name="block1">First Snap.UI.Block.General object</param>
      <param name="block2">Second Snap.UI.Block.General object</param>
      <returns>A <c>Boolean</c> object</returns>
    </member>
    <member name="M:Snap.UI.Block.General.op_Inequality(Snap.UI.Block.General,Snap.UI.Block.General)">
      <summary>If true, indicates that the given two block are not the same block</summary>
      <param name="block1">First Snap.UI.Block.General object</param>
      <param name="block2">Second Snap.UI.Block.General object</param>
      <returns>A <c>Boolean</c> object</returns>
    </member>
    <member name="P:Snap.UI.Block.General.Show">
      <summary>If true, indicates that this block should be displayed in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.General.Type">
      <summary>The type of the block</summary>
    </member>
    <member name="T:Snap.UI.Block.Group">
      <summary>A collection of other blocks</summary>
    </member>
    <member name="P:Snap.UI.Block.Group.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Group.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.Group.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type Group in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The Group block object</returns>
    </member>
    <member name="P:Snap.UI.Block.Group.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Group.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.Group.Members">
      <summary>Array of blocks that are contained within this group block.</summary>
    </member>
    <member name="P:Snap.UI.Block.Group.NumberOfColumns">
      <summary>The number of columns used in the layout of the block.</summary>
    </member>
    <member name="T:Snap.UI.Block.Integer">
      <summary>Allows the user to enter/edit an Integer</summary>
    </member>
    <member name="M:Snap.UI.Block.Integer.#ctor">
      <summary>Construct an Integer block</summary>
    </member>
    <member name="M:Snap.UI.Block.Integer.#ctor(System.String,System.Int32)">
      <summary>Construct an Integer block</summary>
      <param name="label">Label displayed to the left of the numerical entry field</param>
      <param name="initialValue">The initial value to be shown in the numerical entry field</param>
    </member>
    <member name="P:Snap.UI.Block.Integer.AdaptiveScaleLimits">
      <summary>If true, indicates that the scale should be adaptive</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.Integer.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type Integer in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="blockID">The name (blockID) of the Integer block</param>
      <returns>The Integer block object</returns>
    </member>
    <member name="P:Snap.UI.Block.Integer.Increment">
      <summary>The increment/decrement when the user clicks the up/down arrow buttons on the spin control</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.LabelVisibility">
      <summary>If true, indicates that the label of the block should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.LineIncrement">
      <summary>The increment/decrement when the user presses the arrow keys on the keyboard</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.MaximumValue">
      <summary>The maximum allowed integer value</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.MaxInclusive">
      <summary>If true, indicates that a value equal to MaximumValue should be accepted as valid input</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.MinimumValue">
      <summary>The minimum allowed integer value</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.MinInclusive">
      <summary>If true, indicates that a value equal to MinimumValue should be accepted as valid input</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.PageIncrement">
      <summary>The increment/decrement when the user presses the Page Up or Page Down keys on the keyboard</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.PresentationStyle">
      <summary>The presentation style of the block (how it is displayed)</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.ReadOnly">
      <summary>If true, indicates that the value shown in the block is not editable</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.RetainValue">
      <summary>If true, indicates that the values in the block should be retained from one use of the dialog to the next</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.ScaleLimits">
      <summary>If true, indicates that the scale max and min labels should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.ScaleMaxLimitLabel">
      <summary>The label indicating the maximum scale limit</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.ScaleMinLimitLabel">
      <summary>The label indicating the minimum scale limit</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.ShowScaleValue">
      <summary>If true, indicates that the value determined by the scale (slider) should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.Value">
      <summary>The value shown in the block, to be edited by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.Integer.WrapSpin">
      <summary>
            If true, indicates that the values shown in the block
            should "wrap" when passing beyond the minimum or maximum values.
            </summary>
    </member>
    <member name="T:Snap.UI.Block.IntegerTable">
      <summary>Allows the user to enter/edit a table of integer values</summary>
    </member>
    <member name="M:Snap.UI.Block.IntegerTable.#ctor">
      <summary>Construct an IntegerTable block</summary>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.ColumnTitles">
      <summary>The column titles</summary>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.IntegerTable.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type IntegerTable in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The IntegerTable block object</returns>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.MaximumValues">
      <summary>Array of the maximum allowed integer values</summary>
      <exception cref="T:System.ArgumentException">The input array has a dimension that is zero</exception>
      <exception cref="T:System.ArgumentNullException">The input array is null (<c>Nothing</c>)</exception>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.MinimumValues">
      <summary>Array of the minimum allowed integer values</summary>
      <exception cref="T:System.ArgumentException">The input array has a dimension that is zero</exception>
      <exception cref="T:System.ArgumentNullException">The input array is null (<c>Nothing</c>)</exception>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.RowTitles">
      <summary>The row titles</summary>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.Spin">
      <summary>If true, indicates that a Spin control should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.IntegerTable.Values">
      <summary>The integer values to be displayed/edited</summary>
      <exception cref="T:System.ArgumentException">The input array has a dimension that is zero</exception>
      <exception cref="T:System.ArgumentNullException">The input array is null (<c>Nothing</c>)</exception>
    </member>
    <member name="T:Snap.UI.Block.InterPartSelectionCopy">
      <summary>Controls on-the-fly copying of objects selected outside the work part</summary>
    </member>
    <member name="F:Snap.UI.Block.InterPartSelectionCopy.None">
      <summary>No geometry will be copied into the work part.</summary>
    </member>
    <member name="F:Snap.UI.Block.InterPartSelectionCopy.NoneAssociative">
      <summary>Creates non-associative copies in the work part of selected objects. 
            The setting of the "Create Interpart Link" toggle on the Selection Bar will be ignored.
            </summary>
    </member>
    <member name="F:Snap.UI.Block.InterPartSelectionCopy.Controlled">
      <summary>Copying of objects is controlled by the setting of the "Create Interpart Link" toggle on the Selection Bar.</summary>
    </member>
    <member name="F:Snap.UI.Block.InterPartSelectionCopy.Associative">
      <summary>Creates associative copies in the work part of selected objects. 
            The setting of the “Create Interpart Link” toggle on the Selection Bar will be ignored.
            </summary>
    </member>
    <member name="T:Snap.UI.Block.LabelBlock">
      <summary>A textual label and/or a bitmap used to explain an item on the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.LabelBlock.#ctor">
      <summary>Construct a LabelBlock</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.LabelBlock.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type LabelBlock in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The LabelBlock block object</returns>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.HighQualityBitmap">
      <summary>If true, indicates that a high-quality (24-bit) version of the Bitmap should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.ToolTip">
      <summary>The tooltip text to be displayed when the user hovers the mouse pointer over the block</summary>
    </member>
    <member name="P:Snap.UI.Block.LabelBlock.WordWrap">
      <summary>If true, indicates that the Label string should be wrapped</summary>
    </member>
    <member name="T:Snap.UI.Block.Layout">
      <summary>The horizontal or vertical layout of options. This property is active only if property PresentationStyle is Radio Box.</summary>
    </member>
    <member name="F:Snap.UI.Block.Layout.Vertical">
      <summary>Vertical -- Options will be presented vertically.</summary>
    </member>
    <member name="F:Snap.UI.Block.Layout.Horizontal">
      <summary>Horizontal -- Options will be presented horizontally.</summary>
    </member>
    <member name="T:Snap.UI.Block.LinearDimension">
      <summary>Allows the user to specify a Linear Dimension</summary>
    </member>
    <member name="M:Snap.UI.Block.LinearDimension.#ctor">
      <summary>Construct a LinearDimension block</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.ExpressionObject">
      <summary>The Expression object associated with the block.</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.Formula">
      <summary>Textual representation of the formula for the expression. e.g. "4 + sin(30)"</summary>
    </member>
    <member name="M:Snap.UI.Block.LinearDimension.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type LinearDimension in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The LinearDimension block object</returns>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.HandleOrientation">
      <summary>Together with the HandleOrigin, specifies a line along which the handle can be dragged</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.HandleOrigin">
      <summary>Together with the HandleOrientation vector, specifies a line along which the handle can be dragged</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.ShowFocusHandle">
      <summary>If true, indicates that the GWIF should be displayed even when the focus is not on this block</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.ShowHandle">
      <summary>If true, indicates that a graphical handle should be displayed for dragging</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.Units">
      <summary>The type of units used</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.Value">
      <summary>The value shown in the block, to be edited by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.LinearDimension.WithScale">
      <summary>If true, indicates that a scale (a slider bar) should be displayed</summary>
    </member>
    <member name="T:Snap.UI.Block.ListBox">
      <summary>Allows the user to choose from items in a List Box</summary>
    </member>
    <member name="M:Snap.UI.Block.ListBox.#ctor">
      <summary>Construct a ListBox block</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.ListBox.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type ListBox in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The ListBox block object</returns>
    </member>
    <member name="P:Snap.UI.Block.ListBox.Height">
      <summary>The number of items shown in the List Box</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.IsAddButtonSensitive">
      <summary>If true, indicates that the "Add" button is sensitive (not grayed out)</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.IsDeleteButtonSensitive">
      <summary>If true, indicates that the "Delete" button is sensitive (not grayed out)</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.Label">
      <summary>Explanatory text displayed above the block, if it begins a group</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.ListItems">
      <summary>The list of items (strings) displayed in the list box</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.MaximumHeight">
      <summary>Specifies the maximum number of rows shown on the dialog as it is resized</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.MaximumStringLength">
      <summary>The maximum number of characters per row/item</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.MinimumHeight">
      <summary>Specifies the minimum number of rows shown on the dialog as it is resized</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.ResizeHeightWithDialog">
      <summary>If true, indicates that this block will resize as the dialog is resized</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.SelectedItems">
      <summary>The indices of the selected items (zero-based)</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.ShowAddButton">
      <summary>If true, indicates that an "add" button should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.ShowDeleteButton">
      <summary>If true, indicates that a Delete button should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.ShowMoveUpDownButtons">
      <summary>If true, indicates that Up/Down buttons should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.ListBox.SingleSelect">
      <summary>If true, indicates that only a single item can be selected from the list box</summary>
    </member>
    <member name="T:Snap.UI.Block.MultilineString">
      <summary>Allows the user to enter/edit a Multiline String (an array of strings)</summary>
    </member>
    <member name="M:Snap.UI.Block.MultilineString.#ctor">
      <summary>Construct a MultilineString block</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.MultilineString.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type MultilineString in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The MultilineString block object</returns>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.Height">
      <summary>The number of lines of text in the multi-line string</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.MaximumCharactersAccepted">
      <summary>The maximum number of characters accepted by the block (the entire string array)</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.MaximumHeight">
      <summary>Specifies the maximum number of rows shown on the dialog as it is resized</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.MinimumHeight">
      <summary>Specifies the minimum number of rows shown on the dialog as it is resized</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.ResizeHeightWithDialog">
      <summary>If true, indicates that this block will resize as the dialog is resized</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.RetainValue">
      <summary>If true, indicates that the values in the block should be retained from one use of the dialog to the next</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.Value">
      <summary>The array of strings (one per line)</summary>
    </member>
    <member name="P:Snap.UI.Block.MultilineString.Width">
      <summary>The width of the area in which the image will be displayed, in pixels</summary>
    </member>
    <member name="T:Snap.UI.Block.NumberPresentationStyle">
      <summary>Controls the presentation style (display) of Integer and Double blocks</summary>
    </member>
    <member name="F:Snap.UI.Block.NumberPresentationStyle.KeyIn">
      <summary>User types the numerical value into the input field</summary>
    </member>
    <member name="F:Snap.UI.Block.NumberPresentationStyle.Spin">
      <summary>User inputs the value in increments using arrows next to the input field</summary>
    </member>
    <member name="F:Snap.UI.Block.NumberPresentationStyle.Scale">
      <summary>User inputs the value using a slider</summary>
    </member>
    <member name="F:Snap.UI.Block.NumberPresentationStyle.ScaleKeyIn">
      <summary>User has option of using the slider as well as input field</summary>
    </member>
    <member name="T:Snap.UI.Block.OnPathDimension">
      <summary>Allows the user to specify an On Path Dimension</summary>
    </member>
    <member name="M:Snap.UI.Block.OnPathDimension.#ctor">
      <summary>Construct an OnPathDimension block</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.ExpressionObject">
      <summary>The Expression object associated with the block.</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.Formula">
      <summary>Textual representation of the formula for the expression. e.g. "4 + sin(30)"</summary>
    </member>
    <member name="M:Snap.UI.Block.OnPathDimension.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type OnPathDimension in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The OnPathDimension block object</returns>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.LocationOption">
      <summary>Specifies the type of technique used to locate the handle on the path.</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.OptionMask">
      <summary>Determines which of the LocationOption choices should be available to the user</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.Path">
      <summary>The path (curve, edge, section)</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.ShowFocusHandle">
      <summary>If true, indicates that the GWIF should be displayed even when the focus is not on this block</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.Units">
      <summary>The type of units used</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.Value">
      <summary>The value shown in the block, to be edited by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.OnPathDimension.WithScale">
      <summary>If true, indicates that a scale (a slider bar) should be displayed</summary>
    </member>
    <member name="T:Snap.UI.Block.OrientXpress">
      <summary>Construct an OrientXpress block</summary>
    </member>
    <member name="M:Snap.UI.Block.OrientXpress.#ctor">
      <summary>Construct an OrientXpress block</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ActiveAxis">
      <summary>The active axis (X, Y, or Z) of the OrientExpress gadget</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ActivePlane">
      <summary>The active plane (YZ, XZ, or XY) of the OrientExpress gadget</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.OrientXpress.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type OrientXPress in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The OrientXPress block object</returns>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.Reference">
      <summary>The value for the references options</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowAxisSubBlock">
      <summary>If true, indicates that axis direction options will be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowAxisX">
      <summary>If true, indicates that the X-axis option is available within the axis options</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowAxisY">
      <summary>If true, indicates that the Y-axis option is available within the axis options</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowAxisZ">
      <summary>If true, indicates that the Z-axis option is available within the axis options</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowPlaneSubBlock">
      <summary>If true, indicates that plane options will be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowPlaneXY">
      <summary>If true, indicates that the XY-plane option is available within the plane options</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowPlaneXZ">
      <summary>If true, indicates that the XZ-plane option is available within the plane options</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowPlaneYZ">
      <summary>If true, indicates that the YZ-plane option is available within the plane options</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowReferenceSubBlock">
      <summary>If true, indicates that the reference options should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.OrientXpress.ShowSceneControl">
      <summary>If true, indicates that the available planes and axes should be displayed</summary>
    </member>
    <member name="T:Snap.UI.Block.RadiusDimension">
      <summary>Allows the user to specify a Radius Dimension</summary>
    </member>
    <member name="M:Snap.UI.Block.RadiusDimension.#ctor">
      <summary>Construct a RadiusDimension block</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.ExpressionObject">
      <summary>The Expression object associated with the block.</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.Formula">
      <summary>Textual representation of the formula for the expression. e.g. "4 + sin(30)"</summary>
    </member>
    <member name="M:Snap.UI.Block.RadiusDimension.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type RadiusDimension in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The RadiusDimension block object</returns>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.HandleOrientation">
      <summary>Together with the HandleOrigin, specifies a line along which the handle can be dragged</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.HandleOrigin">
      <summary>Together with the HandleOrientation vector, specifies a line along which the handle can be dragged</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.ShowFocusHandle">
      <summary>If true, indicates that the GWIF should be displayed even when the focus is not on this block</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.ShowHandle">
      <summary>If true, indicates that a graphical handle should be displayed to assist editing</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.Units">
      <summary>The type of units used</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.Value">
      <summary>The value shown in the block, to be edited by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.RadiusDimension.WithScale">
      <summary>If true, indicates that a scale (a slider bar) should be displayed</summary>
    </member>
    <member name="T:Snap.UI.Block.ReverseDirection">
      <summary>Provides a way for the user to reverse the direction of a vector</summary>
    </member>
    <member name="M:Snap.UI.Block.ReverseDirection.#ctor">
      <summary>Construct a ReverseDirection block</summary>
    </member>
    <member name="P:Snap.UI.Block.ReverseDirection.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.ReverseDirection.Direction">
      <summary>The direction of the vector handle</summary>
    </member>
    <member name="P:Snap.UI.Block.ReverseDirection.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.ReverseDirection.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.ReverseDirection.Flip">
      <summary>If true, flips the direction handle, so that its sense is opposite to the "Direction" vector</summary>
    </member>
    <member name="M:Snap.UI.Block.ReverseDirection.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type ReverseDirection in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The ReverseDirection block object</returns>
    </member>
    <member name="P:Snap.UI.Block.ReverseDirection.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.ReverseDirection.Origin">
      <summary>The origin of the vector handle</summary>
    </member>
    <member name="T:Snap.UI.Block.RGBColorPicker">
      <summary>Allows the user to specify an RGB Color</summary>
    </member>
    <member name="M:Snap.UI.Block.RGBColorPicker.#ctor">
      <summary>Construct an RGBColorPicker block</summary>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.Color">
      <summary>The color (as a System.Drawing.Color)</summary>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.RGBColorPicker.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type RGBColorPicker in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The RGBColorPicker block object</returns>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.RGBColorPicker.RetainValue">
      <summary>If true, indicates that the values in the block should be retained from one use of the dialog to the next</summary>
    </member>
    <member name="T:Snap.UI.Block.SectionBuilder">
      <summary>Provides access to the Section Builder subfunction</summary>
    </member>
    <member name="M:Snap.UI.Block.SectionBuilder.#ctor">
      <summary>Construct a SectionBuilder block</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.AllowStopAtIntersectionFollowFillet">
      <summary>If true, indicates that Stop at Intersection, Follow Fillet, and Chain within Feature are visible on the selection bar.</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.AngularTolerance">
      <summary>The angular tolerance value used in constructing the section</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.AutomaticProgression">
      <summary>If true, indicates that focus should automatically progress to the next block</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.ChainWithinFeature">
      <summary>The "Chain Within Feature" selection intent option on the Selection Bar.</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.CreateInterpartLink">
      <summary>The state of the "Create Interpart Link" toggle on the Selection Bar</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.Cue">
      <summary>Text to be displayed in the cue line. Accepts any text string.</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.CurveRules">
      <summary>A bit-mask indicating which Selection Intent options should be shown on the Selection Bar.</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.DefaultCurveRules">
      <summary>The Selection Intent option that will be pre-selected</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.EntityType">
      <summary>Specifies the entity type(s) that will be allowed for selection</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.FollowFillet">
      <summary>The "Follow Fillet" selection intent option on the Selection Bar.</summary>
    </member>
    <member name="M:Snap.UI.Block.SectionBuilder.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SectionBuilder in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SectionBuilder block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.InterpartSelection">
      <summary>Specifies the behavior of the block when selecting geometry outside of the work part</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.LabelString">
      <summary>Text displayed before the object count on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.PointOverlay">
      <summary>If true, allows the user to specify points on-the-fly, which will be added to the selection list</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.SelectedObjects">
      <summary>Array of NX objects selected by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.ShowFlowDirectionAndOriginCurve">
      <summary>If true, indicates that the user can change the origin curve and flow direction</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.SnapPointStates">
      <summary>The list of Snap Point options that will be available on the snap point toolbar</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.StopAtIntersection">
      <summary>The "Stop at Intersection" selection intent option on the Selection Bar.</summary>
    </member>
    <member name="P:Snap.UI.Block.SectionBuilder.ToolTip">
      <summary>The tooltip text to be displayed when the user hovers the mouse pointer over the block</summary>
    </member>
    <member name="T:Snap.UI.Block.SelectExpression">
      <summary>Allows the user to select an expression</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectExpression.#ctor">
      <summary>Construct a SelectExpression block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectExpression.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectExpression.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectExpression.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectExpression.ExpressionSortOrder">
      <summary>The sorting order of the list of expressions</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectExpression.ExpressionType">
      <summary>The type of expressions to be listed for selection</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectExpression.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SelectExpression in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SelectExpression block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SelectExpression.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectExpression.SelectedExpression">
      <summary>The selected expression</summary>
    </member>
    <member name="T:Snap.UI.Block.SelectFeature">
      <summary>Allows the user to select a feature</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectFeature.#ctor">
      <summary>Construct a SelectFeature block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.AllowMultiple">
      <summary>If true, indicates selection of multiple objects is allowed</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.AutomaticProgression">
      <summary>If true, indicates that focus should automatically progress to the next block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.Cue">
      <summary>Text to be displayed in the cue line. Accepts any text string.</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectFeature.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SelectFeature in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SelectFeature block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.LabelString">
      <summary>Text displayed before the object count on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.SelectedObjects">
      <summary>Array of NX objects selected by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectFeature.ToolTip">
      <summary>The tooltip text to be displayed when the user hovers the mouse pointer over the block</summary>
    </member>
    <member name="T:Snap.UI.Block.SelectionScope">
      <summary>The scope for selecting objects</summary>
    </member>
    <member name="F:Snap.UI.Block.SelectionScope.UseDefault">
      <summary>Use the default selection scope</summary>
    </member>
    <member name="F:Snap.UI.Block.SelectionScope.WorkPart">
      <summary>Use the work part</summary>
    </member>
    <member name="F:Snap.UI.Block.SelectionScope.AnyInAssembly">
      <summary>Use any occurrence in the assembly</summary>
    </member>
    <member name="F:Snap.UI.Block.SelectionScope.WorkPartAndOccurrence">
      <summary>Use the work part or any occurrence</summary>
    </member>
    <member name="T:Snap.UI.Block.SelectObject">
      <summary>Allows the user to select one or more general NX objects</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.#ctor">
      <summary>Construct a SelectObject block</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.#ctor(System.String,System.String)">
      <summary>Construct a select object block</summary>
      <param name="cue">Message to be shown in the Cue line when the dialog is displayed</param>
      <param name="label">Label displayed to the left of the selection field</param>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.AllowMultiple">
      <summary>If true, indicates selection of multiple objects is allowed</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.AutomaticProgression">
      <summary>If true, indicates that focus should automatically progress to the next block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.CreateInterpartLink">
      <summary>The state of the "Create Interpart Link" toggle on the Selection Bar</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.Cue">
      <summary>Text to be displayed in the cue line. Accepts any text string.</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SelectObject in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SelectObject block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.InterpartSelection">
      <summary>Specifies the behavior of the block when selecting geometry outside of the work part</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.LabelString">
      <summary>Text displayed before the object count on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.MaskTriples">
      <summary>The mask triples defining the selection filter</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.MaximumScope">
      <summary>The selection scope (work part, assembly, etc.)</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.PickPoint">
      <summary>The "pick point" on the selected object</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.PointOverlay">
      <summary>If true, allows the user to specify points on-the-fly, which will be added to the selection list</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.SelectedObjects">
      <summary>Array of NX objects selected by the user</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.SetCurveFilter">
      <summary>Sets the filter to allow selection of any type of curve or edge objects</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.SetCurveFilter(Snap.NX.ObjectTypes.Type[])">
      <summary>Sets the filter to allow selection of given types of curve or edge objects</summary>
      <param name="types">Array of edge/curve types that are to be eligible for selection</param>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.SetFaceFilter">
      <summary>Sets the filter to allow selection of any type of face</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.SetFaceFilter(Snap.NX.ObjectTypes.SubType[])">
      <summary>Sets the filter to allow selection of given types of faces</summary>
      <param name="faceTypes">Array of face types that are to be eligible for selection</param>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.SetFilter(Snap.NX.ObjectTypes.Type,Snap.NX.ObjectTypes.SubType)">
      <summary>Sets the selection filter using an object type and subtype</summary>
      <param name="type">Object type that is to be eligible for selection</param>
      <param name="subtype">Object subtype that is to be eligible for selection</param>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.SetFilter(Snap.NX.ObjectTypes.Type[])">
      <summary>Sets the selection filter using object types</summary>
      <param name="types">Array of object types that are to be eligible for selection</param>
    </member>
    <member name="M:Snap.UI.Block.SelectObject.SetFilter(Snap.NX.ObjectTypes.TypeCombo[])">
      <summary>Sets the selection filter using TypeCombos</summary>
      <param name="combos">TypeCombos indicating which types of objects should be eligible for selection</param>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.SnapPointStates">
      <summary>The list of Snap Point options that will be available on the snap point toolbar</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectObject.ToolTip">
      <summary>The tooltip text to be displayed when the user hovers the mouse pointer over the block</summary>
    </member>
    <member name="T:Snap.UI.Block.SelectPart">
      <summary>Allows the user to select a part</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectPart.#ctor">
      <summary>Construct a SelectPart block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectPart.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectPart.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectPart.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SelectPart.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SelectPart in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SelectPart block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SelectPart.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectPart.SelectedObjects">
      <summary>Array of NX objects selected by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SelectPart.SelectedParts">
      <summary>Array of parts selected by the user</summary>
    </member>
    <member name="T:Snap.UI.Block.Separator">
      <summary>A separator (horizontal line) used to delineate items on the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.Separator.#ctor">
      <summary>Creates a new block of type Separator with default configuration</summary>
    </member>
    <member name="M:Snap.UI.Block.Separator.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type Separator in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The Separator block object</returns>
    </member>
    <member name="T:Snap.UI.Block.SnapFocusOption">
      <summary>Controls the availability of the SNAP to Object option on MB3 during handle dragging</summary>
    </member>
    <member name="F:Snap.UI.Block.SnapFocusOption.None">
      <summary>The SNAP To Object option is not available</summary>
    </member>
    <member name="F:Snap.UI.Block.SnapFocusOption.OnClick">
      <summary>The SNAP To Object option is automatically activated  -- no need to explicitly request it</summary>
    </member>
    <member name="F:Snap.UI.Block.SnapFocusOption.Explicit">
      <summary>The SNAP To Object option is activated only when requested via MB3</summary>
    </member>
    <member name="T:Snap.UI.Block.SnapPointsStateSet">
      <summary>An object that records the states of various snap point options</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.ArcCenter">
      <summary>Controls the use of the "Arc Center" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.BoundedGridPoint">
      <summary>Controls the use of the "Point on Bounded Grid" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.ControlPoint">
      <summary>Controls the use of the "Control Point" option for specifying positions</summary>
    </member>
    <member name="M:Snap.UI.Block.SnapPointsStateSet.DeselectAllShown">
      <summary>Change the state of all "Selected" options to "Shown"</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.EndPoint">
      <summary>Controls the use of the "End Point" option for specifying points</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.ExistingPoint">
      <summary>Controls the use of the "Existing Point" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.Inferred">
      <summary>Controls the use of the "Inferred" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.Intersection">
      <summary>Controls the use of the "Intersection" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.MidPoint">
      <summary>Controls the use of the "Midpoint" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.PointConstructor">
      <summary>Controls the use of the "Point Constructor" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.PointOnCurve">
      <summary>Controls the use of the "Point on Curve" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.PointOnSurface">
      <summary>Controls the use of the "Point on Face" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.Pole">
      <summary>Controls the use of the "Pole" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.QuadrantPoint">
      <summary>Controls the use of the "Quadrant Point" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.ScreenPosition">
      <summary>Controls the use of the "Screen Position" or "Cursor Location" option for specifying positions</summary>
    </member>
    <member name="M:Snap.UI.Block.SnapPointsStateSet.SelectAllShown">
      <summary>Change the state of all "Shown" options to "Selected"</summary>
    </member>
    <member name="M:Snap.UI.Block.SnapPointsStateSet.SetAll(Snap.UI.Block.SnapPointState)">
      <summary>Set all snap point states to be hidden, shown, or selected</summary>
      <param name="state">Snap point state to be applied</param>
    </member>
    <member name="M:Snap.UI.Block.SnapPointsStateSet.SetAllSnapPointStates(Snap.UI.Block.SnapPointState)">
      <summary>Set all snap point states to be hidden, shown, or selected</summary>
      <param name="state">Snap point state to be applied</param>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.TangentPoint">
      <summary>Controls the use of the "Tangent Point" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.TwoCurveIntersection">
      <summary>Controls the use of the "Two Curve Intersection" option for specifying positions</summary>
    </member>
    <member name="P:Snap.UI.Block.SnapPointsStateSet.UserDefined">
      <summary>Controls the use of the "User Defined" option for specifying positions</summary>
    </member>
    <member name="T:Snap.UI.Block.SnapPointState">
      <summary>The three possible states of a snap point option</summary>
    </member>
    <member name="F:Snap.UI.Block.SnapPointState.Hidden">
      <summary>Not shown on toolbar, so not available.</summary>
    </member>
    <member name="F:Snap.UI.Block.SnapPointState.Shown">
      <summary>Shown on toolbar. Available, but not chosen.</summary>
    </member>
    <member name="F:Snap.UI.Block.SnapPointState.Selected">
      <summary>Shown on toolbar, and depressed (selected for use)</summary>
    </member>
    <member name="T:Snap.UI.Block.SpecifyAxis">
      <summary>Allows the user to specify an axis</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyAxis.#ctor">
      <summary>Construct a SpecifyAxis block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyAxis.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyAxis.Direction">
      <summary>The direction vector of the specified axis</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyAxis.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyAxis.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyAxis.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SpecifyAxis in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SpecifyAxis block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SpecifyAxis.Label">
      <summary>Explanatory text displayed above the block, if it begins a group</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyAxis.Origin">
      <summary>The origin of the specified axis</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyAxis.SelectedObjects">
      <summary>An array containing an axis object specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyAxis.SpecifiedAxis">
      <summary>An axis object specified by the user</summary>
    </member>
    <member name="T:Snap.UI.Block.SpecifyCsys">
      <summary>Allows the user to specify a coordinate system (csys)</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyCsys.#ctor">
      <summary>Construct a specify CSYS block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.CreateInterpartLink">
      <summary>The state of the "Create Interpart Link" toggle on the Selection Bar</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyCsys.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SpecifyCsys in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SpecifyCsys block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.InterpartSelection">
      <summary>Specifies the behavior of the block when selecting geometry outside of the work part</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.Label">
      <summary>Explanatory text displayed above the block, if it begins a group</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.LabelString">
      <summary>Prompt text displayed within the block </summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.Orientation">
      <summary>Orientation of the selected coordinate system</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.Origin">
      <summary>The location of the origin of the selected coordinate system</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.SelectedObjects">
      <summary>An array containing a CoordinateSystem object specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.SpecifiedCsys">
      <summary>A Snap.NX.CoordinateSystem object specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCsys.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="T:Snap.UI.Block.SpecifyCursorLocation">
      <summary>Allows the user to specify a cursor location (i.e. a "screen position")</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyCursorLocation.#ctor">
      <summary>Construct a SpecifyCursorLocation block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCursorLocation.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCursorLocation.CursorLocation">
      <summary>The specified cursor location</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCursorLocation.DisplayTemporaryPoint">
      <summary>If true, indicates that a temporary point (asterisk "splat") will be displayed at the specified location</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCursorLocation.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCursorLocation.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyCursorLocation.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SpecifyCursorLocation in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SpecifyCursorLocation block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCursorLocation.LabelString">
      <summary>Prompt text displayed within the block </summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyCursorLocation.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="T:Snap.UI.Block.SpecifyOrientation">
      <summary>Allows the user to specify an orientation</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyOrientation.#ctor">
      <summary>Construct a SpecifyOrientation block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.AxisX">
      <summary>The X-Axis of the coordinate system -- must not be (0,0,0)</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.AxisY">
      <summary>The Y-Axis of the coordinate system -- must not be (0,0,0)</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.EnableFacetSelection">
      <summary>If true, indicates that elements of a facetted body can be selected</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyOrientation.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SpecifyOrientation in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SpecifyOrientation block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.HasOriginGwif">
      <summary>If true, indicates that a GWIF will be displayed when this block has focus </summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.IsOriginSpecified">
      <summary>If true, indicates that the origin has been specified (which allows the block to be enabled)</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.IsWCSCoordinates">
      <summary>If true, indicates that the numbers in the GWIF are WCS coordinates</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.Orientation">
      <summary>The orientation of the coordinate system</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.Origin">
      <summary>The origin of the coordinate system</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyOrientation.SnapPointStates">
      <summary>The list of Snap Point options that will be available on the snap point toolbar</summary>
    </member>
    <member name="T:Snap.UI.Block.SpecifyPlane">
      <summary>Allows the user to specify a plane</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyPlane.#ctor">
      <summary>Construct a SpecifyPlane block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyPlane.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SpecifyPlane in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SpecifyPlane block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.Label">
      <summary>Explanatory text displayed above the block, if it begins a group</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.LabelString">
      <summary>Prompt text displayed within the block </summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.Plane">
      <summary>The geometry plane of the selected plane</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.SelectedObjects">
      <summary>An array containing a plane object specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.SpecifiedPlane">
      <summary>A plane object specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPlane.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="T:Snap.UI.Block.SpecifyPoint">
      <summary>Allows the user to specify a point (location)</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyPoint.#ctor">
      <summary>Construct a SpecifyPoint block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.AutomaticProgression">
      <summary>If true, indicates that focus should automatically progress to the next block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.EnableFacetSelection">
      <summary>If true, indicates that elements of a facetted body can be selected</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyPoint.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SpecifyPoint in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SpecifyPoint block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.InterpartSelection">
      <summary>Specifies the behavior of the block when selecting geometry outside of the work part</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.Label">
      <summary>Explanatory text displayed above the block, if it begins a group</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.LabelString">
      <summary>Prompt text displayed within the block </summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.Position">
      <summary>The location of the specified point</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.SelectedObjects">
      <summary>An array containing a Point object specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.SnapPointStates">
      <summary>The list of Snap Point options that will be available on the snap point toolbar</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.SnapPointTypesEnabled">
      <summary>Specifies the list of snapping options that will be available on the snap point toolbar</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.SnapPointTypesOnByDefault">
      <summary>The list of snapping options that will be selected (enabled by default) on the snap point toolbar</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.SpecifiedPoint">
      <summary>A Snap.NX.Point object specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyPoint.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="T:Snap.UI.Block.SpecifyVector">
      <summary>Allows the user to specify a vector</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyVector.#ctor">
      <summary>Construct a SpecifyVector block</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyVector.#ctor(Snap.Position,Snap.Vector)">
      <summary>Construct a SpecifyVector block</summary>
      <param name="origin">Origin of the vector</param>
      <param name="direction">Direction of the vector</param>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.AutomaticProgression">
      <summary>If true, indicates that focus should automatically progress to the next block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.Direction">
      <summary>The vector direction</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.DoubleSide">
      <summary>If true, indicates that the vector is double-sided</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.EnableFacetSelection">
      <summary>If true, indicates that elements of a facetted body can be selected</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.SpecifyVector.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SpecifyVector in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SpecifyVector block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.InterpartSelection">
      <summary>Specifies the behavior of the block when selecting geometry outside of the work part</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.Is2DMode">
      <summary>If true, indicates that the vector will be specified in a 2D mode</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.Label">
      <summary>Explanatory text displayed above the block, if it begins a group</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.LabelString">
      <summary>Prompt text displayed within the block </summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.Origin">
      <summary>The vector origin</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.SelectedObjects">
      <summary>An array containing a direction object specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.SnapPointStates">
      <summary>The list of Snap Point options that will be available on the snap point toolbar</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.SpecifiedVector">
      <summary>A direction object specified by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SpecifyVector.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="T:Snap.UI.Block.StepStatus">
      <summary>Determines how selection controls the availability of OK/Apply in the dialog</summary>
    </member>
    <member name="F:Snap.UI.Block.StepStatus.Required">
      <summary>A selection is required, and none has been provided, yet, so OK/Apply are unavailable</summary>
    </member>
    <member name="F:Snap.UI.Block.StepStatus.Optional">
      <summary>The selection is optional, so OK/Apply are available no matter what</summary>
    </member>
    <member name="F:Snap.UI.Block.StepStatus.Satisfied">
      <summary>A selection is required, and has been provided, so OK/Apply are available</summary>
    </member>
    <member name="T:Snap.UI.Block.String">
      <summary>Allows the user to enter/edit a String</summary>
    </member>
    <member name="M:Snap.UI.Block.String.#ctor">
      <summary>Construct a String block</summary>
    </member>
    <member name="M:Snap.UI.Block.String.#ctor(System.String)">
      <summary>Construct a String block</summary>
      <param name="label">Label displayed to the left of the string entry field</param>
    </member>
    <member name="P:Snap.UI.Block.String.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.String.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.String.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.String.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.String.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type String in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The String block object</returns>
    </member>
    <member name="P:Snap.UI.Block.String.IsSecret">
      <summary>if true, characters typed will be displayed as asterisks(*).</summary>
    </member>
    <member name="P:Snap.UI.Block.String.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.String.ListItems">
      <summary>Contains the list of items for list box</summary>
    </member>
    <member name="P:Snap.UI.Block.String.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.String.MaxTextLength">
      <summary>The maximum number of characters accepted as input (integer between 1 and 1024)</summary>
    </member>
    <member name="P:Snap.UI.Block.String.PresentationStyle">
      <summary>The presentation style of the block (how it is displayed)</summary>
    </member>
    <member name="P:Snap.UI.Block.String.ReadOnly">
      <summary>If true, indicates that the string cannot be modified</summary>
    </member>
    <member name="P:Snap.UI.Block.String.RetainValue">
      <summary>If true, indicates that the values in the block should be retained from one use of the dialog to the next</summary>
    </member>
    <member name="P:Snap.UI.Block.String.ToolTip">
      <summary>The tooltip text to be displayed when the user hovers the mouse pointer over the block</summary>
    </member>
    <member name="P:Snap.UI.Block.String.Value">
      <summary>The string to be displayed/edited</summary>
    </member>
    <member name="P:Snap.UI.Block.String.WideValue">
      <summary>The string to be displayed/edited (ASCII only)</summary>
    </member>
    <member name="T:Snap.UI.Block.StringPresentationStyle">
      <summary>Controls the presentation style (display) of String blocks</summary>
    </member>
    <member name="F:Snap.UI.Block.StringPresentationStyle.KeyIn">
      <summary> String is displayed in a normal text box</summary>
    </member>
    <member name="F:Snap.UI.Block.StringPresentationStyle.Wide">
      <summary> String is displayed in a wide text box</summary>
    </member>
    <member name="F:Snap.UI.Block.StringPresentationStyle.List">
      <summary> String is displayed in a list box</summary>
    </member>
    <member name="F:Snap.UI.Block.StringPresentationStyle.Combo">
      <summary> String is displayed in a combo box</summary>
    </member>
    <member name="T:Snap.UI.Block.SuperSection">
      <summary>Provides access to the Super Section subfunction</summary>
    </member>
    <member name="M:Snap.UI.Block.SuperSection.#ctor">
      <summary>Construct a SuperSection block</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.AllowStopAtIntersectionFollowFillet">
      <summary>If true, indicates that Stop at Intersection, Follow Fillet, and Chain within Feature are visible on the selection bar.</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.AngularTolerance">
      <summary>The angular tolerance value used in constructing the section</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.AutomaticProgression">
      <summary>If true, indicates that focus should automatically progress to the next block</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.BalloonTooltipImage">
      <summary>The pathname of the image file to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.BalloonTooltipLayout">
      <summary>The location of the text with respect to the image in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.BalloonTooltipText">
      <summary>The text to be displayed in the balloon tooltip</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.ChainWithinFeature">
      <summary>The "Chain Within Feature" selection intent option on the Selection Bar.</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.CreateInterpartLink">
      <summary>The state of the "Create Interpart Link" toggle on the Selection Bar</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.Cue">
      <summary>Text to be displayed in the cue line. Accepts any text string.</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.CurveRules">
      <summary>A bit-mask indicating which Selection Intent options should be shown on the Selection Bar.</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.DefaultCurveRules">
      <summary>The Selection Intent option that will be pre-selected</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.EntityType">
      <summary>Specifies the entity type(s) that will be allowed for selection</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.FollowFillet">
      <summary>The "Follow Fillet" selection intent option on the Selection Bar.</summary>
    </member>
    <member name="M:Snap.UI.Block.SuperSection.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type SuperSection in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The SuperSection block object</returns>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.InterpartSelection">
      <summary>Specifies the behavior of the block when selecting geometry outside of the work part</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.LabelString">
      <summary>Text displayed before the object count on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.PointOverlay">
      <summary>If true, allows the user to specify points on-the-fly, which will be added to the selection list</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.SelectedObjects">
      <summary>Array of NX objects selected by the user</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.ShowFlowDirectionAndOriginCurve">
      <summary>If true, indicates that the user can change the origin curve and flow direction</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.SketchOnPath">
      <summary>If true, allows the user to switch between Sketch in Place and Sketch on Path</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.SnapPointStates">
      <summary>The list of Snap Point options that will be available on the snap point toolbar</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.StepStatus">
      <summary>Indicates whether a selection is required in order for OK and Apply to become available</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.StopAtIntersection">
      <summary>The "Stop at Intersection" selection intent option on the Selection Bar.</summary>
    </member>
    <member name="P:Snap.UI.Block.SuperSection.ToolTip">
      <summary>The tooltip text to be displayed when the user hovers the mouse pointer over the block</summary>
    </member>
    <member name="T:Snap.UI.Block.TableLayout">
      <summary>Provides a way to arrange dialog blocks in a tabular layout</summary>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.TableLayout.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type TableLayout in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The TableLayout block object</returns>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.HasColumnLabels">
      <summary>If true, indicates that the Table Layout Block has column labels </summary>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.HighQualityBitmap">
      <summary>If true, indicates that a high-quality (24-bit) version of the Bitmap should be displayed</summary>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.Members">
      <summary>Array of blocks that are contained within this TableLayout block.</summary>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.NumberOfColumns">
      <summary>The number of columns used in the layout of the block.</summary>
    </member>
    <member name="P:Snap.UI.Block.TableLayout.RetainValue">
      <summary>If true, indicates that the values in the block should be retained from one use of the dialog to the next</summary>
    </member>
    <member name="T:Snap.UI.Block.Toggle">
      <summary>Allows the user to input a binary toggle value (yes/no, on/off, or true/false)/</summary>
    </member>
    <member name="M:Snap.UI.Block.Toggle.#ctor">
      <summary>Construct a Toggle (check box) block</summary>
    </member>
    <member name="M:Snap.UI.Block.Toggle.#ctor(System.String,System.Boolean)">
      <summary>Construct a Toggle (check box) block</summary>
      <param name="label">Label displayed to the right of the check box</param>
      <param name="value">If true, the toggle is checked</param>
    </member>
    <member name="P:Snap.UI.Block.Toggle.BeginGroup">
      <summary>If true, indicates that a new group should be created to hold this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Toggle.Bitmap">
      <summary>The name of a bitmap image used to label this block</summary>
    </member>
    <member name="P:Snap.UI.Block.Toggle.Enabled">
      <summary>If true, indicates that this block should be sensitive (not grayed out) in the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Toggle.Expanded">
      <summary>If true, indicates that this block should be expanded (not collapsed) in the dialog</summary>
    </member>
    <member name="M:Snap.UI.Block.Toggle.GetBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
      <summary>Finds and identifies a block of type Toggle in a dialog</summary>
      <param name="dialog">The dialog in which the block resides</param>
      <param name="name">The name (blockID) of the block</param>
      <returns>The Toggle block object</returns>
    </member>
    <member name="P:Snap.UI.Block.Toggle.Label">
      <summary>Explanatory text to label this block on the dialog</summary>
    </member>
    <member name="P:Snap.UI.Block.Toggle.Localize">
      <summary>If true, indicates that the Label string should be replaced by a localized version</summary>
    </member>
    <member name="P:Snap.UI.Block.Toggle.RetainValue">
      <summary>If true, indicates that the values in the block should be retained from one use of the dialog to the next</summary>
    </member>
    <member name="P:Snap.UI.Block.Toggle.Value">
      <summary>If true, indicates that the toggle is "checked"</summary>
    </member>
  </members>
</doc>
